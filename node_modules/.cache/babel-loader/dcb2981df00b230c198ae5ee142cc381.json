{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as formatter from './impl/format';\nimport * as edit from './impl/edit';\nimport * as scanner from './impl/scanner';\nimport * as parser from './impl/parser';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\n\nexport var createScanner = scanner.createScanner;\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\n\nexport var getLocation = parser.getLocation;\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore, always check the errors list to find out if the input was valid.\n */\n\nexport var parse = parser.parse;\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\n\nexport var parseTree = parser.parseTree;\n/**\n * Finds the node at the given path in a JSON DOM.\n */\n\nexport var findNodeAtLocation = parser.findNodeAtLocation;\n/**\n * Finds the innermost node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.\n */\n\nexport var findNodeAtOffset = parser.findNodeAtOffset;\n/**\n * Gets the JSON path of the given JSON DOM node\n */\n\nexport var getNodePath = parser.getNodePath;\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\n\nexport var getNodeValue = parser.getNodeValue;\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\n\nexport var visit = parser.visit;\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\n\nexport var stripComments = parser.stripComments;\nexport function printParseErrorCode(code) {\n  switch (code) {\n    case 1\n    /* ParseErrorCode.InvalidSymbol */\n    :\n      return 'InvalidSymbol';\n\n    case 2\n    /* ParseErrorCode.InvalidNumberFormat */\n    :\n      return 'InvalidNumberFormat';\n\n    case 3\n    /* ParseErrorCode.PropertyNameExpected */\n    :\n      return 'PropertyNameExpected';\n\n    case 4\n    /* ParseErrorCode.ValueExpected */\n    :\n      return 'ValueExpected';\n\n    case 5\n    /* ParseErrorCode.ColonExpected */\n    :\n      return 'ColonExpected';\n\n    case 6\n    /* ParseErrorCode.CommaExpected */\n    :\n      return 'CommaExpected';\n\n    case 7\n    /* ParseErrorCode.CloseBraceExpected */\n    :\n      return 'CloseBraceExpected';\n\n    case 8\n    /* ParseErrorCode.CloseBracketExpected */\n    :\n      return 'CloseBracketExpected';\n\n    case 9\n    /* ParseErrorCode.EndOfFileExpected */\n    :\n      return 'EndOfFileExpected';\n\n    case 10\n    /* ParseErrorCode.InvalidCommentToken */\n    :\n      return 'InvalidCommentToken';\n\n    case 11\n    /* ParseErrorCode.UnexpectedEndOfComment */\n    :\n      return 'UnexpectedEndOfComment';\n\n    case 12\n    /* ParseErrorCode.UnexpectedEndOfString */\n    :\n      return 'UnexpectedEndOfString';\n\n    case 13\n    /* ParseErrorCode.UnexpectedEndOfNumber */\n    :\n      return 'UnexpectedEndOfNumber';\n\n    case 14\n    /* ParseErrorCode.InvalidUnicode */\n    :\n      return 'InvalidUnicode';\n\n    case 15\n    /* ParseErrorCode.InvalidEscapeCharacter */\n    :\n      return 'InvalidEscapeCharacter';\n\n    case 16\n    /* ParseErrorCode.InvalidCharacter */\n    :\n      return 'InvalidCharacter';\n  }\n\n  return '<unknown ParseErrorCode>';\n}\n/**\n * Computes the edit operations needed to format a JSON document.\n *\n * @param documentText The input text\n * @param range The range to format or `undefined` to format the full content\n * @param options The formatting options\n * @returns The edit operations describing the formatting changes to the original document following the format described in {@linkcode EditResult}.\n * To apply the edit operations to the input, use {@linkcode applyEdits}.\n */\n\nexport function format(documentText, range, options) {\n  return formatter.format(documentText, range, options);\n}\n/**\n * Computes the edit operations needed to modify a value in the JSON document.\n *\n * @param documentText The input text\n * @param path The path of the value to change. The path represents either to the document root, a property or an array item.\n * If the path points to an non-existing property or item, it will be created.\n * @param value The new value for the specified property or item. If the value is undefined,\n * the property or item will be removed.\n * @param options Options\n * @returns The edit operations describing the changes to the original document, following the format described in {@linkcode EditResult}.\n * To apply the edit operations to the input, use {@linkcode applyEdits}.\n */\n\nexport function modify(text, path, value, options) {\n  return edit.setProperty(text, path, value, options);\n}\n/**\n * Applies edits to an input string.\n * @param text The input text\n * @param edits Edit operations following the format described in {@linkcode EditResult}.\n * @returns The text with the applied edits.\n * @throws An error if the edit operations are not well-formed as described in {@linkcode EditResult}.\n */\n\nexport function applyEdits(text, edits) {\n  for (var i = edits.length - 1; i >= 0; i--) {\n    text = edit.applyEdit(text, edits[i]);\n  }\n\n  return text;\n}","map":{"version":3,"names":["formatter","edit","scanner","parser","createScanner","getLocation","parse","parseTree","findNodeAtLocation","findNodeAtOffset","getNodePath","getNodeValue","visit","stripComments","printParseErrorCode","code","format","documentText","range","options","modify","text","path","value","setProperty","applyEdits","edits","i","length","applyEdit"],"sources":["/Users/braxtoncoats/Github/bcd/node_modules/jsonc-parser/lib/esm/main.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as formatter from './impl/format';\nimport * as edit from './impl/edit';\nimport * as scanner from './impl/scanner';\nimport * as parser from './impl/parser';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport var createScanner = scanner.createScanner;\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport var getLocation = parser.getLocation;\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore, always check the errors list to find out if the input was valid.\n */\nexport var parse = parser.parse;\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport var parseTree = parser.parseTree;\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport var findNodeAtLocation = parser.findNodeAtLocation;\n/**\n * Finds the innermost node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.\n */\nexport var findNodeAtOffset = parser.findNodeAtOffset;\n/**\n * Gets the JSON path of the given JSON DOM node\n */\nexport var getNodePath = parser.getNodePath;\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport var getNodeValue = parser.getNodeValue;\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport var visit = parser.visit;\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport var stripComments = parser.stripComments;\nexport function printParseErrorCode(code) {\n    switch (code) {\n        case 1 /* ParseErrorCode.InvalidSymbol */: return 'InvalidSymbol';\n        case 2 /* ParseErrorCode.InvalidNumberFormat */: return 'InvalidNumberFormat';\n        case 3 /* ParseErrorCode.PropertyNameExpected */: return 'PropertyNameExpected';\n        case 4 /* ParseErrorCode.ValueExpected */: return 'ValueExpected';\n        case 5 /* ParseErrorCode.ColonExpected */: return 'ColonExpected';\n        case 6 /* ParseErrorCode.CommaExpected */: return 'CommaExpected';\n        case 7 /* ParseErrorCode.CloseBraceExpected */: return 'CloseBraceExpected';\n        case 8 /* ParseErrorCode.CloseBracketExpected */: return 'CloseBracketExpected';\n        case 9 /* ParseErrorCode.EndOfFileExpected */: return 'EndOfFileExpected';\n        case 10 /* ParseErrorCode.InvalidCommentToken */: return 'InvalidCommentToken';\n        case 11 /* ParseErrorCode.UnexpectedEndOfComment */: return 'UnexpectedEndOfComment';\n        case 12 /* ParseErrorCode.UnexpectedEndOfString */: return 'UnexpectedEndOfString';\n        case 13 /* ParseErrorCode.UnexpectedEndOfNumber */: return 'UnexpectedEndOfNumber';\n        case 14 /* ParseErrorCode.InvalidUnicode */: return 'InvalidUnicode';\n        case 15 /* ParseErrorCode.InvalidEscapeCharacter */: return 'InvalidEscapeCharacter';\n        case 16 /* ParseErrorCode.InvalidCharacter */: return 'InvalidCharacter';\n    }\n    return '<unknown ParseErrorCode>';\n}\n/**\n * Computes the edit operations needed to format a JSON document.\n *\n * @param documentText The input text\n * @param range The range to format or `undefined` to format the full content\n * @param options The formatting options\n * @returns The edit operations describing the formatting changes to the original document following the format described in {@linkcode EditResult}.\n * To apply the edit operations to the input, use {@linkcode applyEdits}.\n */\nexport function format(documentText, range, options) {\n    return formatter.format(documentText, range, options);\n}\n/**\n * Computes the edit operations needed to modify a value in the JSON document.\n *\n * @param documentText The input text\n * @param path The path of the value to change. The path represents either to the document root, a property or an array item.\n * If the path points to an non-existing property or item, it will be created.\n * @param value The new value for the specified property or item. If the value is undefined,\n * the property or item will be removed.\n * @param options Options\n * @returns The edit operations describing the changes to the original document, following the format described in {@linkcode EditResult}.\n * To apply the edit operations to the input, use {@linkcode applyEdits}.\n */\nexport function modify(text, path, value, options) {\n    return edit.setProperty(text, path, value, options);\n}\n/**\n * Applies edits to an input string.\n * @param text The input text\n * @param edits Edit operations following the format described in {@linkcode EditResult}.\n * @returns The text with the applied edits.\n * @throws An error if the edit operations are not well-formed as described in {@linkcode EditResult}.\n */\nexport function applyEdits(text, edits) {\n    for (var i = edits.length - 1; i >= 0; i--) {\n        text = edit.applyEdit(text, edits[i]);\n    }\n    return text;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}