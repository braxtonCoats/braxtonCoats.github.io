{"ast":null,"code":"/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nconst fs = require('fs');\n\nconst _template = require('lodash/template');\n\nconst chalk = require('chalk');\n\nconst GroupMessages = require('../utils/groupMessages');\n\nvar REGISTER_TEMPLATE_DEPRECATION_WARNINGS = GroupMessages.GROUP.RegisterTemplateDeprecationWarnings;\n/**\n * Add a custom template to the Style Dictionary\n * @static\n * @deprecated registerTemplate will be removed in the future, please use registerFormat\n * @memberof module:style-dictionary\n * @param {Object} template\n * @param {String} template.name - The name of your template. You will refer to this in your config.json file.\n * @param {String} template.template - Path to your lodash template\n * @returns {module:style-dictionary}\n * @example\n * ```js\n * StyleDictionary.registerTemplate({\n *   name: 'Swift/colors',\n *   template: __dirname + '/templates/swift/colors.template'\n * });\n * ```\n */\n\nfunction registerTemplate(options) {\n  if (typeof options.name !== 'string') throw new Error('Template name must be a string: ' + chalk.red(JSON.stringify(options.name)));\n  if (typeof options.template !== 'string') throw new Error('Template path must be a string: ' + chalk.red(JSON.stringify(options.template)));\n  if (!fs.existsSync(options.template)) throw new Error('Can\\'t find template: ' + chalk.red(JSON.stringify(options.template)));\n  GroupMessages.add(REGISTER_TEMPLATE_DEPRECATION_WARNINGS, `${options.name}`);\n  var template_string = fs.readFileSync(options.template);\n  this.format[options.name] = _template(template_string);\n  return this;\n}\n\nmodule.exports = registerTemplate;","map":{"version":3,"names":["fs","require","_template","chalk","GroupMessages","REGISTER_TEMPLATE_DEPRECATION_WARNINGS","GROUP","RegisterTemplateDeprecationWarnings","registerTemplate","options","name","Error","red","JSON","stringify","template","existsSync","add","template_string","readFileSync","format","module","exports"],"sources":["/Users/braxtoncoats/Github/bcd/node_modules/style-dictionary/lib/register/template.js"],"sourcesContent":["/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nconst fs = require('fs');\nconst _template = require('lodash/template');\nconst chalk = require('chalk');\nconst GroupMessages = require('../utils/groupMessages');\n\nvar REGISTER_TEMPLATE_DEPRECATION_WARNINGS = GroupMessages.GROUP.RegisterTemplateDeprecationWarnings;\n\n/**\n * Add a custom template to the Style Dictionary\n * @static\n * @deprecated registerTemplate will be removed in the future, please use registerFormat\n * @memberof module:style-dictionary\n * @param {Object} template\n * @param {String} template.name - The name of your template. You will refer to this in your config.json file.\n * @param {String} template.template - Path to your lodash template\n * @returns {module:style-dictionary}\n * @example\n * ```js\n * StyleDictionary.registerTemplate({\n *   name: 'Swift/colors',\n *   template: __dirname + '/templates/swift/colors.template'\n * });\n * ```\n */\nfunction registerTemplate(options) {\n  if (typeof options.name !== 'string')\n    throw new Error('Template name must be a string: ' + chalk.red(JSON.stringify(options.name)));\n  if (typeof options.template !== 'string')\n    throw new Error('Template path must be a string: ' + chalk.red(JSON.stringify(options.template)));\n  if (!fs.existsSync(options.template))\n    throw new Error('Can\\'t find template: ' + chalk.red(JSON.stringify(options.template)));\n\n  GroupMessages.add(\n    REGISTER_TEMPLATE_DEPRECATION_WARNINGS,\n    `${options.name}`\n  );\n\n  var template_string = fs.readFileSync( options.template );\n\n  this.format[options.name] = _template( template_string );\n  return this;\n}\n\nmodule.exports = registerTemplate;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMG,aAAa,GAAGH,OAAO,CAAC,wBAAD,CAA7B;;AAEA,IAAII,sCAAsC,GAAGD,aAAa,CAACE,KAAd,CAAoBC,mCAAjE;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,gBAAT,CAA0BC,OAA1B,EAAmC;EACjC,IAAI,OAAOA,OAAO,CAACC,IAAf,KAAwB,QAA5B,EACE,MAAM,IAAIC,KAAJ,CAAU,qCAAqCR,KAAK,CAACS,GAAN,CAAUC,IAAI,CAACC,SAAL,CAAeL,OAAO,CAACC,IAAvB,CAAV,CAA/C,CAAN;EACF,IAAI,OAAOD,OAAO,CAACM,QAAf,KAA4B,QAAhC,EACE,MAAM,IAAIJ,KAAJ,CAAU,qCAAqCR,KAAK,CAACS,GAAN,CAAUC,IAAI,CAACC,SAAL,CAAeL,OAAO,CAACM,QAAvB,CAAV,CAA/C,CAAN;EACF,IAAI,CAACf,EAAE,CAACgB,UAAH,CAAcP,OAAO,CAACM,QAAtB,CAAL,EACE,MAAM,IAAIJ,KAAJ,CAAU,2BAA2BR,KAAK,CAACS,GAAN,CAAUC,IAAI,CAACC,SAAL,CAAeL,OAAO,CAACM,QAAvB,CAAV,CAArC,CAAN;EAEFX,aAAa,CAACa,GAAd,CACEZ,sCADF,EAEG,GAAEI,OAAO,CAACC,IAAK,EAFlB;EAKA,IAAIQ,eAAe,GAAGlB,EAAE,CAACmB,YAAH,CAAiBV,OAAO,CAACM,QAAzB,CAAtB;EAEA,KAAKK,MAAL,CAAYX,OAAO,CAACC,IAApB,IAA4BR,SAAS,CAAEgB,eAAF,CAArC;EACA,OAAO,IAAP;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiBd,gBAAjB"},"metadata":{},"sourceType":"script"}