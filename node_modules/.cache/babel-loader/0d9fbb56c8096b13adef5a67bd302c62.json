{"ast":null,"code":"var _jsxFileName = \"/Users/braxtoncoats/Github/bcd/src/AppTest.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nimport { ThemeProvider, createTheme } from \"@mui/material\";\nimport { CustomPalette } from \"./theme/CustomPalette\";\nimport Switch from \"@mui/material/Switch\";\nimport { useTheme } from \"@mui/material\";\nimport { Container } from \"@mui/system\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ColorModeContext = /*#__PURE__*/React.createContext({\n  toggleColorMode: () => {}\n});\n\nfunction MyApp() {\n  _s();\n\n  const theme = useTheme();\n  const colorMode = React.useContext(ColorModeContext);\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      sx: {\n        bgcolor: 'primary.main'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Switch, {\n        onClick: colorMode.toggleColorMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Hello, world!       \", theme.palette.mode, \" mode\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Let's create a dark mode toggle that persists when the page is reloaded.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MyApp, \"80lvBfk7TN8cUIlLm9bQxIykp7M=\", false, function () {\n  return [useTheme];\n});\n\n_c = MyApp;\nexport default function ToggleColorMode() {\n  _s2();\n\n  const [mode, setMode] = React.useState('light');\n  const colorMode = React.useMemo(() => ({\n    toggleColorMode: () => {\n      setMode(prevMode => prevMode === 'light' ? 'dark' : 'light');\n    }\n  }), []);\n  const theme = React.useMemo(() => createTheme({\n    CustomPalette: {\n      mode\n    }\n  }), [mode]);\n  return /*#__PURE__*/_jsxDEV(ColorModeContext.Provider, {\n    value: colorMode,\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: /*#__PURE__*/_jsxDEV(MyApp, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(ToggleColorMode, \"d4Wg7a/ehJsJwQbDoYd9huIJFWY=\");\n\n_c2 = ToggleColorMode;\n;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyApp\");\n$RefreshReg$(_c2, \"ToggleColorMode\");","map":{"version":3,"names":["React","ThemeProvider","createTheme","CustomPalette","Switch","useTheme","Container","ColorModeContext","createContext","toggleColorMode","MyApp","theme","colorMode","useContext","bgcolor","palette","mode","ToggleColorMode","setMode","useState","useMemo","prevMode"],"sources":["/Users/braxtoncoats/Github/bcd/src/AppTest.js"],"sourcesContent":["import React from \"react\";\nimport { ThemeProvider, createTheme } from \"@mui/material\";\nimport { CustomPalette } from \"./theme/CustomPalette\";\nimport Switch from \"@mui/material/Switch\";\nimport { useTheme } from \"@mui/material\";\nimport { Container } from \"@mui/system\";\nconst ColorModeContext = React.createContext({ toggleColorMode: () => {} });\n\nfunction MyApp() {\n    const theme = useTheme();\n    const colorMode = React.useContext(ColorModeContext);\n\n\n  return (\n    <ThemeProvider theme={theme}>\n    \n    <Container sx={{bgcolor: 'primary.main'}}>\n        <Switch onClick={colorMode.toggleColorMode}></Switch>\n      <h1>Hello, world!       {theme.palette.mode} mode\n        </h1>\n      <h2>Let's create a dark mode toggle that persists when the page is reloaded.</h2>\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default function ToggleColorMode() {\n    const [mode, setMode] = React.useState('light');\n    const colorMode = React.useMemo(\n      () => ({\n        toggleColorMode: () => {\n          setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\n        },\n      }),\n      [],\n    );\n  \n    const theme = React.useMemo(\n      () =>\n        createTheme({\n          CustomPalette: {\n            mode,\n          },\n        }),\n      [mode],\n    )\n    return (\n        <ColorModeContext.Provider value={colorMode}>\n          <ThemeProvider theme={theme}>\n            <MyApp />\n          </ThemeProvider>\n        </ColorModeContext.Provider>\n      );\n    };"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,eAA3C;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,SAAT,QAA0B,aAA1B;;AACA,MAAMC,gBAAgB,gBAAGP,KAAK,CAACQ,aAAN,CAAoB;EAAEC,eAAe,EAAE,MAAM,CAAE;AAA3B,CAApB,CAAzB;;AAEA,SAASC,KAAT,GAAiB;EAAA;;EACb,MAAMC,KAAK,GAAGN,QAAQ,EAAtB;EACA,MAAMO,SAAS,GAAGZ,KAAK,CAACa,UAAN,CAAiBN,gBAAjB,CAAlB;EAGF,oBACE,QAAC,aAAD;IAAe,KAAK,EAAEI,KAAtB;IAAA,uBAEA,QAAC,SAAD;MAAW,EAAE,EAAE;QAACG,OAAO,EAAE;MAAV,CAAf;MAAA,wBACI,QAAC,MAAD;QAAQ,OAAO,EAAEF,SAAS,CAACH;MAA3B;QAAA;QAAA;QAAA;MAAA,QADJ,eAEE;QAAA,mCAAyBE,KAAK,CAACI,OAAN,CAAcC,IAAvC;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF,eAIE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAJF;IAAA;MAAA;MAAA;MAAA;IAAA;EAFA;IAAA;IAAA;IAAA;EAAA,QADF;AAWD;;GAhBQN,K;UACSL,Q;;;KADTK,K;AAkBT,eAAe,SAASO,eAAT,GAA2B;EAAA;;EACtC,MAAM,CAACD,IAAD,EAAOE,OAAP,IAAkBlB,KAAK,CAACmB,QAAN,CAAe,OAAf,CAAxB;EACA,MAAMP,SAAS,GAAGZ,KAAK,CAACoB,OAAN,CAChB,OAAO;IACLX,eAAe,EAAE,MAAM;MACrBS,OAAO,CAAEG,QAAD,IAAeA,QAAQ,KAAK,OAAb,GAAuB,MAAvB,GAAgC,OAAhD,CAAP;IACD;EAHI,CAAP,CADgB,EAMhB,EANgB,CAAlB;EASA,MAAMV,KAAK,GAAGX,KAAK,CAACoB,OAAN,CACZ,MACElB,WAAW,CAAC;IACVC,aAAa,EAAE;MACba;IADa;EADL,CAAD,CAFD,EAOZ,CAACA,IAAD,CAPY,CAAd;EASA,oBACI,QAAC,gBAAD,CAAkB,QAAlB;IAA2B,KAAK,EAAEJ,SAAlC;IAAA,uBACE,QAAC,aAAD;MAAe,KAAK,EAAED,KAAtB;MAAA,uBACE,QAAC,KAAD;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADJ;AAOC;;IA3BmBM,e;;MAAAA,e;AA2BnB"},"metadata":{},"sourceType":"module"}