{"ast":null,"code":"/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar _ = require(\"./utils/es6_\");\n/**\n * Takes a nested object of properties and filters them using the provided\n * function.\n *\n * @param {Object} properties\n * @param {Function} filter - A function that receives a property object and\n *   returns `true` if the property should be included in the output or `false`\n *   if the property should be excluded from the output.\n * @returns {Object[]} properties - A new object containing only the properties\n *   that matched the filter.\n */\n\n\nfunction filterPropertyObject(properties, filter) {\n  // Use reduce to generate a new object with the unwanted properties filtered\n  // out\n  return _.reduce(properties, (result, value, key) => {\n    // If the value is not an object, we don't know what it is. We return it as-is.\n    if (!_.isObject(value)) {\n      return result; // If the value has a `value` member we know it's a property, pass it to\n      // the filter function and either include it in the final `result` object or\n      // exclude it (by returning the `result` object without it added).\n    } else if (typeof value.value !== 'undefined') {\n      return filter(value) ? _.assign(result, {\n        [key]: value\n      }) : result; // If we got here we have an object that is not a property. We'll assume\n      // it's an object containing multiple properties and recursively filter it\n      // using the `filterPropertyObject` function.\n    } else {\n      const filtered = filterPropertyObject(value, filter); // If the filtered object is not empty then add it to the final `result`\n      // object. If it is empty then every property inside of it was filtered\n      // out, then exclude it entirely from the final `result` object.\n\n      return _.isEmpty(filtered) ? result : _.assign(result, {\n        [key]: filtered\n      });\n    }\n  }, {});\n}\n/**\n * Takes an array of properties and filters them using the provided function.\n *\n * @param {Object[]} properties\n * @param {Function} filter - A function that receives a property object and\n *   returns `true` if the property should be included in the output or `false`\n *   if the property should be excluded from the output.\n * @returns {Object[]} properties - A new array containing only the properties\n *   that matched the filter.\n */\n\n\nfunction filterPropertyArray(properties, filter) {\n  // Go lodash!\n  return _.filter(properties, filter);\n}\n/**\n * Takes a dictionary and filters the `allProperties` array and the `properties`\n * object using a function provided by the user.\n *\n * @param {Object} dictionary\n * @param {Function} filter - A function that receives a token object\n *   and returns `true` if the token should be included in the output\n *   or `false` if the token should be excluded from the output\n * @returns {Object} dictionary - A new dictionary containing only the\n *   properties that matched the filter (or the original dictionary if no filter\n *   function was provided).\n */\n\n\nfunction filterProperties(dictionary, filter) {\n  if (!filter) {\n    return dictionary;\n  } else {\n    return {\n      allProperties: filterPropertyArray(dictionary.allProperties, filter),\n      properties: filterPropertyObject(dictionary.properties, filter)\n    };\n  }\n}\n\nmodule.exports = filterProperties;","map":{"version":3,"names":["_","require","filterPropertyObject","properties","filter","reduce","result","value","key","isObject","assign","filtered","isEmpty","filterPropertyArray","filterProperties","dictionary","allProperties","module","exports"],"sources":["/Users/braxtoncoats/Github/bcd/node_modules/style-dictionary/lib/filterProperties.js"],"sourcesContent":["/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nvar _ = require(\"./utils/es6_\")\n\n/**\n * Takes a nested object of properties and filters them using the provided\n * function.\n *\n * @param {Object} properties\n * @param {Function} filter - A function that receives a property object and\n *   returns `true` if the property should be included in the output or `false`\n *   if the property should be excluded from the output.\n * @returns {Object[]} properties - A new object containing only the properties\n *   that matched the filter.\n */\nfunction filterPropertyObject(properties, filter) {\n  // Use reduce to generate a new object with the unwanted properties filtered\n  // out\n  return _.reduce(properties, (result, value, key) => {\n    // If the value is not an object, we don't know what it is. We return it as-is.\n    if (!_.isObject(value)) {\n      return result\n    // If the value has a `value` member we know it's a property, pass it to\n    // the filter function and either include it in the final `result` object or\n    // exclude it (by returning the `result` object without it added).\n    } else if (typeof value.value !== 'undefined') {\n      return filter(value) ? _.assign(result, { [key]: value }) : result\n    // If we got here we have an object that is not a property. We'll assume\n    // it's an object containing multiple properties and recursively filter it\n    // using the `filterPropertyObject` function.\n    } else {\n      const filtered = filterPropertyObject(value, filter)\n      // If the filtered object is not empty then add it to the final `result`\n      // object. If it is empty then every property inside of it was filtered\n      // out, then exclude it entirely from the final `result` object.\n      return _.isEmpty(filtered) ? result : _.assign(result, { [key]: filtered })\n    }\n  }, {})\n}\n\n/**\n * Takes an array of properties and filters them using the provided function.\n *\n * @param {Object[]} properties\n * @param {Function} filter - A function that receives a property object and\n *   returns `true` if the property should be included in the output or `false`\n *   if the property should be excluded from the output.\n * @returns {Object[]} properties - A new array containing only the properties\n *   that matched the filter.\n */\nfunction filterPropertyArray(properties, filter) {\n  // Go lodash!\n  return _.filter(properties, filter)\n}\n\n/**\n * Takes a dictionary and filters the `allProperties` array and the `properties`\n * object using a function provided by the user.\n *\n * @param {Object} dictionary\n * @param {Function} filter - A function that receives a token object\n *   and returns `true` if the token should be included in the output\n *   or `false` if the token should be excluded from the output\n * @returns {Object} dictionary - A new dictionary containing only the\n *   properties that matched the filter (or the original dictionary if no filter\n *   function was provided).\n */\nfunction filterProperties(dictionary, filter) {\n  if (!filter) {\n    return dictionary\n  } else {\n    return {\n      allProperties: filterPropertyArray(dictionary.allProperties, filter),\n      properties: filterPropertyObject(dictionary.properties, filter)\n    };\n  }\n}\n\nmodule.exports = filterProperties\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,cAAD,CAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,oBAAT,CAA8BC,UAA9B,EAA0CC,MAA1C,EAAkD;EAChD;EACA;EACA,OAAOJ,CAAC,CAACK,MAAF,CAASF,UAAT,EAAqB,CAACG,MAAD,EAASC,KAAT,EAAgBC,GAAhB,KAAwB;IAClD;IACA,IAAI,CAACR,CAAC,CAACS,QAAF,CAAWF,KAAX,CAAL,EAAwB;MACtB,OAAOD,MAAP,CADsB,CAExB;MACA;MACA;IACC,CALD,MAKO,IAAI,OAAOC,KAAK,CAACA,KAAb,KAAuB,WAA3B,EAAwC;MAC7C,OAAOH,MAAM,CAACG,KAAD,CAAN,GAAgBP,CAAC,CAACU,MAAF,CAASJ,MAAT,EAAiB;QAAE,CAACE,GAAD,GAAOD;MAAT,CAAjB,CAAhB,GAAqDD,MAA5D,CAD6C,CAE/C;MACA;MACA;IACC,CALM,MAKA;MACL,MAAMK,QAAQ,GAAGT,oBAAoB,CAACK,KAAD,EAAQH,MAAR,CAArC,CADK,CAEL;MACA;MACA;;MACA,OAAOJ,CAAC,CAACY,OAAF,CAAUD,QAAV,IAAsBL,MAAtB,GAA+BN,CAAC,CAACU,MAAF,CAASJ,MAAT,EAAiB;QAAE,CAACE,GAAD,GAAOG;MAAT,CAAjB,CAAtC;IACD;EACF,CAnBM,EAmBJ,EAnBI,CAAP;AAoBD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,mBAAT,CAA6BV,UAA7B,EAAyCC,MAAzC,EAAiD;EAC/C;EACA,OAAOJ,CAAC,CAACI,MAAF,CAASD,UAAT,EAAqBC,MAArB,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASU,gBAAT,CAA0BC,UAA1B,EAAsCX,MAAtC,EAA8C;EAC5C,IAAI,CAACA,MAAL,EAAa;IACX,OAAOW,UAAP;EACD,CAFD,MAEO;IACL,OAAO;MACLC,aAAa,EAAEH,mBAAmB,CAACE,UAAU,CAACC,aAAZ,EAA2BZ,MAA3B,CAD7B;MAELD,UAAU,EAAED,oBAAoB,CAACa,UAAU,CAACZ,UAAZ,EAAwBC,MAAxB;IAF3B,CAAP;EAID;AACF;;AAEDa,MAAM,CAACC,OAAP,GAAiBJ,gBAAjB"},"metadata":{},"sourceType":"script"}