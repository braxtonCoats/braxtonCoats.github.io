{"ast":null,"code":"/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nconst transformConfig = require('./transform/config');\n\nconst buildFiles = require('./buildFiles');\n\nconst performActions = require('./performActions');\n\nconst createDictionary = require('./utils/createDictionary');\n/**\n * Takes a platform and performs all transforms to\n * the tokens object (non-mutative) then\n * builds all the files and performs any actions. This is useful if you only want to\n * build the artifacts of one platform to speed up the build process.\n *\n * This method is also used internally in [buildAllPlatforms](#buildAllPlatforms) to\n * build each platform defined in the config.\n *\n * @static\n * @memberof module:style-dictionary\n * @param {String} platform - Name of the platform you want to build.\n * @returns {module:style-dictionary}\n * @example\n * ```js\n * StyleDictionary.buildPlatform('web');\n * ```\n * ```bash\n * $ style-dictionary build --platform web\n * ```\n */\n\n\nfunction buildPlatform(platform) {\n  console.log('\\n' + platform);\n\n  if (!this.options || !(platform in (this.options.platforms || {}))) {\n    throw new Error(`Platform \"${platform}\" does not exist`);\n  }\n\n  let properties; // We don't want to mutate the original object\n\n  const platformConfig = transformConfig(this.options.platforms[platform], this, platform); // We need to transform the object before we resolve the\n  // variable names because if a value contains concatenated\n  // values like \"1px solid {color.border.base}\" we want to\n  // transform the original value (color.border.base) before\n  // replacing that value in the string.\n\n  properties = this.exportPlatform(platform); // This is the dictionary object we pass to the file\n  // building and action methods.\n\n  const dictionary = createDictionary({\n    properties\n  });\n  buildFiles(dictionary, platformConfig);\n  performActions(dictionary, platformConfig); // For chaining\n\n  return this;\n}\n\nmodule.exports = buildPlatform;","map":{"version":3,"names":["transformConfig","require","buildFiles","performActions","createDictionary","buildPlatform","platform","console","log","options","platforms","Error","properties","platformConfig","exportPlatform","dictionary","module","exports"],"sources":["/Users/braxtoncoats/Github/bcd/node_modules/style-dictionary/lib/buildPlatform.js"],"sourcesContent":["/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nconst transformConfig = require('./transform/config');\nconst buildFiles = require('./buildFiles');\nconst performActions = require('./performActions');\nconst createDictionary = require('./utils/createDictionary');\n\n/**\n * Takes a platform and performs all transforms to\n * the tokens object (non-mutative) then\n * builds all the files and performs any actions. This is useful if you only want to\n * build the artifacts of one platform to speed up the build process.\n *\n * This method is also used internally in [buildAllPlatforms](#buildAllPlatforms) to\n * build each platform defined in the config.\n *\n * @static\n * @memberof module:style-dictionary\n * @param {String} platform - Name of the platform you want to build.\n * @returns {module:style-dictionary}\n * @example\n * ```js\n * StyleDictionary.buildPlatform('web');\n * ```\n * ```bash\n * $ style-dictionary build --platform web\n * ```\n */\nfunction buildPlatform(platform) {\n  console.log('\\n' + platform);\n\n  if (!this.options || !(platform in (this.options.platforms || {}))) {\n    throw new Error(`Platform \"${platform}\" does not exist`);\n  }\n\n  let properties;\n  // We don't want to mutate the original object\n  const platformConfig = transformConfig(this.options.platforms[platform], this, platform);\n\n  // We need to transform the object before we resolve the\n  // variable names because if a value contains concatenated\n  // values like \"1px solid {color.border.base}\" we want to\n  // transform the original value (color.border.base) before\n  // replacing that value in the string.\n  properties = this.exportPlatform(platform);\n\n  // This is the dictionary object we pass to the file\n  // building and action methods.\n  const dictionary = createDictionary({properties});\n\n  buildFiles(dictionary, platformConfig);\n  performActions(dictionary, platformConfig);\n\n  // For chaining\n  return this;\n}\n\n\nmodule.exports = buildPlatform;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAAC,oBAAD,CAA/B;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,cAAD,CAA1B;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,kBAAD,CAA9B;;AACA,MAAMG,gBAAgB,GAAGH,OAAO,CAAC,0BAAD,CAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,aAAT,CAAuBC,QAAvB,EAAiC;EAC/BC,OAAO,CAACC,GAAR,CAAY,OAAOF,QAAnB;;EAEA,IAAI,CAAC,KAAKG,OAAN,IAAiB,EAAEH,QAAQ,KAAK,KAAKG,OAAL,CAAaC,SAAb,IAA0B,EAA/B,CAAV,CAArB,EAAoE;IAClE,MAAM,IAAIC,KAAJ,CAAW,aAAYL,QAAS,kBAAhC,CAAN;EACD;;EAED,IAAIM,UAAJ,CAP+B,CAQ/B;;EACA,MAAMC,cAAc,GAAGb,eAAe,CAAC,KAAKS,OAAL,CAAaC,SAAb,CAAuBJ,QAAvB,CAAD,EAAmC,IAAnC,EAAyCA,QAAzC,CAAtC,CAT+B,CAW/B;EACA;EACA;EACA;EACA;;EACAM,UAAU,GAAG,KAAKE,cAAL,CAAoBR,QAApB,CAAb,CAhB+B,CAkB/B;EACA;;EACA,MAAMS,UAAU,GAAGX,gBAAgB,CAAC;IAACQ;EAAD,CAAD,CAAnC;EAEAV,UAAU,CAACa,UAAD,EAAaF,cAAb,CAAV;EACAV,cAAc,CAACY,UAAD,EAAaF,cAAb,CAAd,CAvB+B,CAyB/B;;EACA,OAAO,IAAP;AACD;;AAGDG,MAAM,CAACC,OAAP,GAAiBZ,aAAjB"},"metadata":{},"sourceType":"script"}