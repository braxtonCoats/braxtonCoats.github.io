{"ast":null,"code":"/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar createDictionary = require('./utils/createDictionary'),\n    transformConfig = require('./transform/config'),\n    cleanFiles = require('./cleanFiles'),\n    cleanDirs = require('./cleanDirs'),\n    cleanActions = require('./cleanActions');\n/**\n * Takes a platform and performs all transforms to\n * the tokens object (non-mutative) then\n * cleans all the files and performs the undo method of any [actions](actions.md).\n *\n * @static\n * @memberof module:style-dictionary\n * @param {String} platform\n * @returns {module:style-dictionary}\n */\n\n\nfunction cleanPlatform(platform) {\n  console.log('\\n' + platform);\n\n  if (!this.options || !(platform in (this.options.platforms || {}))) {\n    throw new Error('Platform ' + platform + ' doesn\\'t exist');\n  }\n\n  var properties; // We don't want to mutate the original object\n\n  var platformConfig = transformConfig(this.options.platforms[platform], this, platform); // We need to transform the object before we resolve the\n  // variable names because if a value contains concatenated\n  // values like \"1px solid {color.border.base}\" we want to\n  // transform the original value (color.border.base) before\n  // replacing that value in the string.\n\n  properties = this.exportPlatform(platform); // This is the dictionary object we pass to the file\n  // cleaning and action methods.\n\n  const dictionary = createDictionary({\n    properties\n  }); // We clean files first, then actions, ...and then directories?\n\n  cleanFiles(dictionary, platformConfig);\n  cleanActions(dictionary, platformConfig);\n  cleanDirs(dictionary, platformConfig); // For chaining\n\n  return this;\n}\n\nmodule.exports = cleanPlatform;","map":{"version":3,"names":["createDictionary","require","transformConfig","cleanFiles","cleanDirs","cleanActions","cleanPlatform","platform","console","log","options","platforms","Error","properties","platformConfig","exportPlatform","dictionary","module","exports"],"sources":["/Users/braxtoncoats/Github/bcd/node_modules/style-dictionary/lib/cleanPlatform.js"],"sourcesContent":["/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nvar createDictionary = require('./utils/createDictionary'),\n    transformConfig = require('./transform/config'),\n    cleanFiles = require('./cleanFiles'),\n    cleanDirs = require('./cleanDirs'),\n    cleanActions = require('./cleanActions');\n\n/**\n * Takes a platform and performs all transforms to\n * the tokens object (non-mutative) then\n * cleans all the files and performs the undo method of any [actions](actions.md).\n *\n * @static\n * @memberof module:style-dictionary\n * @param {String} platform\n * @returns {module:style-dictionary}\n */\nfunction cleanPlatform(platform) {\n  console.log('\\n' + platform);\n\n  if (!this.options || !(platform in (this.options.platforms || {}))) {\n    throw new Error('Platform ' + platform + ' doesn\\'t exist');\n  }\n\n  var properties;\n  // We don't want to mutate the original object\n  var platformConfig = transformConfig(this.options.platforms[platform], this, platform);\n\n  // We need to transform the object before we resolve the\n  // variable names because if a value contains concatenated\n  // values like \"1px solid {color.border.base}\" we want to\n  // transform the original value (color.border.base) before\n  // replacing that value in the string.\n  properties = this.exportPlatform(platform);\n\n  // This is the dictionary object we pass to the file\n  // cleaning and action methods.\n  const dictionary = createDictionary({properties});\n\n  // We clean files first, then actions, ...and then directories?\n  cleanFiles(dictionary, platformConfig);\n  cleanActions(dictionary, platformConfig);\n  cleanDirs(dictionary, platformConfig);\n\n  // For chaining\n  return this;\n}\n\n\nmodule.exports = cleanPlatform;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,gBAAgB,GAAGC,OAAO,CAAC,0BAAD,CAA9B;AAAA,IACIC,eAAe,GAAGD,OAAO,CAAC,oBAAD,CAD7B;AAAA,IAEIE,UAAU,GAAGF,OAAO,CAAC,cAAD,CAFxB;AAAA,IAGIG,SAAS,GAAGH,OAAO,CAAC,aAAD,CAHvB;AAAA,IAIII,YAAY,GAAGJ,OAAO,CAAC,gBAAD,CAJ1B;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,aAAT,CAAuBC,QAAvB,EAAiC;EAC/BC,OAAO,CAACC,GAAR,CAAY,OAAOF,QAAnB;;EAEA,IAAI,CAAC,KAAKG,OAAN,IAAiB,EAAEH,QAAQ,KAAK,KAAKG,OAAL,CAAaC,SAAb,IAA0B,EAA/B,CAAV,CAArB,EAAoE;IAClE,MAAM,IAAIC,KAAJ,CAAU,cAAcL,QAAd,GAAyB,iBAAnC,CAAN;EACD;;EAED,IAAIM,UAAJ,CAP+B,CAQ/B;;EACA,IAAIC,cAAc,GAAGZ,eAAe,CAAC,KAAKQ,OAAL,CAAaC,SAAb,CAAuBJ,QAAvB,CAAD,EAAmC,IAAnC,EAAyCA,QAAzC,CAApC,CAT+B,CAW/B;EACA;EACA;EACA;EACA;;EACAM,UAAU,GAAG,KAAKE,cAAL,CAAoBR,QAApB,CAAb,CAhB+B,CAkB/B;EACA;;EACA,MAAMS,UAAU,GAAGhB,gBAAgB,CAAC;IAACa;EAAD,CAAD,CAAnC,CApB+B,CAsB/B;;EACAV,UAAU,CAACa,UAAD,EAAaF,cAAb,CAAV;EACAT,YAAY,CAACW,UAAD,EAAaF,cAAb,CAAZ;EACAV,SAAS,CAACY,UAAD,EAAaF,cAAb,CAAT,CAzB+B,CA2B/B;;EACA,OAAO,IAAP;AACD;;AAGDG,MAAM,CAACC,OAAP,GAAiBZ,aAAjB"},"metadata":{},"sourceType":"script"}