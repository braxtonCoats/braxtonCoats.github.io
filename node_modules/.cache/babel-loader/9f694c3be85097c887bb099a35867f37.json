{"ast":null,"code":"import _slicedToArray from \"/Users/braxtoncoats/Github/bcd/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _defineProperty from \"/Users/braxtoncoats/Github/bcd/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { jsx, Fragment as Fragment$1 } from 'react/jsx-runtime';\nimport React, { createContext, Fragment, useContext, useMemo } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar SourceDetector = {\n  isFrame: function isFrame(source) {\n    if (!source) {\n      return false;\n    }\n\n    var value = source[Object.keys(source)[0]];\n    return value !== null && typeof value === \"object\" && \"frameName\" in value;\n  },\n  isFlat: function isFlat(source) {\n    if (!source) {\n      return false;\n    }\n\n    var value = source[Object.keys(source)[0]];\n    return typeof value === \"string\";\n  },\n  isStructured: function isStructured(source) {\n    if (!source) {\n      return false;\n    }\n\n    var value = source[Object.keys(source)[0]];\n    return value !== null && typeof value === \"object\" && !this.isFrame(source);\n  }\n};\nvar DittoContext = createContext({});\n\nvar filterBlock = function filterBlock(blockObj, variables, count, filters) {\n  return Object.keys(blockObj).filter(function (textId) {\n    if (!(filters != null && filters.tags)) return true;\n    return filters.tags.every(function (tag) {\n      return blockObj[textId].tags && blockObj[textId].tags.includes(tag);\n    });\n  }).reduce(function (obj, id) {\n    var interpolatedText = interpolateVariableText(blockObj[id], variables, count).text;\n    return _extends({}, obj, _defineProperty({}, id, interpolatedText));\n  }, {});\n};\n\nvar filterFrame = function filterFrame(_frameObj, variables, count, filters) {\n  var frameObj = JSON.parse(JSON.stringify(_frameObj));\n\n  if (frameObj.blocks) {\n    for (var blockId in frameObj.blocks) {\n      frameObj.blocks[blockId] = filterBlock(frameObj.blocks[blockId], variables, count, filters);\n    }\n  }\n\n  return _extends({}, frameObj, {\n    otherText: filterBlock(frameObj.otherText, variables, count, filters)\n  });\n};\n\nvar error = function error(message) {\n  var returnValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : message;\n  console.error(message);\n  return returnValue;\n};\n\nvar nullError = function nullError(message) {\n  return error(message, null);\n};\n\nvar fragmentError = function fragmentError(message) {\n  return error(message, jsx(Fragment, {}, void 0));\n};\n\nvar isProject = function isProject(props, projectIdFromContext) {\n  return (\"projectId\" in props || !!projectIdFromContext) && (\"textId\" in props || \"frameId\" in props || \"blockId\" in props);\n};\n\nvar isComponentLibrary = function isComponentLibrary(props) {\n  return \"componentId\" in props;\n};\n\nvar isText = function isText(props) {\n  return \"textId\" in props;\n};\n\nvar isFrameOrBlockComponent = function isFrameOrBlockComponent(props) {\n  return \"frameId\" in props;\n};\n\nvar useProjectId = function useProjectId(props) {\n  var dittoContext = useContext(DittoContext);\n  var projectId = dittoContext.projectId || props.projectId;\n\n  if (!projectId) {\n    return fragmentError(\"No Project ID was provided to the <DittoProvider /> or <Ditto /> components.\");\n  }\n\n  return projectId;\n};\n/**\r\n *\r\n * @param data\r\n * text data\r\n * @param count\r\n * the variable number used to determine which plural case to use\r\n * zero = 0\r\n * one = 1\r\n * two = 2\r\n * few = 3,4,5\r\n * many = 6,7,...,99\r\n * other = 100, 101, ...\r\n * if count is provided but not matching plural key, fallback to base plural value\r\n * in future we should also user's to define their own middleware for picking plurals\r\n * based off i8next: https://www.i18next.com/translation-function/plurals\r\n */\n\n\nvar getPluralText = function getPluralText(data, count) {\n  var _Object$keys;\n\n  if (count === undefined || ((_Object$keys = Object.keys((data == null ? void 0 : data.plurals) || {})) == null ? void 0 : _Object$keys.length) === 0) {\n    return data.text;\n  } else if (count === 0 && data.plurals.zero) {\n    return data.plurals.zero;\n  } else if (count === 1 && data.plurals.one) {\n    return data.plurals.one;\n  } else if (count === 2 && data.plurals.two) {\n    return data.plurals.two;\n  } else if (count >= 3 && count <= 5 && data.plurals.few) {\n    return data.plurals.few;\n  } else if (count >= 6 && count <= 99 && data.plurals.many) {\n    return data.plurals.many;\n  } else {\n    // default to 'other', fallback to base text\n    if (data.plurals.other) return data.plurals.other;\n    return data.text;\n  }\n};\n\nvar interpolateVariableText = function interpolateVariableText(data, variables, count) {\n  var variablesWithFallbacks = Object.keys((data == null ? void 0 : data.variables) || {}).reduce(function (acc, curr) {\n    if (variables[curr]) {\n      acc[curr] = variables[curr];\n    } else {\n      var _data$variables$curr = data.variables[curr],\n          fallback = _data$variables$curr.fallback,\n          text = _data$variables$curr.text;\n      acc[curr] = fallback || text;\n    }\n\n    return acc;\n  }, {});\n  var pluralText = getPluralText(data, count);\n  return _extends({}, data, {\n    text: generateVariableText(pluralText, variablesWithFallbacks)\n  });\n};\n\nvar HANDLEBAR_REGEX = /\\{\\{([a-z0-9_]+)\\}\\}/gi;\n/**\r\n * Execute a callback for each valid variable found in\r\n * `text`. The callback is passed an object that includes:\r\n * - `name`: the name of the variable\r\n * - `start`: the index of opening curly brace of the variable in `text`\r\n * - `end`: the index of the closing curly brace of the variable in `text`\r\n */\n\nvar forEachVariable = function forEachVariable(text, callback) {\n  var matches = null;\n\n  while ((matches = HANDLEBAR_REGEX.exec(text)) !== null) {\n    var _matches = matches,\n        _matches2 = _slicedToArray(_matches, 1),\n        match = _matches2[0];\n\n    if (!match) {\n      break;\n    }\n\n    var variableName = match.replace(/(\\{\\{|\\}\\})/g, \"\");\n    callback({\n      name: variableName,\n      start: matches.index,\n      end: matches.index + match.length - 1\n    });\n  }\n};\n\nvar getVariable = function getVariable(variableName, variables) {\n  var variable = variables[variableName];\n\n  if (!variable) {\n    return null;\n  }\n\n  return variable;\n};\n\nvar getVariablePlaceholder = function getVariablePlaceholder(variable) {\n  if (!(variable && variable.data)) {\n    return null;\n  }\n\n  if (variable.data.fallback) {\n    return String(variable.data.fallback);\n  }\n\n  if (variable.data.text) {\n    return String(variable.data.text);\n  }\n\n  return null;\n};\n\nvar generateVariableText = function generateVariableText(text, variables) {\n  var lastIndex = 0;\n  var updatedText = \"\";\n  forEachVariable(text, function (_ref) {\n    var name = _ref.name,\n        start = _ref.start,\n        end = _ref.end;\n    var variableValue = getVariable(name, variables) || getVariablePlaceholder(name);\n\n    if (variableValue) {\n      updatedText += text.substring(lastIndex, start) + variableValue;\n    } else {\n      updatedText += text.substr(lastIndex, end + 1);\n    }\n\n    lastIndex = end + 1;\n  });\n  var remainder = text.substr(lastIndex);\n\n  if (remainder) {\n    updatedText += remainder;\n  }\n\n  return updatedText;\n};\n\nvar useDittoSingleText = function useDittoSingleText(props) {\n  var _source$projectId2;\n\n  var projectId = props.projectId,\n      textId = props.textId,\n      variables = props.variables,\n      count = props.count;\n\n  var _useContext = useContext(DittoContext),\n      source = _useContext.source,\n      variant = _useContext.variant;\n\n  if (!projectId) return nullError(\"No Project ID provided.\");\n\n  if (variant) {\n    var _source$projectId;\n\n    var _data = source == null ? void 0 : (_source$projectId = source[projectId]) == null ? void 0 : _source$projectId[variant];\n\n    if (_data) {\n      if (SourceDetector.isStructured(_data)) {\n        return interpolateVariableText(_data[textId], variables, count).text;\n      }\n\n      if (SourceDetector.isFlat(_data)) {\n        return _data[textId];\n      }\n\n      if (SourceDetector.isFrame(_data)) {\n        for (var frameId in _data) {\n          var frame = _data[frameId];\n\n          for (var blockId in frame.blocks) {\n            var block = frame.blocks[blockId];\n            if (textId in block) return interpolateVariableText(block[textId], variables, count).text;\n          }\n\n          if (frame.otherText && textId in frame.otherText) return interpolateVariableText(frame.otherText[textId], variables, count).text;\n        }\n      }\n    }\n  }\n\n  var data = source == null ? void 0 : (_source$projectId2 = source[projectId]) == null ? void 0 : _source$projectId2.base;\n\n  if (!data) {\n    return nullError(\"Project not found with id \\\"\".concat(projectId, \"\\\"\"));\n  }\n\n  if (SourceDetector.isStructured(data)) {\n    return interpolateVariableText(data[textId], variables, count).text;\n  }\n\n  if (SourceDetector.isFlat(data)) {\n    return data[textId];\n  }\n\n  if (SourceDetector.isFrame(data)) {\n    for (var _frameId in data) {\n      var _frame2 = data[_frameId];\n\n      for (var _blockId in _frame2.blocks) {\n        var _block2 = _frame2.blocks[_blockId];\n        if (textId in _block2) return interpolateVariableText(_block2[textId], variables, count).text;\n      }\n\n      if (_frame2.otherText && textId in _frame2.otherText) return interpolateVariableText(_frame2.otherText[textId], variables, count).text;\n    }\n  }\n\n  return \"Text not found for id \\\"\".concat(textId, \"\\\"\");\n};\n\nvar DittoText = function DittoText(props) {\n  var textId = props.textId,\n      children = props.children,\n      variables = props.variables,\n      count = props.count;\n  var projectId = useProjectId(props);\n  var text = useDittoSingleText({\n    projectId: projectId,\n    textId: textId,\n    variables: variables || {},\n    count: count\n  });\n  return jsx(React.Fragment, {\n    children: typeof children === \"function\" ? children(text) : text\n  }, void 0);\n};\n\nvar useDitto = function useDitto(props) {\n  var _source$projectId2;\n\n  var projectId = props.projectId,\n      frameId = props.frameId,\n      blockId = props.blockId,\n      filters = props.filters,\n      variables = props.variables,\n      count = props.count;\n\n  var _useContext2 = useContext(DittoContext),\n      source = _useContext2.source,\n      variant = _useContext2.variant;\n\n  if (!projectId) return nullError(\"No Project ID provided.\");\n\n  if (variant) {\n    var _source$projectId;\n\n    var _data = source == null ? void 0 : (_source$projectId = source[projectId]) == null ? void 0 : _source$projectId[variant];\n\n    if (SourceDetector.isFrame(_data) && frameId) {\n      var _frame = _data[frameId];\n\n      if (_frame) {\n        if (!blockId) {\n          return filterFrame(_frame, variables || {}, count, filters);\n        }\n\n        if (blockId in _frame.blocks) {\n          var _block = _frame.blocks[blockId];\n\n          if (_block) {\n            return filterBlock(_block, variables || {}, count, filters);\n          }\n        }\n      }\n    }\n  }\n\n  var data = (_source$projectId2 = source[projectId]) == null ? void 0 : _source$projectId2.base;\n\n  if (!data) {\n    return nullError(\"Project not found with id \\\"\".concat(projectId, \"\\\"\"));\n  }\n\n  if (!SourceDetector.isFrame(data)) {\n    return nullError(\"Default format must be used if passing \\\"frameId\\\" or \\\"blockId\\\"\");\n  }\n\n  if (!frameId) {\n    return nullError(\"No Frame ID provided.\");\n  }\n\n  var frame = data[frameId];\n  if (!frame) return nullError(\"Frame \\\"\".concat(frameId, \"\\\" not found this project \\\"\").concat(projectId, \"\\\"\"));\n  if (!blockId) return filterFrame(frame, variables || {}, count, filters);\n  var block = frame.blocks[blockId];\n  if (!block) return nullError(\"Block \\\"\".concat(blockId, \"\\\" not found in frame \\\"\").concat(frameId, \"\\\" in project \\\"\").concat(projectId, \"\\\"\"));\n  return filterBlock(block, variables || {}, count, filters);\n};\n\nvar _excluded = [\"children\"];\n\nvar DittoFrameOrBlock = function DittoFrameOrBlock(props) {\n  var children = props.children,\n      otherProps = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var data = useDitto(otherProps);\n\n  if (typeof children !== \"function\") {\n    return fragmentError(\"Please provide either a textId or function child to your Ditto component.\");\n  }\n\n  if (!data || typeof data !== \"object\") {\n    return jsx(Fragment$1, {\n      children: data\n    }, void 0);\n  }\n\n  return jsx(Fragment$1, {\n    children: children(data)\n  }, void 0);\n};\n\nvar DittoFrame = function DittoFrame(props) {\n  var projectId = useProjectId(props);\n  return jsx(DittoFrameOrBlock, Object.assign({}, props, {\n    projectId: projectId\n  }), void 0);\n};\n\nvar DittoBlock = function DittoBlock(props) {\n  var projectId = useProjectId(props);\n  return jsx(DittoFrameOrBlock, Object.assign({}, props, {\n    projectId: projectId\n  }), void 0);\n};\n\nvar useDittoComponent = function useDittoComponent(props) {\n  var _source$ditto_compone2;\n\n  var componentId = props.componentId,\n      alwaysReturnString = props.alwaysReturnString,\n      variables = props.variables,\n      count = props.count;\n\n  var _useContext3 = useContext(DittoContext),\n      source = _useContext3.source,\n      variant = _useContext3.variant;\n\n  if (!(\"ditto_component_library\" in source)) {\n    throw new Error(\"An export file for the Component Library couldn't be found.\");\n  }\n\n  if (variant) {\n    var _source$ditto_compone;\n\n    var _data = source == null ? void 0 : (_source$ditto_compone = source.ditto_component_library) == null ? void 0 : _source$ditto_compone[variant];\n\n    if (_data && _data[componentId]) {\n      if (SourceDetector.isStructured(_data)) {\n        var value = interpolateVariableText(_data[componentId], variables, count);\n        return alwaysReturnString ? value.text : value;\n      } else if (SourceDetector.isFlat(_data)) {\n        return _data[componentId];\n      }\n    }\n  }\n\n  var data = source == null ? void 0 : (_source$ditto_compone2 = source.ditto_component_library) == null ? void 0 : _source$ditto_compone2.base;\n\n  if (!data) {\n    return nullError(\"Base text not found in component library\");\n  }\n\n  if (data && !data[componentId]) {\n    return nullError(\"Text not found for component \\\"\".concat(componentId, \"\\\"\"));\n  }\n\n  if (SourceDetector.isStructured(data)) {\n    var _value = interpolateVariableText(data[componentId], variables, count);\n\n    return alwaysReturnString ? _value.text : _value;\n  } else if (SourceDetector.isFlat(data)) {\n    return data[componentId];\n  } else {\n    return nullError(\"Invalid format for component \".concat(componentId));\n  }\n};\n\nvar DittoComponent = function DittoComponent(props) {\n  var children = props.children,\n      componentId = props.componentId,\n      variables = props.variables,\n      count = props.count;\n  var value = useDittoComponent({\n    componentId: componentId,\n    alwaysReturnString: typeof children !== \"function\",\n    variables: variables || {},\n    count: count\n  });\n  var text = useMemo(function () {\n    return value !== null && typeof value === \"object\" ? value.text : value;\n  }, [value]);\n  return jsx(React.Fragment, {\n    children: typeof children === \"function\" ? children(text) : text\n  }, void 0);\n};\n\nfunction Ditto(props) {\n  var dittoContext = useContext(DittoContext);\n\n  if (isComponentLibrary(props)) {\n    return jsx(DittoComponent, Object.assign({}, props), void 0);\n  }\n\n  if (isProject(props, dittoContext.projectId)) {\n    var projectId = props.projectId || dittoContext.projectId;\n\n    if (!projectId) {\n      return fragmentError(\"No Project ID was provided to the <DittoProvider /> or <Ditto /> components.\");\n    }\n\n    var propsWithProject = _extends({}, props, {\n      projectId: projectId\n    });\n\n    if (isText(propsWithProject)) {\n      return jsx(DittoText, Object.assign({}, propsWithProject), void 0);\n    }\n\n    if (isFrameOrBlockComponent(propsWithProject)) {\n      return jsx(DittoFrameOrBlock, Object.assign({}, propsWithProject), void 0);\n    }\n  }\n\n  return fragmentError('Invalid props provided to Ditto component; please provide \"componentId\", \"textId\" or \"frameId\"');\n}\n\nvar DittoProvider = function DittoProvider(props) {\n  var children = props.children,\n      source = props.source,\n      variant = props.variant,\n      projectId = props.projectId;\n  return jsx(DittoContext.Provider, Object.assign({\n    value: _extends({\n      source: source,\n      variant: variant\n    }, projectId ? {\n      projectId: projectId\n    } : {})\n  }, {\n    children: children\n  }), void 0);\n};\n\nexport default DittoProvider;\nexport { Ditto, DittoBlock, DittoComponent, DittoFrame, DittoProvider, DittoText };","map":{"version":3,"mappings":"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","names":["SourceDetector","isFrame","source","value","Object","keys","isFlat","isStructured","DittoContext","createContext","filterBlock","blockObj","variables","count","filters","filter","textId","tags","every","tag","includes","reduce","obj","id","interpolatedText","interpolateVariableText","text","filterFrame","_frameObj","frameObj","JSON","parse","stringify","blocks","blockId","otherText","error","message","returnValue","console","nullError","fragmentError","_jsx","Fragment","isProject","props","projectIdFromContext","isComponentLibrary","isText","isFrameOrBlockComponent","useProjectId","dittoContext","useContext","projectId","getPluralText","data","undefined","plurals","length","zero","one","two","few","many","other","variablesWithFallbacks","acc","curr","fallback","pluralText","generateVariableText","HANDLEBAR_REGEX","forEachVariable","callback","matches","exec","match","variableName","replace","name","start","index","end","getVariable","variable","getVariablePlaceholder","String","lastIndex","updatedText","variableValue","substring","substr","remainder","useDittoSingleText","variant","_source$projectId","frameId","frame","block","_source$projectId2","base","DittoText","children","React","useDitto","DittoFrameOrBlock","otherProps","_objectWithoutPropertiesLoose","DittoFrame","DittoBlock","useDittoComponent","componentId","alwaysReturnString","Error","ditto_component_library","_source$ditto_compone","_source$ditto_compone2","DittoComponent","useMemo","Ditto","propsWithProject","DittoProvider","Provider"],"sources":["/Users/braxtoncoats/Github/bcd/node_modules/ditto-react/src/lib/context.ts","/Users/braxtoncoats/Github/bcd/node_modules/ditto-react/src/lib/utils.tsx","/Users/braxtoncoats/Github/bcd/node_modules/ditto-react/src/hooks/useDittoSingleText.ts","/Users/braxtoncoats/Github/bcd/node_modules/ditto-react/src/components/DittoText.tsx","/Users/braxtoncoats/Github/bcd/node_modules/ditto-react/src/hooks/useDitto.ts","/Users/braxtoncoats/Github/bcd/node_modules/ditto-react/src/components/DittoFrameOrBlock.tsx","/Users/braxtoncoats/Github/bcd/node_modules/ditto-react/src/hooks/useDittoComponent.ts","/Users/braxtoncoats/Github/bcd/node_modules/ditto-react/src/components/DittoComponent.tsx","/Users/braxtoncoats/Github/bcd/node_modules/ditto-react/src/components/Ditto.tsx","/Users/braxtoncoats/Github/bcd/node_modules/ditto-react/src/components/DittoProvider.tsx"],"sourcesContent":["import { createContext } from \"react\";\nimport { Plurals } from \"../components/Ditto\";\n\nexport type Count = number | undefined;\n\nexport interface VariableData {\n  text?: string;\n  url?: string;\n  example?: string;\n  fallback?: string;\n}\n\ntype VariableType = string | number;\nexport interface VariablesInput {\n  [variableId: string]: VariableType;\n}\n\nexport interface TextData {\n  plurals: Plurals;\n  text: string;\n  variables: {\n    [variableName: string]: VariableData;\n  };\n}\n\nexport interface Block {\n  text: string;\n}\nexport interface Frame {\n  frameName: string;\n  blocks: Block[];\n  otherText?: Block[];\n}\n\nexport interface FormatDefaultProject {\n  [frameId: string]: Frame;\n}\n\ninterface FormatStructured {\n  [id: string]: {\n    text: string;\n    plurals: Plurals;\n    variables: {\n      [variableName: string]: VariableData;\n    };\n  };\n}\n\ninterface FormatDefaultComponentLibrary {\n  [componentApiId: string]: {\n    name: string;\n    text: string;\n  };\n}\n\ninterface FormatStructuredProject {\n  [apiId: string]: {\n    text: string;\n    tags?: string[];\n    notes?: string;\n  };\n}\n\ninterface FormatStructuredCL {\n  [apiId: string]: {\n    name: string;\n    text: string;\n  };\n}\n\ninterface FormatFlat {\n  [apiId: string]: string;\n}\n\nexport type ProjectFormat =\n  | FormatDefaultProject\n  | FormatFlat\n  | FormatStructuredProject;\n\nexport type ComponentLibraryFormat =\n  | FormatDefaultComponentLibrary\n  | FormatFlat\n  | FormatStructuredCL;\n\nexport type Project = ProjectFormat | ComponentLibraryFormat;\n\nexport interface Source {\n  projects: {\n    [projectId: string]: Project;\n  };\n  exported_at: string;\n}\n\nexport interface SourceVariants {\n  [variantApiId: string]: Source;\n}\n\ntype SourceType =\n  | FormatDefaultProject\n  // This type matches for:\n  // - `default` and `structured` formats for the component library\n  // - `structured` format for projects\n  | FormatStructured\n  // This type matches for both projects and the component library\n  | FormatFlat\n  | { [key: string]: any };\n\nexport type DittoSource = {\n  [projectId: string]: {\n    [variantApiId: string]: SourceType;\n  };\n};\n\nexport const SourceDetector = {\n  isFrame: function (source: SourceType): source is FormatDefaultProject {\n    if (!source) {\n      return false;\n    }\n\n    const value = source[Object.keys(source)[0]];\n    return value !== null && typeof value === \"object\" && \"frameName\" in value;\n  },\n  isFlat: function (source: SourceType): source is FormatFlat {\n    if (!source) {\n      return false;\n    }\n\n    const value = source[Object.keys(source)[0]];\n    return typeof value === \"string\";\n  },\n  isStructured: function (source: SourceType): source is FormatStructured {\n    if (!source) {\n      return false;\n    }\n\n    const value = source[Object.keys(source)[0]];\n    return value !== null && typeof value === \"object\" && !this.isFrame(source);\n  },\n};\n\ninterface DittoContext {\n  projectId?: string;\n  variant?: string;\n  source: DittoSource;\n}\n\nexport const DittoContext = createContext({} as DittoContext);\n","import { Fragment, useContext } from \"react\";\nimport {\n  DittoComponentLibraryProps,\n  DittoProjectProps,\n  DittoProps,\n  DittoFrameOrBlockProps,\n  DittoTextProps,\n} from \"../components/Ditto\";\nimport { DittoContext, Frame, Block, VariablesInput, Count, TextData } from \"./context\";\n\nexport const filterBlock = (blockObj: Block, variables: VariablesInput, count: Count, filters) => {\n\n  return Object.keys(blockObj)\n    .filter((textId) => {\n      if (!filters?.tags) return true;\n\n      return filters.tags.every(\n        (tag) => blockObj[textId].tags && blockObj[textId].tags.includes(tag)\n      );\n    })\n    .reduce((obj, id) => {\n      const interpolatedText = interpolateVariableText(blockObj[id], variables, count).text\n      return { ...obj, [id]: interpolatedText }\n    }, {} as Block);\n};\n\nexport const filterFrame = (_frameObj: Frame, variables: VariablesInput, count: Count, filters) => {\n  const frameObj = JSON.parse(JSON.stringify(_frameObj));\n\n  if (frameObj.blocks) {\n    for (var blockId in frameObj.blocks) {\n      frameObj.blocks[blockId] = filterBlock(frameObj.blocks[blockId], variables, count, filters);\n    }\n  }\n\n  return { ...frameObj, otherText: filterBlock(frameObj.otherText, variables, count, filters) };\n};\n\nexport const error = (message: string, returnValue: any = message) => {\n  console.error(message);\n  return returnValue;\n};\n\nexport const nullError = (message: string) => error(message, null);\nexport const fragmentError = (message: string) => error(message, <Fragment />);\n\nexport const isProject = (\n  props: DittoProps,\n  projectIdFromContext?: string\n): props is DittoProjectProps =>\n  (\"projectId\" in props || !!projectIdFromContext) &&\n  (\"textId\" in props || \"frameId\" in props || \"blockId\" in props);\n\nexport const isComponentLibrary = (\n  props: DittoProps\n): props is DittoComponentLibraryProps => \"componentId\" in props;\n\nexport const isText = (props: DittoProps): props is DittoTextProps =>\n  \"textId\" in props;\n\nexport const isFrameOrBlockComponent = (\n  props: DittoProps\n): props is DittoFrameOrBlockProps => \"frameId\" in props;\n\nexport const useProjectId = (props: { projectId?: string }) => {\n  const dittoContext = useContext(DittoContext);\n  const projectId = dittoContext.projectId || props.projectId;\n  if (!projectId) {\n    return fragmentError(\n      \"No Project ID was provided to the <DittoProvider /> or <Ditto /> components.\"\n    );\n  }\n\n  return projectId;\n};\n\n/**\n * \n * @param data\n * text data\n * @param count \n * the variable number used to determine which plural case to use\n * zero = 0\n * one = 1\n * two = 2\n * few = 3,4,5\n * many = 6,7,...,99\n * other = 100, 101, ...\n * if count is provided but not matching plural key, fallback to base plural value\n * in future we should also user's to define their own middleware for picking plurals\n * based off i8next: https://www.i18next.com/translation-function/plurals\n */\nconst getPluralText = (data: TextData, count: Count) => {\n  if (count === undefined|| Object.keys(data?.plurals || {})?.length === 0) {\n    return data.text\n  }\n  else if (count === 0 && data.plurals.zero) {\n    return data.plurals.zero\n  } else if (count === 1 && data.plurals.one) {\n    return data.plurals.one\n  } else if (count === 2 && data.plurals.two) {\n    return data.plurals.two\n  } else if (count >= 3 && count <= 5 && data.plurals.few) {\n    return data.plurals.few\n  } else if (count >= 6 && count <= 99 && data.plurals.many) {\n    return data.plurals.many\n  } else {\n    // default to 'other', fallback to base text\n    if (data.plurals.other) return data.plurals.other\n    return data.text\n  }\n}\n\nexport const interpolateVariableText = (data: TextData, variables: VariablesInput, count: Count) => {\n  const variablesWithFallbacks = Object.keys(data?.variables || {}).reduce((acc, curr) => {\n    if (variables[curr]) {\n      acc[curr] = variables[curr]\n    } else {\n      const { fallback, text } = data.variables[curr]\n      acc[curr] = fallback || text\n    }\n    return acc;\n  }, {})\n  const pluralText = getPluralText(data, count)\n  return {\n    ...data,\n    text: generateVariableText(pluralText, variablesWithFallbacks)\n  }\n}\n\nconst HANDLEBAR_REGEX = /\\{\\{([a-z0-9_]+)\\}\\}/gi;\n\n/**\n * Execute a callback for each valid variable found in\n * `text`. The callback is passed an object that includes:\n * - `name`: the name of the variable\n * - `start`: the index of opening curly brace of the variable in `text`\n * - `end`: the index of the closing curly brace of the variable in `text`\n */\nconst forEachVariable = (text, callback) => {\n  let matches: RegExpExecArray | null = null;\n\n  while ((matches = HANDLEBAR_REGEX.exec(text)) !== null) {\n    const [match] = matches;\n    if (!match) {\n      break;\n    }\n\n    const variableName = match.replace(/(\\{\\{|\\}\\})/g, \"\");\n\n    callback({\n      name: variableName,\n      start: matches.index,\n      end: matches.index + match.length - 1,\n    });\n  }\n};\n\nconst getVariable = (variableName, variables) => {\n  const variable = variables[variableName]\n  if (!variable) {\n    return null;\n  }\n\n  return variable;\n};\n\nconst getVariablePlaceholder = (variable) => {\n  if (!(variable && variable.data)) {\n    return null;\n  }\n\n  if (variable.data.fallback) {\n    return String(variable.data.fallback);\n  }\n\n  if (variable.data.text) {\n    return String(variable.data.text);\n  }\n\n  return null;\n};\n\nconst generateVariableText = (text, variables) => {\n  let lastIndex = 0;\n  let updatedText = \"\";\n  forEachVariable(text, ({ name, start, end }) => {\n    const variableValue = getVariable(name, variables) || getVariablePlaceholder(name);\n    if (variableValue) {\n      updatedText += text.substring(lastIndex, start) + variableValue;\n    } else {\n      updatedText += text.substr(lastIndex, end + 1);\n    }\n    lastIndex = end + 1;\n  });\n\n  const remainder = text.substr(lastIndex);\n  if (remainder) {\n    updatedText += remainder;\n  }\n  return updatedText;\n};","import { useContext } from \"react\";\nimport {\n  DittoContext,\n  SourceDetector,\n  VariablesInput,\n  Count,\n} from \"../lib/context\";\nimport { nullError, interpolateVariableText } from \"../lib/utils\";\n\ninterface useDittoSingleTextProps {\n  projectId?: string;\n  textId: string;\n  variables: VariablesInput;\n  count?: Count;\n}\n\nexport const useDittoSingleText = (props: useDittoSingleTextProps) => {\n  const { projectId, textId, variables, count } = props;\n  const { source, variant } = useContext(DittoContext);\n\n  if (!projectId) return nullError(\"No Project ID provided.\");\n\n  if (variant) {\n    const data = source?.[projectId]?.[variant];\n    if (data) {\n      if (SourceDetector.isStructured(data)) {\n        return interpolateVariableText(data[textId], variables, count).text;\n      }\n\n      if (SourceDetector.isFlat(data)) {\n        return data[textId];\n      }\n\n      if (SourceDetector.isFrame(data)) {\n        for (const frameId in data) {\n          const frame = data[frameId];\n\n          for (const blockId in frame.blocks) {\n            const block = frame.blocks[blockId];\n\n            if (textId in block)\n              return interpolateVariableText(block[textId], variables, count)\n                .text;\n          }\n\n          if (frame.otherText && textId in frame.otherText)\n            return interpolateVariableText(\n              frame.otherText[textId],\n              variables,\n              count\n            ).text;\n        }\n      }\n    }\n  }\n\n  const data = source?.[projectId]?.base;\n  if (!data) {\n    return nullError(`Project not found with id \"${projectId}\"`);\n  }\n\n  if (SourceDetector.isStructured(data)) {\n    return interpolateVariableText(data[textId], variables, count).text;\n  }\n\n  if (SourceDetector.isFlat(data)) {\n    return data[textId];\n  }\n\n  if (SourceDetector.isFrame(data)) {\n    for (const frameId in data) {\n      const frame = data[frameId];\n\n      for (const blockId in frame.blocks) {\n        const block = frame.blocks[blockId];\n\n        if (textId in block)\n          return interpolateVariableText(block[textId], variables, count).text;\n      }\n\n      if (frame.otherText && textId in frame.otherText)\n        return interpolateVariableText(\n          frame.otherText[textId],\n          variables,\n          count\n        ).text;\n    }\n  }\n\n  return `Text not found for id \"${textId}\"`;\n};\n","import React from \"react\";\nimport { useDittoSingleText } from \"../hooks/useDittoSingleText\";\nimport { useProjectId } from \"../lib/utils\";\nimport { DittoTextProps } from \"./Ditto\";\n\nexport const DittoText = (props: DittoTextProps) => {\n  const { textId, children, variables, count } = props;\n  const projectId = useProjectId(props);\n  const text = useDittoSingleText({ projectId, textId, variables: variables || {}, count });\n\n  return (\n    <React.Fragment>\n      {typeof children === \"function\" ? children(text) : text}\n    </React.Fragment>\n  );\n};\n","import { useContext } from \"react\";\nimport { DittoContext, SourceDetector, VariablesInput } from \"../lib/context\";\nimport { filterFrame, filterBlock, nullError } from \"../lib/utils\";\n\ninterface useDittoProps {\n  projectId?: string;\n  frameId: string;\n  blockId?: string;\n  variables?: VariablesInput;\n  count?: number;\n  filters?: {\n    tags: string[];\n  };\n}\n\nexport const useDitto = (props: useDittoProps) => {\n  const { projectId, frameId, blockId, filters, variables, count } = props;\n  const { source, variant } = useContext(DittoContext);\n\n  if (!projectId) return nullError(\"No Project ID provided.\");\n\n  if (variant) {\n    const data = source?.[projectId]?.[variant];\n    if (SourceDetector.isFrame(data) && frameId) {\n      const frame = data[frameId];\n      if (frame) {\n        if (!blockId) {\n          return filterFrame(frame, variables || {}, count, filters);\n        }\n        if (blockId in frame.blocks) {\n          const block = frame.blocks[blockId];\n          if (block) {\n            return filterBlock(block, variables || {}, count, filters);\n          }\n        }\n      }\n    }\n  }\n\n  const data = source[projectId]?.base;\n  if (!data) {\n    return nullError(`Project not found with id \"${projectId}\"`);\n  }\n\n  if (!SourceDetector.isFrame(data)) {\n    return nullError(\n      `Default format must be used if passing \"frameId\" or \"blockId\"`\n    );\n  }\n\n  if (!frameId) {\n    return nullError(\"No Frame ID provided.\");\n  }\n\n  const frame = data[frameId];\n  if (!frame)\n    return nullError(\n      `Frame \"${frameId}\" not found this project \"${projectId}\"`\n    );\n\n  if (!blockId) return filterFrame(frame, variables || {}, count, filters);\n\n  const block = frame.blocks[blockId];\n  if (!block)\n    return nullError(\n      `Block \"${blockId}\" not found in frame \"${frameId}\" in project \"${projectId}\"`\n    );\n\n  return filterBlock(block, variables || {}, count, filters);\n};\n","import React from \"react\";\nimport { useDitto } from \"../hooks/useDitto\";\nimport { fragmentError, useProjectId } from \"../lib/utils\";\nimport {\n  DittoBlockProps,\n  DittoFilters,\n  DittoFrameOrBlockProps,\n  DittoFrameProps,\n} from \"./Ditto\";\n\ntype Props = DittoFrameOrBlockProps;\n\nexport const DittoFrameOrBlock = (props: Props) => {\n  const { children, ...otherProps } = props;\n  const data = useDitto(otherProps);\n\n  if (typeof children !== \"function\") {\n    return fragmentError(\n      `Please provide either a textId or function child to your Ditto component.`\n    );\n  }\n\n  if (!data || typeof data !== \"object\") {\n    return <>{data}</>;\n  }\n\n  return <>{children(data)}</>;\n};\n\nexport const DittoFrame = (props: DittoFrameProps & DittoFilters) => {\n  const projectId = useProjectId(props);\n  return <DittoFrameOrBlock {...props} projectId={projectId} />;\n};\n\nexport const DittoBlock = (props: DittoBlockProps & DittoFilters) => {\n  const projectId = useProjectId(props);\n  return <DittoFrameOrBlock {...props} projectId={projectId} />;\n};\n","import { useContext } from \"react\";\nimport { DittoContext, SourceDetector, VariablesInput } from \"../lib/context\";\nimport { nullError, interpolateVariableText } from \"../lib/utils\";\n\ntype DittoComponentString = string;\ntype DittoComponentObject = {\n  text: string;\n};\ntype DittoComponent = DittoComponentString | DittoComponentObject;\n\ninterface Args {\n  componentId: string;\n  alwaysReturnString: boolean;\n  variables: VariablesInput;\n  count?: number;\n}\n\nexport const useDittoComponent = (props: Args): DittoComponent => {\n  const { componentId, alwaysReturnString, variables, count } = props;\n  const { source, variant } = useContext(DittoContext);\n  if (!(\"ditto_component_library\" in source)) {\n    throw new Error(\n      \"An export file for the Component Library couldn't be found.\"\n    );\n  }\n\n  if (variant) {\n    const data = source?.ditto_component_library?.[variant];\n    if (data && data[componentId]) {\n      if (SourceDetector.isStructured(data)) {\n        const value = interpolateVariableText(\n          data[componentId],\n          variables,\n          count\n        );\n        return alwaysReturnString ? value.text : value;\n      } else if (SourceDetector.isFlat(data)) {\n        return data[componentId];\n      }\n    }\n  }\n\n  const data = source?.ditto_component_library?.base;\n  if (!data) {\n    return nullError(\"Base text not found in component library\");\n  }\n\n  if (data && !data[componentId]) {\n    return nullError(`Text not found for component \"${componentId}\"`);\n  }\n\n  if (SourceDetector.isStructured(data)) {\n    const value = interpolateVariableText(data[componentId], variables, count);\n    return alwaysReturnString ? value.text : value;\n  } else if (SourceDetector.isFlat(data)) {\n    return data[componentId];\n  } else {\n    return nullError(`Invalid format for component ${componentId}`);\n  }\n};\n","import React, { useMemo } from \"react\";\nimport { useDittoComponent } from \"../hooks/useDittoComponent\";\nimport { DittoComponentLibraryProps } from \"./Ditto\";\n\nexport const DittoComponent = (props: DittoComponentLibraryProps) => {\n  const { children, componentId, variables, count } = props;\n\n  const value = useDittoComponent({\n    componentId,\n    alwaysReturnString: typeof children !== \"function\",\n    variables: variables || {},\n    count\n  });\n\n  const text = useMemo(\n    () => (value !== null && typeof value === \"object\" ? value.text : value),\n    [value]\n  );\n\n  return (\n    <React.Fragment>\n      {typeof children === \"function\" ? children(text) : text}\n    </React.Fragment>\n  );\n};\n","import { useContext } from \"react\";\nimport { DittoText } from \"./DittoText\";\nimport { DittoFrameOrBlock } from \"./DittoFrameOrBlock\";\nimport { DittoComponent } from \"./DittoComponent\";\nimport { Block, DittoContext, Frame, VariablesInput } from \"../lib/context\";\nimport {\n  isFrameOrBlockComponent,\n  isText,\n  fragmentError,\n  isComponentLibrary,\n  isProject,\n} from \"../lib/utils\";\n\ntype PluralId = \"zero\" | \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\nexport type Plurals = {\n  [pluralId in PluralId]?: string;\n}\n\nexport interface DittoFrameProps {\n  projectId?: string;\n  frameId: string;\n  variables?: VariablesInput;\n  count?: number;\n  children: (frame: Frame) => React.ReactNode;\n}\n\nexport interface DittoBlockProps {\n  projectId?: string;\n  frameId: string;\n  blockId: string;\n  variables?: VariablesInput;\n  count?: number;\n  children: (block: Block) => React.ReactNode;\n}\n\nexport interface DittoTextProps {\n  projectId?: string;\n  textId: string;\n  variables?: VariablesInput;\n  count?: number;\n  children?: (text: string) => React.ReactNode;\n}\n\nexport interface DittoComponentLibraryProps {\n  componentId: string;\n  variables?: VariablesInput;\n  count?: number;\n  children?: (text: string) => React.ReactNode;\n}\n\nexport interface DittoFilters {\n  filters?: {\n    tags: string[];\n  };\n}\n\nexport type DittoFrameOrBlockProps = DittoFilters &\n  (DittoFrameProps | DittoBlockProps);\n\nexport type DittoProjectProps = DittoFilters &\n  (DittoFrameProps | DittoBlockProps | DittoTextProps);\n\nexport type DittoProps = DittoProjectProps | DittoComponentLibraryProps;\n\nexport function Ditto(props: DittoProps) {\n  const dittoContext = useContext(DittoContext);\n\n  if (isComponentLibrary(props)) {\n    return <DittoComponent {...props} />;\n  }\n\n  if (isProject(props, dittoContext.projectId)) {\n    const projectId = props.projectId || dittoContext.projectId;\n    if (!projectId) {\n      return fragmentError(\n        \"No Project ID was provided to the <DittoProvider /> or <Ditto /> components.\"\n      );\n    }\n\n    const propsWithProject = { ...props, projectId };\n\n    if (isText(propsWithProject)) {\n      return <DittoText {...propsWithProject} />;\n    }\n\n    if (isFrameOrBlockComponent(propsWithProject)) {\n      return <DittoFrameOrBlock {...propsWithProject} />;\n    }\n  }\n\n  return fragmentError(\n    'Invalid props provided to Ditto component; please provide \"componentId\", \"textId\" or \"frameId\"'\n  );\n}\n","import React from \"react\";\nimport { DittoContext, DittoSource } from \"../lib/context\";\n\ninterface DittoProviderProps {\n  projectId?: string;\n  variant?: string;\n  source: DittoSource;\n  children: React.ReactNode;\n}\n\nexport const DittoProvider = (props: DittoProviderProps) => {\n  const { children, source, variant, projectId } = props;\n\n  return (\n    <DittoContext.Provider\n      value={{\n        source,\n        variant,\n        ...(projectId ? { projectId } : {}),\n      }}\n    >\n      {children}\n    </DittoContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}