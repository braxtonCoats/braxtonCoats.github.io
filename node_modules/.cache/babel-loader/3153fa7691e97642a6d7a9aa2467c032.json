{"ast":null,"code":"/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n/**\n * A function that returns a sorting function to be used with Array.sort that\n * will sort the allTokens array based on references. This is to make sure\n * if you use output references that you never use a reference before it is\n * defined.\n * @memberof module:formatHelpers\n * @example\n * ```javascript\n * dictionary.allTokens.sort(sortByReference(dictionary))\n * ```\n * @param {Dictionary} dictionary\n * @returns {Function}\n */\nfunction sortByReference(dictionary) {\n  // The sorter function is recursive to account for multiple levels of nesting\n  function sorter(a, b) {\n    const aComesFirst = -1;\n    const bComesFirst = 1; // return early if a or b ar undefined\n\n    if (typeof a === 'undefined') {\n      return aComesFirst;\n    } else if (typeof b === 'undefined') {\n      return bComesFirst;\n    } // If token a uses a reference and token b doesn't, b might come before a\n    // read on..\n\n\n    if (a.original && dictionary.usesReference(a.original.value)) {\n      // Both a and b have references, we need to see if the reference each other\n      if (b.original && dictionary.usesReference(b.original.value)) {\n        const aRefs = dictionary.getReferences(a.original.value);\n        const bRefs = dictionary.getReferences(b.original.value);\n        aRefs.forEach(aRef => {\n          // a references b, we want b to come first\n          if (aRef.name === b.name) {\n            return bComesFirst;\n          }\n        });\n        bRefs.forEach(bRef => {\n          // ditto but opposite\n          if (bRef.name === a.name) {\n            return aComesFirst;\n          }\n        }); // both a and b have references and don't reference each other\n        // we go further down the rabbit hole (reference chain)\n\n        return sorter(aRefs[0], bRefs[0]); // a has a reference and b does not:\n      } else {\n        return bComesFirst;\n      } // a does not have a reference it should come first regardless if b has one\n\n    } else {\n      return aComesFirst;\n    }\n  }\n\n  return sorter;\n}\n\nmodule.exports = sortByReference;","map":{"version":3,"names":["sortByReference","dictionary","sorter","a","b","aComesFirst","bComesFirst","original","usesReference","value","aRefs","getReferences","bRefs","forEach","aRef","name","bRef","module","exports"],"sources":["/Users/braxtoncoats/Github/bcd/node_modules/style-dictionary/lib/common/formatHelpers/sortByReference.js"],"sourcesContent":["/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n/**\n * A function that returns a sorting function to be used with Array.sort that\n * will sort the allTokens array based on references. This is to make sure\n * if you use output references that you never use a reference before it is\n * defined.\n * @memberof module:formatHelpers\n * @example\n * ```javascript\n * dictionary.allTokens.sort(sortByReference(dictionary))\n * ```\n * @param {Dictionary} dictionary\n * @returns {Function}\n */\n function sortByReference(dictionary) {\n  // The sorter function is recursive to account for multiple levels of nesting\n  function sorter(a, b) {\n    const aComesFirst = -1;\n    const bComesFirst = 1;\n\n    // return early if a or b ar undefined\n    if (typeof a === 'undefined') {\n      return aComesFirst;\n    } else if (typeof b === 'undefined') {\n      return bComesFirst;\n    }\n\n    // If token a uses a reference and token b doesn't, b might come before a\n    // read on..\n    if (a.original && dictionary.usesReference(a.original.value)) {\n      // Both a and b have references, we need to see if the reference each other\n      if (b.original && dictionary.usesReference(b.original.value)) {\n        const aRefs = dictionary.getReferences(a.original.value);\n        const bRefs = dictionary.getReferences(b.original.value);\n\n        aRefs.forEach(aRef => {\n          // a references b, we want b to come first\n          if (aRef.name === b.name) {\n            return bComesFirst;\n          }\n        });\n\n        bRefs.forEach(bRef => {\n          // ditto but opposite\n          if (bRef.name === a.name) {\n            return aComesFirst;\n          }\n        });\n\n        // both a and b have references and don't reference each other\n        // we go further down the rabbit hole (reference chain)\n        return sorter(aRefs[0], bRefs[0]);\n      // a has a reference and b does not:\n      } else {\n        return bComesFirst;\n      }\n    // a does not have a reference it should come first regardless if b has one\n    } else {\n      return aComesFirst;\n    }\n  }\n\n  return sorter;\n}\n\nmodule.exports = sortByReference;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,SAASA,eAAT,CAAyBC,UAAzB,EAAqC;EACpC;EACA,SAASC,MAAT,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsB;IACpB,MAAMC,WAAW,GAAG,CAAC,CAArB;IACA,MAAMC,WAAW,GAAG,CAApB,CAFoB,CAIpB;;IACA,IAAI,OAAOH,CAAP,KAAa,WAAjB,EAA8B;MAC5B,OAAOE,WAAP;IACD,CAFD,MAEO,IAAI,OAAOD,CAAP,KAAa,WAAjB,EAA8B;MACnC,OAAOE,WAAP;IACD,CATmB,CAWpB;IACA;;;IACA,IAAIH,CAAC,CAACI,QAAF,IAAcN,UAAU,CAACO,aAAX,CAAyBL,CAAC,CAACI,QAAF,CAAWE,KAApC,CAAlB,EAA8D;MAC5D;MACA,IAAIL,CAAC,CAACG,QAAF,IAAcN,UAAU,CAACO,aAAX,CAAyBJ,CAAC,CAACG,QAAF,CAAWE,KAApC,CAAlB,EAA8D;QAC5D,MAAMC,KAAK,GAAGT,UAAU,CAACU,aAAX,CAAyBR,CAAC,CAACI,QAAF,CAAWE,KAApC,CAAd;QACA,MAAMG,KAAK,GAAGX,UAAU,CAACU,aAAX,CAAyBP,CAAC,CAACG,QAAF,CAAWE,KAApC,CAAd;QAEAC,KAAK,CAACG,OAAN,CAAcC,IAAI,IAAI;UACpB;UACA,IAAIA,IAAI,CAACC,IAAL,KAAcX,CAAC,CAACW,IAApB,EAA0B;YACxB,OAAOT,WAAP;UACD;QACF,CALD;QAOAM,KAAK,CAACC,OAAN,CAAcG,IAAI,IAAI;UACpB;UACA,IAAIA,IAAI,CAACD,IAAL,KAAcZ,CAAC,CAACY,IAApB,EAA0B;YACxB,OAAOV,WAAP;UACD;QACF,CALD,EAX4D,CAkB5D;QACA;;QACA,OAAOH,MAAM,CAACQ,KAAK,CAAC,CAAD,CAAN,EAAWE,KAAK,CAAC,CAAD,CAAhB,CAAb,CApB4D,CAqB9D;MACC,CAtBD,MAsBO;QACL,OAAON,WAAP;MACD,CA1B2D,CA2B9D;;IACC,CA5BD,MA4BO;MACL,OAAOD,WAAP;IACD;EACF;;EAED,OAAOH,MAAP;AACD;;AAEDe,MAAM,CAACC,OAAP,GAAiBlB,eAAjB"},"metadata":{},"sourceType":"script"}