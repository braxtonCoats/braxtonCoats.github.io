{"ast":null,"code":"/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n/**\n * Adds a custom action to Style Dictionary. Custom\n * actions can do whatever you need, such as: copying files,\n * base64'ing files, running other build scripts, etc.\n * After you register a custom action, you then use that\n * action in a platform your config.json\n *\n * You can perform operations on files generated by the style dictionary\n * as actions run after these files are generated.\n * Actions are run sequentially, if you write synchronous code then\n * it will block other actions, or if you use asynchronous code like Promises\n * it will not block.\n *\n * @static\n * @memberof module:style-dictionary\n * @param {Object} action\n * @param {String} action.name - The name of the action\n * @param {Function} action.do - The action in the form of a function.\n * @param {Function} [action.undo] - A function that undoes the action.\n * @returns {module:style-dictionary}\n * @example\n * ```js\n * StyleDictionary.registerAction({\n *   name: 'copy_assets',\n *   do: function(dictionary, config) {\n *     console.log('Copying assets directory');\n *     fs.copySync('assets', config.buildPath + 'assets');\n *   },\n *   undo: function(dictionary, config) {\n *     console.log('Cleaning assets directory');\n *     fs.removeSync(config.buildPath + 'assets');\n *   }\n * });\n * ```\n */\nfunction registerAction(options) {\n  if (typeof options.name !== 'string') throw new Error('name must be a string');\n  if (typeof options.do !== 'function') throw new Error('do must be a function');\n  this.action[options.name] = {\n    do: options.do,\n    undo: options.undo\n  };\n  return this;\n}\n\nmodule.exports = registerAction;","map":{"version":3,"names":["registerAction","options","name","Error","do","action","undo","module","exports"],"sources":["/Users/braxtoncoats/Github/bcd/node_modules/style-dictionary/lib/register/action.js"],"sourcesContent":["/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n/**\n * Adds a custom action to Style Dictionary. Custom\n * actions can do whatever you need, such as: copying files,\n * base64'ing files, running other build scripts, etc.\n * After you register a custom action, you then use that\n * action in a platform your config.json\n *\n * You can perform operations on files generated by the style dictionary\n * as actions run after these files are generated.\n * Actions are run sequentially, if you write synchronous code then\n * it will block other actions, or if you use asynchronous code like Promises\n * it will not block.\n *\n * @static\n * @memberof module:style-dictionary\n * @param {Object} action\n * @param {String} action.name - The name of the action\n * @param {Function} action.do - The action in the form of a function.\n * @param {Function} [action.undo] - A function that undoes the action.\n * @returns {module:style-dictionary}\n * @example\n * ```js\n * StyleDictionary.registerAction({\n *   name: 'copy_assets',\n *   do: function(dictionary, config) {\n *     console.log('Copying assets directory');\n *     fs.copySync('assets', config.buildPath + 'assets');\n *   },\n *   undo: function(dictionary, config) {\n *     console.log('Cleaning assets directory');\n *     fs.removeSync(config.buildPath + 'assets');\n *   }\n * });\n * ```\n */\nfunction registerAction(options) {\n  if (typeof options.name !== 'string')\n    throw new Error('name must be a string');\n  if (typeof options.do !== 'function')\n    throw new Error('do must be a function');\n\n  this.action[options.name] = {\n    do: options.do,\n    undo: options.undo\n  };\n\n  return this;\n}\n\nmodule.exports = registerAction;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAT,CAAwBC,OAAxB,EAAiC;EAC/B,IAAI,OAAOA,OAAO,CAACC,IAAf,KAAwB,QAA5B,EACE,MAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;EACF,IAAI,OAAOF,OAAO,CAACG,EAAf,KAAsB,UAA1B,EACE,MAAM,IAAID,KAAJ,CAAU,uBAAV,CAAN;EAEF,KAAKE,MAAL,CAAYJ,OAAO,CAACC,IAApB,IAA4B;IAC1BE,EAAE,EAAEH,OAAO,CAACG,EADc;IAE1BE,IAAI,EAAEL,OAAO,CAACK;EAFY,CAA5B;EAKA,OAAO,IAAP;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBR,cAAjB"},"metadata":{},"sourceType":"script"}