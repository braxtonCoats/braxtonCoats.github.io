{"ast":null,"code":"/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n/**\n * @module format\n */\n\n/**\n * The formatter function that is called when Style Dictionary builds files.\n *\n * @function formatter\n * @memberof module:format\n * @param {Object} args - A single argument to support named parameters and destructuring.\n * @param {Object} args.dictionary - The transformed and resolved dictionary object\n * @param {Object} args.dictionary.tokens - Object structure of the tokens that has been transformed and references resolved.\n * @param {Array} args.dictionary.allTokens - Flattened array of all the tokens. This makes it easy to output a list, like a list of SCSS variables.\n * @param {function(value): Boolean} args.dictionary.usesReference - Use this function to see if a token's value uses a reference. This is the same function style dictionary uses internally to detect a reference.\n * @param {function(value): Value} args.dictionary.getReferences - Use this function to get the tokens that it references. You can use this to output a reference in your custom format. For example: `dictionary.getReferences(token.original.value) // returns an array of the referenced token objects`\n * @param {Object} args.platform - The platform configuration this format is being called in.\n * @param {Object} args.file - The file configuration this format is being called in.\n * @param {Object} args.options - Merged options object that combines platform level configuration and file level configuration. File options take precedence.\n * @returns {String}\n * @example\n * ```js\n * StyleDictionary.registerFormat({\n *   name: 'myCustomFormat',\n *   formatter: function({dictionary, platform, options, file}) {\n *     return JSON.stringify(dictionary.tokens, null, 2);\n *   }\n * })\n * ```\n */\n\n/**\n * Add a custom format to the style dictionary\n * @static\n * @memberof module:style-dictionary\n * @param {Object} format\n * @param {String} format.name - Name of the format to be referenced in your config.json\n * @param {function} format.formatter - Function to perform the format. Takes a single argument. See [creating custom formats](formats.md#creating-formats)\n * Must return a string, which is then written to a file.\n * @returns {module:style-dictionary}\n * @example\n * ```js\n * StyleDictionary.registerFormat({\n *   name: 'json',\n *   formatter: function({dictionary, platform, options, file}) {\n *     return JSON.stringify(dictionary.tokens, null, 2);\n *   }\n * })\n * ```\n */\nfunction registerFormat(options) {\n  if (typeof options.name !== 'string') throw new Error('Can\\'t register format; format.name must be a string');\n  if (typeof options.formatter !== 'function') throw new Error('Can\\'t register format; format.formatter must be a function');\n  this.format[options.name] = options.formatter;\n  return this;\n}\n\nmodule.exports = registerFormat;","map":{"version":3,"names":["registerFormat","options","name","Error","formatter","format","module","exports"],"sources":["/Users/braxtoncoats/Github/bcd/node_modules/style-dictionary/lib/register/format.js"],"sourcesContent":["/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n/**\n * @module format\n */\n\n/**\n * The formatter function that is called when Style Dictionary builds files.\n *\n * @function formatter\n * @memberof module:format\n * @param {Object} args - A single argument to support named parameters and destructuring.\n * @param {Object} args.dictionary - The transformed and resolved dictionary object\n * @param {Object} args.dictionary.tokens - Object structure of the tokens that has been transformed and references resolved.\n * @param {Array} args.dictionary.allTokens - Flattened array of all the tokens. This makes it easy to output a list, like a list of SCSS variables.\n * @param {function(value): Boolean} args.dictionary.usesReference - Use this function to see if a token's value uses a reference. This is the same function style dictionary uses internally to detect a reference.\n * @param {function(value): Value} args.dictionary.getReferences - Use this function to get the tokens that it references. You can use this to output a reference in your custom format. For example: `dictionary.getReferences(token.original.value) // returns an array of the referenced token objects`\n * @param {Object} args.platform - The platform configuration this format is being called in.\n * @param {Object} args.file - The file configuration this format is being called in.\n * @param {Object} args.options - Merged options object that combines platform level configuration and file level configuration. File options take precedence.\n * @returns {String}\n * @example\n * ```js\n * StyleDictionary.registerFormat({\n *   name: 'myCustomFormat',\n *   formatter: function({dictionary, platform, options, file}) {\n *     return JSON.stringify(dictionary.tokens, null, 2);\n *   }\n * })\n * ```\n */\n\n/**\n * Add a custom format to the style dictionary\n * @static\n * @memberof module:style-dictionary\n * @param {Object} format\n * @param {String} format.name - Name of the format to be referenced in your config.json\n * @param {function} format.formatter - Function to perform the format. Takes a single argument. See [creating custom formats](formats.md#creating-formats)\n * Must return a string, which is then written to a file.\n * @returns {module:style-dictionary}\n * @example\n * ```js\n * StyleDictionary.registerFormat({\n *   name: 'json',\n *   formatter: function({dictionary, platform, options, file}) {\n *     return JSON.stringify(dictionary.tokens, null, 2);\n *   }\n * })\n * ```\n */\nfunction registerFormat(options) {\n  if (typeof options.name !== 'string')\n    throw new Error('Can\\'t register format; format.name must be a string');\n  if (typeof options.formatter !== 'function')\n    throw new Error('Can\\'t register format; format.formatter must be a function');\n\n  this.format[options.name] = options.formatter;\n\n  return this;\n}\n\nmodule.exports = registerFormat;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAT,CAAwBC,OAAxB,EAAiC;EAC/B,IAAI,OAAOA,OAAO,CAACC,IAAf,KAAwB,QAA5B,EACE,MAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;EACF,IAAI,OAAOF,OAAO,CAACG,SAAf,KAA6B,UAAjC,EACE,MAAM,IAAID,KAAJ,CAAU,6DAAV,CAAN;EAEF,KAAKE,MAAL,CAAYJ,OAAO,CAACC,IAApB,IAA4BD,OAAO,CAACG,SAApC;EAEA,OAAO,IAAP;AACD;;AAEDE,MAAM,CAACC,OAAP,GAAiBP,cAAjB"},"metadata":{},"sourceType":"script"}