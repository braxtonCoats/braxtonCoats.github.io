{"ast":null,"code":"/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n/**\n *\n * This is used to create CSS (and CSS pre-processor) lists of icons. It assumes you are\n * using an icon font and creates helper classes with the :before pseudo-selector to add\n * a unicode character.\n * __You probably don't need this.__\n * @memberof module:formatHelpers\n * @param {String} prefix - Character to prefix variable names, like '$' for Sass\n * @param {Token[]} allTokens - allTokens array on the dictionary object passed to the formatter function.\n * @param {Object} options - options object passed to the formatter function.\n * @returns {String}\n * @example\n * ```js\n * StyleDictionary.registerFormat({\n *   name: 'myCustomFormat',\n *   formatter: function({ dictionary, options }) {\n *     return iconsWithPrefix('$', dictionary.allTokens, options);\n *   }\n * });\n * ```\n */\nfunction iconsWithPrefix(prefix, allTokens, options) {\n  return allTokens.filter(function (token) {\n    return token.attributes.category === 'content' && token.attributes.type === 'icon';\n  }).map(function (token) {\n    var varName = prefix + token.name + ': ' + token.value + ';';\n    var className = '.' + options.prefix + '-icon.' + token.attributes.item + ':before ';\n    var declaration = '{ content: ' + prefix + token.name + '; }';\n    return varName + '\\n' + className + declaration;\n  }).join('\\n');\n}\n\nmodule.exports = iconsWithPrefix;","map":{"version":3,"names":["iconsWithPrefix","prefix","allTokens","options","filter","token","attributes","category","type","map","varName","name","value","className","item","declaration","join","module","exports"],"sources":["/Users/braxtoncoats/Github/bcd/node_modules/style-dictionary/lib/common/formatHelpers/iconsWithPrefix.js"],"sourcesContent":["/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n/**\n *\n * This is used to create CSS (and CSS pre-processor) lists of icons. It assumes you are\n * using an icon font and creates helper classes with the :before pseudo-selector to add\n * a unicode character.\n * __You probably don't need this.__\n * @memberof module:formatHelpers\n * @param {String} prefix - Character to prefix variable names, like '$' for Sass\n * @param {Token[]} allTokens - allTokens array on the dictionary object passed to the formatter function.\n * @param {Object} options - options object passed to the formatter function.\n * @returns {String}\n * @example\n * ```js\n * StyleDictionary.registerFormat({\n *   name: 'myCustomFormat',\n *   formatter: function({ dictionary, options }) {\n *     return iconsWithPrefix('$', dictionary.allTokens, options);\n *   }\n * });\n * ```\n */\n function iconsWithPrefix(prefix, allTokens, options) {\n  return allTokens.filter(function(token) {\n      return token.attributes.category === 'content' && token.attributes.type === 'icon';\n    })\n    .map(function(token) {\n      var varName = prefix + token.name + ': ' + token.value + ';';\n      var className = '.' + options.prefix + '-icon.' + token.attributes.item + ':before ';\n      var declaration = '{ content: ' + prefix + token.name + '; }';\n      return varName + '\\n' + className + declaration;\n    })\n    .join('\\n');\n}\n\nmodule.exports = iconsWithPrefix;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,SAASA,eAAT,CAAyBC,MAAzB,EAAiCC,SAAjC,EAA4CC,OAA5C,EAAqD;EACpD,OAAOD,SAAS,CAACE,MAAV,CAAiB,UAASC,KAAT,EAAgB;IACpC,OAAOA,KAAK,CAACC,UAAN,CAAiBC,QAAjB,KAA8B,SAA9B,IAA2CF,KAAK,CAACC,UAAN,CAAiBE,IAAjB,KAA0B,MAA5E;EACD,CAFI,EAGJC,GAHI,CAGA,UAASJ,KAAT,EAAgB;IACnB,IAAIK,OAAO,GAAGT,MAAM,GAAGI,KAAK,CAACM,IAAf,GAAsB,IAAtB,GAA6BN,KAAK,CAACO,KAAnC,GAA2C,GAAzD;IACA,IAAIC,SAAS,GAAG,MAAMV,OAAO,CAACF,MAAd,GAAuB,QAAvB,GAAkCI,KAAK,CAACC,UAAN,CAAiBQ,IAAnD,GAA0D,UAA1E;IACA,IAAIC,WAAW,GAAG,gBAAgBd,MAAhB,GAAyBI,KAAK,CAACM,IAA/B,GAAsC,KAAxD;IACA,OAAOD,OAAO,GAAG,IAAV,GAAiBG,SAAjB,GAA6BE,WAApC;EACD,CARI,EASJC,IATI,CASC,IATD,CAAP;AAUD;;AAEDC,MAAM,CAACC,OAAP,GAAiBlB,eAAjB"},"metadata":{},"sourceType":"script"}