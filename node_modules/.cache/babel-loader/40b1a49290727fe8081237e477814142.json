{"ast":null,"code":"/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar transformTypes = ['name', 'value', 'attribute'];\n/**\n * Add a custom transform to the Style Dictionary\n * Transforms can manipulate a token's name, value, or attributes\n *\n * @static\n * @name registerTransform\n * @memberof module:style-dictionary\n * @function\n * @param {Object} transform - Transform object\n * @param {String} transform.type - Type of transform, can be: name, attribute, or value\n * @param {String} transform.name - Name of the transformer (used by transformGroup to call a list of transforms).\n * @param {Boolean} transform.transitive - If the value transform should be applied transitively, i.e. should be applied to referenced values as well as absolute values.\n * @param {Function} [transform.matcher] - Matcher function, return boolean if transform should be applied. If you omit the matcher function, it will match all tokens.\n * @param {Function} transform.transformer Modifies a design token object. The transformer function will receive the token and the platform configuration as its arguments. The transformer function should return a string for name transforms, an object for attribute transforms, and same type of value for a value transform.\n * @returns {module:style-dictionary}\n * @example\n * ```js\n * StyleDictionary.registerTransform({\n *   name: 'time/seconds',\n *   type: 'value',\n *   matcher: function(token) {\n *     return token.attributes.category === 'time';\n *   },\n *   transformer: function(token) {\n *     // Note the use of prop.original.value,\n *     // before any transforms are performed, the build system\n *     // clones the original token to the 'original' attribute.\n *     return (parseInt(token.original.value) / 1000).toString() + 's';\n *   }\n * });\n * ```\n */\n\nfunction registerTransform(options) {\n  if (typeof options.type !== 'string') throw new Error('type must be a string');\n  if (transformTypes.indexOf(options.type) < 0) throw new Error(options.type + ' type is not one of: ' + transformTypes.join(', '));\n  if (typeof options.name !== 'string') throw new Error('name must be a string');\n  if (options.matcher && typeof options.matcher !== 'function') throw new Error('matcher must be a function');\n  if (typeof options.transformer !== 'function') throw new Error('transformer must be a function');\n  this.transform[options.name] = {\n    type: options.type,\n    matcher: options.matcher,\n    transitive: !!options.transitive,\n    transformer: options.transformer\n  };\n  return this;\n}\n\nmodule.exports = registerTransform;","map":{"version":3,"names":["transformTypes","registerTransform","options","type","Error","indexOf","join","name","matcher","transformer","transform","transitive","module","exports"],"sources":["/Users/braxtoncoats/Github/bcd/node_modules/style-dictionary/lib/register/transform.js"],"sourcesContent":["/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nvar transformTypes = ['name', 'value', 'attribute'];\n\n/**\n * Add a custom transform to the Style Dictionary\n * Transforms can manipulate a token's name, value, or attributes\n *\n * @static\n * @name registerTransform\n * @memberof module:style-dictionary\n * @function\n * @param {Object} transform - Transform object\n * @param {String} transform.type - Type of transform, can be: name, attribute, or value\n * @param {String} transform.name - Name of the transformer (used by transformGroup to call a list of transforms).\n * @param {Boolean} transform.transitive - If the value transform should be applied transitively, i.e. should be applied to referenced values as well as absolute values.\n * @param {Function} [transform.matcher] - Matcher function, return boolean if transform should be applied. If you omit the matcher function, it will match all tokens.\n * @param {Function} transform.transformer Modifies a design token object. The transformer function will receive the token and the platform configuration as its arguments. The transformer function should return a string for name transforms, an object for attribute transforms, and same type of value for a value transform.\n * @returns {module:style-dictionary}\n * @example\n * ```js\n * StyleDictionary.registerTransform({\n *   name: 'time/seconds',\n *   type: 'value',\n *   matcher: function(token) {\n *     return token.attributes.category === 'time';\n *   },\n *   transformer: function(token) {\n *     // Note the use of prop.original.value,\n *     // before any transforms are performed, the build system\n *     // clones the original token to the 'original' attribute.\n *     return (parseInt(token.original.value) / 1000).toString() + 's';\n *   }\n * });\n * ```\n */\nfunction registerTransform(options) {\n  if (typeof options.type !== 'string')\n    throw new Error('type must be a string');\n  if (transformTypes.indexOf(options.type) < 0)\n    throw new Error(options.type + ' type is not one of: ' + transformTypes.join(', '));\n  if (typeof options.name !== 'string')\n    throw new Error('name must be a string');\n  if (options.matcher && typeof options.matcher !== 'function')\n    throw new Error('matcher must be a function');\n  if (typeof options.transformer !== 'function')\n    throw new Error('transformer must be a function');\n\n  this.transform[options.name] = {\n    type: options.type,\n    matcher: options.matcher,\n    transitive: !!options.transitive,\n    transformer: options.transformer\n  };\n\n  return this;\n}\n\n\nmodule.exports = registerTransform;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,cAAc,GAAG,CAAC,MAAD,EAAS,OAAT,EAAkB,WAAlB,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,iBAAT,CAA2BC,OAA3B,EAAoC;EAClC,IAAI,OAAOA,OAAO,CAACC,IAAf,KAAwB,QAA5B,EACE,MAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;EACF,IAAIJ,cAAc,CAACK,OAAf,CAAuBH,OAAO,CAACC,IAA/B,IAAuC,CAA3C,EACE,MAAM,IAAIC,KAAJ,CAAUF,OAAO,CAACC,IAAR,GAAe,uBAAf,GAAyCH,cAAc,CAACM,IAAf,CAAoB,IAApB,CAAnD,CAAN;EACF,IAAI,OAAOJ,OAAO,CAACK,IAAf,KAAwB,QAA5B,EACE,MAAM,IAAIH,KAAJ,CAAU,uBAAV,CAAN;EACF,IAAIF,OAAO,CAACM,OAAR,IAAmB,OAAON,OAAO,CAACM,OAAf,KAA2B,UAAlD,EACE,MAAM,IAAIJ,KAAJ,CAAU,4BAAV,CAAN;EACF,IAAI,OAAOF,OAAO,CAACO,WAAf,KAA+B,UAAnC,EACE,MAAM,IAAIL,KAAJ,CAAU,gCAAV,CAAN;EAEF,KAAKM,SAAL,CAAeR,OAAO,CAACK,IAAvB,IAA+B;IAC7BJ,IAAI,EAAED,OAAO,CAACC,IADe;IAE7BK,OAAO,EAAEN,OAAO,CAACM,OAFY;IAG7BG,UAAU,EAAE,CAAC,CAACT,OAAO,CAACS,UAHO;IAI7BF,WAAW,EAAEP,OAAO,CAACO;EAJQ,CAA/B;EAOA,OAAO,IAAP;AACD;;AAGDG,MAAM,CAACC,OAAP,GAAiBZ,iBAAjB"},"metadata":{},"sourceType":"script"}