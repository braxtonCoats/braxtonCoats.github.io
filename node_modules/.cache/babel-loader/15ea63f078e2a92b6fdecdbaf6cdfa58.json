{"ast":null,"code":"/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nrequire('json5/lib/register');\n\nrequire.extensions[\".jsonc\"] = require(\"./utils/jsonc\").register;\n\nvar combineJSON = require('./utils/combineJSON'),\n    deepExtend = require('./utils/deepExtend'),\n    path = require('path'),\n    _ = require('./utils/es6_'),\n    GroupMessages = require('./utils/groupMessages');\n\nvar PROPERTY_VALUE_COLLISIONS = GroupMessages.GROUP.PropertyValueCollisions;\n/**\n * Either a string to a JSON file that contains configuration for the style dictionary or a plain Javascript object\n * that contains the configuration.\n * @typedef {(object|string)} Config\n * @prop {String[]} source - Paths to token files\n * @prop {Platform} platforms.platform - A platform\n * @example\n * ```json\n * {\n *   \"source\": [\"tokens/*.json\"],\n *   \"platforms\": {\n *     \"scss\": {\n *       \"transformGroup\": \"scss\",\n *       \"buildPath\": \"web/sass/\",\n *       \"files\": [\n *         {\n *           \"format\": \"scss/variables\",\n *           \"destination\": \"_variables.scss\"\n *         }\n *       ],\n *       \"actions\": [\"copy_assets\"]\n *     }\n *   }\n * }\n * ```\n */\n\n/**\n * An object representing a platform\n * @typedef {Object} Platform\n * @prop {String} transformGroup\n * @prop {String} transforms\n */\n\n/**\n * Create a Style Dictionary\n * @static\n * @memberof module:style-dictionary\n * @param {Config} config - Configuration options to build your style dictionary. If you pass a string,\n * it will be used as a path to a JSON config file. You can also pass an object with the configuration.\n * @returns {module:style-dictionary}\n * @example\n * ```js\n * const StyleDictionary = require('style-dictionary').extend('config.json');\n *\n * const StyleDictionary = require('style-dictionary').extend({\n *   source: ['tokens/*.json'],\n *   platforms: {\n *     scss: {\n *       transformGroup: 'scss',\n *       buildPath: 'build/',\n *       files: [{\n *         destination: 'variables.scss',\n *         format: 'scss/variables'\n *       }]\n *     }\n *     // ...\n *   }\n * });\n * ```\n */\n\nfunction extend(opts) {\n  let options, to_ret;\n  let inlineTokens = {};\n  let includeTokens = {};\n  let sourceTokens = {}; // Overloaded method, can accept a string as a path that points to a JS or\n  // JSON file or a plain object. Potentially refactor.\n\n  if (_.isString(opts)) {\n    options = require(path.resolve(process.cwd(), opts));\n  } else {\n    options = opts;\n  } // Creating a new object and copying over the options\n  // Also keeping an options object in case\n\n\n  to_ret = deepExtend([{}, this, {\n    options: options\n  }, options]); // grab the inline tokens, ones either defined in the configuration object\n  // or that already exist from extending another style dictionary instance\n  // with `properties` or `tokens` keys\n\n  inlineTokens = deepExtend([{}, to_ret.tokens || {}, to_ret.properties || {}]); // Update tokens with includes from dependencies\n\n  if (options.include) {\n    if (!_.isArray(options.include)) throw new Error('include must be an array');\n    includeTokens = combineJSON(options.include, true, null, false, to_ret.parsers);\n    to_ret.include = null; // We don't want to carry over include references\n  } // Update tokens with current package's source\n  // These highest precedence\n\n\n  if (options.source) {\n    if (!_.isArray(options.source)) throw new Error('source must be an array');\n    sourceTokens = combineJSON(options.source, true, function Collision(prop) {\n      GroupMessages.add(PROPERTY_VALUE_COLLISIONS, `Collision detected at: ${prop.path.join('.')}! Original value: ${prop.target[prop.key]}, New value: ${prop.copy[prop.key]}`);\n    }, true, to_ret.parsers);\n\n    if (GroupMessages.count(PROPERTY_VALUE_COLLISIONS) > 0) {\n      var collisions = GroupMessages.flush(PROPERTY_VALUE_COLLISIONS).join('\\n');\n      console.log(`\\n${PROPERTY_VALUE_COLLISIONS}:\\n${collisions}\\n\\n`);\n\n      if (options.log === 'error') {\n        throw new Error('Collisions detected');\n      }\n    }\n\n    to_ret.source = null; // We don't want to carry over the source references\n  } // Merge inline, include, and source tokens\n\n\n  const tokens = deepExtend([{}, inlineTokens, includeTokens, sourceTokens]); // Add tokens to both .tokens and .properties\n\n  to_ret.tokens = tokens;\n  to_ret.properties = tokens;\n  return to_ret;\n}\n\nmodule.exports = extend;","map":{"version":3,"names":["require","extensions","register","combineJSON","deepExtend","path","_","GroupMessages","PROPERTY_VALUE_COLLISIONS","GROUP","PropertyValueCollisions","extend","opts","options","to_ret","inlineTokens","includeTokens","sourceTokens","isString","resolve","process","cwd","tokens","properties","include","isArray","Error","parsers","source","Collision","prop","add","join","target","key","copy","count","collisions","flush","console","log","module","exports"],"sources":["/Users/braxtoncoats/Github/bcd/node_modules/style-dictionary/lib/extend.js"],"sourcesContent":["/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nrequire('json5/lib/register');\nrequire.extensions[\".jsonc\"] = require(\"./utils/jsonc\").register;\n\nvar combineJSON = require('./utils/combineJSON'),\n    deepExtend = require('./utils/deepExtend'),\n    path = require('path'),\n    _ = require('./utils/es6_'),\n    GroupMessages = require('./utils/groupMessages');\n\nvar PROPERTY_VALUE_COLLISIONS = GroupMessages.GROUP.PropertyValueCollisions;\n\n/**\n * Either a string to a JSON file that contains configuration for the style dictionary or a plain Javascript object\n * that contains the configuration.\n * @typedef {(object|string)} Config\n * @prop {String[]} source - Paths to token files\n * @prop {Platform} platforms.platform - A platform\n * @example\n * ```json\n * {\n *   \"source\": [\"tokens/*.json\"],\n *   \"platforms\": {\n *     \"scss\": {\n *       \"transformGroup\": \"scss\",\n *       \"buildPath\": \"web/sass/\",\n *       \"files\": [\n *         {\n *           \"format\": \"scss/variables\",\n *           \"destination\": \"_variables.scss\"\n *         }\n *       ],\n *       \"actions\": [\"copy_assets\"]\n *     }\n *   }\n * }\n * ```\n */\n\n/**\n * An object representing a platform\n * @typedef {Object} Platform\n * @prop {String} transformGroup\n * @prop {String} transforms\n */\n\n/**\n * Create a Style Dictionary\n * @static\n * @memberof module:style-dictionary\n * @param {Config} config - Configuration options to build your style dictionary. If you pass a string,\n * it will be used as a path to a JSON config file. You can also pass an object with the configuration.\n * @returns {module:style-dictionary}\n * @example\n * ```js\n * const StyleDictionary = require('style-dictionary').extend('config.json');\n *\n * const StyleDictionary = require('style-dictionary').extend({\n *   source: ['tokens/*.json'],\n *   platforms: {\n *     scss: {\n *       transformGroup: 'scss',\n *       buildPath: 'build/',\n *       files: [{\n *         destination: 'variables.scss',\n *         format: 'scss/variables'\n *       }]\n *     }\n *     // ...\n *   }\n * });\n * ```\n */\nfunction extend(opts) {\n  let options, to_ret;\n  let inlineTokens = {};\n  let includeTokens = {};\n  let sourceTokens = {};\n\n  // Overloaded method, can accept a string as a path that points to a JS or\n  // JSON file or a plain object. Potentially refactor.\n  if (_.isString(opts)) {\n    options = require(path.resolve(process.cwd(), opts));\n  } else {\n    options = opts;\n  }\n\n  // Creating a new object and copying over the options\n  // Also keeping an options object in case\n  to_ret = deepExtend([{}, this, {options: options}, options]);\n\n  // grab the inline tokens, ones either defined in the configuration object\n  // or that already exist from extending another style dictionary instance\n  // with `properties` or `tokens` keys\n  inlineTokens = deepExtend([{}, (to_ret.tokens||{}), (to_ret.properties||{})]);\n\n  // Update tokens with includes from dependencies\n  if (options.include) {\n    if (!_.isArray(options.include))\n      throw new Error('include must be an array');\n\n    includeTokens = combineJSON(options.include, true, null, false, to_ret.parsers);\n\n    to_ret.include = null; // We don't want to carry over include references\n  }\n\n  // Update tokens with current package's source\n  // These highest precedence\n  if (options.source) {\n    if (!_.isArray(options.source))\n      throw new Error('source must be an array');\n\n    sourceTokens = combineJSON(options.source, true, function Collision(prop) {\n      GroupMessages.add(\n        PROPERTY_VALUE_COLLISIONS,\n        `Collision detected at: ${prop.path.join('.')}! Original value: ${prop.target[prop.key]}, New value: ${prop.copy[prop.key]}`\n      );\n    }, true, to_ret.parsers);\n\n    if(GroupMessages.count(PROPERTY_VALUE_COLLISIONS) > 0) {\n      var collisions = GroupMessages.flush(PROPERTY_VALUE_COLLISIONS).join('\\n');\n      console.log(`\\n${PROPERTY_VALUE_COLLISIONS}:\\n${collisions}\\n\\n`);\n      if (options.log === 'error') {\n        throw new Error('Collisions detected');\n      }\n    }\n\n    to_ret.source = null; // We don't want to carry over the source references\n  }\n\n  // Merge inline, include, and source tokens\n  const tokens = deepExtend([{}, inlineTokens, includeTokens, sourceTokens]);\n\n  // Add tokens to both .tokens and .properties\n  to_ret.tokens = tokens;\n  to_ret.properties = tokens;\n\n  return to_ret;\n}\n\nmodule.exports = extend;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}