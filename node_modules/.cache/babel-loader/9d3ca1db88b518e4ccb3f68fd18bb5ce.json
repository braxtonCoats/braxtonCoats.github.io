{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\n\nexport function createScanner(text, ignoreTrivia) {\n  if (ignoreTrivia === void 0) {\n    ignoreTrivia = false;\n  }\n\n  var len = text.length;\n  var pos = 0,\n      value = '',\n      tokenOffset = 0,\n      token = 16\n  /* SyntaxKind.Unknown */\n  ,\n      lineNumber = 0,\n      lineStartOffset = 0,\n      tokenLineStartOffset = 0,\n      prevTokenLineStartOffset = 0,\n      scanError = 0\n  /* ScanError.None */\n  ;\n\n  function scanHexDigits(count, exact) {\n    var digits = 0;\n    var value = 0;\n\n    while (digits < count || !exact) {\n      var ch = text.charCodeAt(pos);\n\n      if (ch >= 48\n      /* CharacterCodes._0 */\n      && ch <= 57\n      /* CharacterCodes._9 */\n      ) {\n        value = value * 16 + ch - 48\n        /* CharacterCodes._0 */\n        ;\n      } else if (ch >= 65\n      /* CharacterCodes.A */\n      && ch <= 70\n      /* CharacterCodes.F */\n      ) {\n        value = value * 16 + ch - 65\n        /* CharacterCodes.A */\n        + 10;\n      } else if (ch >= 97\n      /* CharacterCodes.a */\n      && ch <= 102\n      /* CharacterCodes.f */\n      ) {\n        value = value * 16 + ch - 97\n        /* CharacterCodes.a */\n        + 10;\n      } else {\n        break;\n      }\n\n      pos++;\n      digits++;\n    }\n\n    if (digits < count) {\n      value = -1;\n    }\n\n    return value;\n  }\n\n  function setPosition(newPosition) {\n    pos = newPosition;\n    value = '';\n    tokenOffset = 0;\n    token = 16\n    /* SyntaxKind.Unknown */\n    ;\n    scanError = 0\n    /* ScanError.None */\n    ;\n  }\n\n  function scanNumber() {\n    var start = pos;\n\n    if (text.charCodeAt(pos) === 48\n    /* CharacterCodes._0 */\n    ) {\n      pos++;\n    } else {\n      pos++;\n\n      while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n        pos++;\n      }\n    }\n\n    if (pos < text.length && text.charCodeAt(pos) === 46\n    /* CharacterCodes.dot */\n    ) {\n      pos++;\n\n      if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n        pos++;\n\n        while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n          pos++;\n        }\n      } else {\n        scanError = 3\n        /* ScanError.UnexpectedEndOfNumber */\n        ;\n        return text.substring(start, pos);\n      }\n    }\n\n    var end = pos;\n\n    if (pos < text.length && (text.charCodeAt(pos) === 69\n    /* CharacterCodes.E */\n    || text.charCodeAt(pos) === 101\n    /* CharacterCodes.e */\n    )) {\n      pos++;\n\n      if (pos < text.length && text.charCodeAt(pos) === 43\n      /* CharacterCodes.plus */\n      || text.charCodeAt(pos) === 45\n      /* CharacterCodes.minus */\n      ) {\n        pos++;\n      }\n\n      if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n        pos++;\n\n        while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n          pos++;\n        }\n\n        end = pos;\n      } else {\n        scanError = 3\n        /* ScanError.UnexpectedEndOfNumber */\n        ;\n      }\n    }\n\n    return text.substring(start, end);\n  }\n\n  function scanString() {\n    var result = '',\n        start = pos;\n\n    while (true) {\n      if (pos >= len) {\n        result += text.substring(start, pos);\n        scanError = 2\n        /* ScanError.UnexpectedEndOfString */\n        ;\n        break;\n      }\n\n      var ch = text.charCodeAt(pos);\n\n      if (ch === 34\n      /* CharacterCodes.doubleQuote */\n      ) {\n        result += text.substring(start, pos);\n        pos++;\n        break;\n      }\n\n      if (ch === 92\n      /* CharacterCodes.backslash */\n      ) {\n        result += text.substring(start, pos);\n        pos++;\n\n        if (pos >= len) {\n          scanError = 2\n          /* ScanError.UnexpectedEndOfString */\n          ;\n          break;\n        }\n\n        var ch2 = text.charCodeAt(pos++);\n\n        switch (ch2) {\n          case 34\n          /* CharacterCodes.doubleQuote */\n          :\n            result += '\\\"';\n            break;\n\n          case 92\n          /* CharacterCodes.backslash */\n          :\n            result += '\\\\';\n            break;\n\n          case 47\n          /* CharacterCodes.slash */\n          :\n            result += '/';\n            break;\n\n          case 98\n          /* CharacterCodes.b */\n          :\n            result += '\\b';\n            break;\n\n          case 102\n          /* CharacterCodes.f */\n          :\n            result += '\\f';\n            break;\n\n          case 110\n          /* CharacterCodes.n */\n          :\n            result += '\\n';\n            break;\n\n          case 114\n          /* CharacterCodes.r */\n          :\n            result += '\\r';\n            break;\n\n          case 116\n          /* CharacterCodes.t */\n          :\n            result += '\\t';\n            break;\n\n          case 117\n          /* CharacterCodes.u */\n          :\n            var ch3 = scanHexDigits(4, true);\n\n            if (ch3 >= 0) {\n              result += String.fromCharCode(ch3);\n            } else {\n              scanError = 4\n              /* ScanError.InvalidUnicode */\n              ;\n            }\n\n            break;\n\n          default:\n            scanError = 5\n            /* ScanError.InvalidEscapeCharacter */\n            ;\n        }\n\n        start = pos;\n        continue;\n      }\n\n      if (ch >= 0 && ch <= 0x1f) {\n        if (isLineBreak(ch)) {\n          result += text.substring(start, pos);\n          scanError = 2\n          /* ScanError.UnexpectedEndOfString */\n          ;\n          break;\n        } else {\n          scanError = 6\n          /* ScanError.InvalidCharacter */\n          ; // mark as error but continue with string\n        }\n      }\n\n      pos++;\n    }\n\n    return result;\n  }\n\n  function scanNext() {\n    value = '';\n    scanError = 0\n    /* ScanError.None */\n    ;\n    tokenOffset = pos;\n    lineStartOffset = lineNumber;\n    prevTokenLineStartOffset = tokenLineStartOffset;\n\n    if (pos >= len) {\n      // at the end\n      tokenOffset = len;\n      return token = 17\n      /* SyntaxKind.EOF */\n      ;\n    }\n\n    var code = text.charCodeAt(pos); // trivia: whitespace\n\n    if (isWhiteSpace(code)) {\n      do {\n        pos++;\n        value += String.fromCharCode(code);\n        code = text.charCodeAt(pos);\n      } while (isWhiteSpace(code));\n\n      return token = 15\n      /* SyntaxKind.Trivia */\n      ;\n    } // trivia: newlines\n\n\n    if (isLineBreak(code)) {\n      pos++;\n      value += String.fromCharCode(code);\n\n      if (code === 13\n      /* CharacterCodes.carriageReturn */\n      && text.charCodeAt(pos) === 10\n      /* CharacterCodes.lineFeed */\n      ) {\n        pos++;\n        value += '\\n';\n      }\n\n      lineNumber++;\n      tokenLineStartOffset = pos;\n      return token = 14\n      /* SyntaxKind.LineBreakTrivia */\n      ;\n    }\n\n    switch (code) {\n      // tokens: []{}:,\n      case 123\n      /* CharacterCodes.openBrace */\n      :\n        pos++;\n        return token = 1\n        /* SyntaxKind.OpenBraceToken */\n        ;\n\n      case 125\n      /* CharacterCodes.closeBrace */\n      :\n        pos++;\n        return token = 2\n        /* SyntaxKind.CloseBraceToken */\n        ;\n\n      case 91\n      /* CharacterCodes.openBracket */\n      :\n        pos++;\n        return token = 3\n        /* SyntaxKind.OpenBracketToken */\n        ;\n\n      case 93\n      /* CharacterCodes.closeBracket */\n      :\n        pos++;\n        return token = 4\n        /* SyntaxKind.CloseBracketToken */\n        ;\n\n      case 58\n      /* CharacterCodes.colon */\n      :\n        pos++;\n        return token = 6\n        /* SyntaxKind.ColonToken */\n        ;\n\n      case 44\n      /* CharacterCodes.comma */\n      :\n        pos++;\n        return token = 5\n        /* SyntaxKind.CommaToken */\n        ;\n      // strings\n\n      case 34\n      /* CharacterCodes.doubleQuote */\n      :\n        pos++;\n        value = scanString();\n        return token = 10\n        /* SyntaxKind.StringLiteral */\n        ;\n      // comments\n\n      case 47\n      /* CharacterCodes.slash */\n      :\n        var start = pos - 1; // Single-line comment\n\n        if (text.charCodeAt(pos + 1) === 47\n        /* CharacterCodes.slash */\n        ) {\n          pos += 2;\n\n          while (pos < len) {\n            if (isLineBreak(text.charCodeAt(pos))) {\n              break;\n            }\n\n            pos++;\n          }\n\n          value = text.substring(start, pos);\n          return token = 12\n          /* SyntaxKind.LineCommentTrivia */\n          ;\n        } // Multi-line comment\n\n\n        if (text.charCodeAt(pos + 1) === 42\n        /* CharacterCodes.asterisk */\n        ) {\n          pos += 2;\n          var safeLength = len - 1; // For lookahead.\n\n          var commentClosed = false;\n\n          while (pos < safeLength) {\n            var ch = text.charCodeAt(pos);\n\n            if (ch === 42\n            /* CharacterCodes.asterisk */\n            && text.charCodeAt(pos + 1) === 47\n            /* CharacterCodes.slash */\n            ) {\n              pos += 2;\n              commentClosed = true;\n              break;\n            }\n\n            pos++;\n\n            if (isLineBreak(ch)) {\n              if (ch === 13\n              /* CharacterCodes.carriageReturn */\n              && text.charCodeAt(pos) === 10\n              /* CharacterCodes.lineFeed */\n              ) {\n                pos++;\n              }\n\n              lineNumber++;\n              tokenLineStartOffset = pos;\n            }\n          }\n\n          if (!commentClosed) {\n            pos++;\n            scanError = 1\n            /* ScanError.UnexpectedEndOfComment */\n            ;\n          }\n\n          value = text.substring(start, pos);\n          return token = 13\n          /* SyntaxKind.BlockCommentTrivia */\n          ;\n        } // just a single slash\n\n\n        value += String.fromCharCode(code);\n        pos++;\n        return token = 16\n        /* SyntaxKind.Unknown */\n        ;\n      // numbers\n\n      case 45\n      /* CharacterCodes.minus */\n      :\n        value += String.fromCharCode(code);\n        pos++;\n\n        if (pos === len || !isDigit(text.charCodeAt(pos))) {\n          return token = 16\n          /* SyntaxKind.Unknown */\n          ;\n        }\n\n      // found a minus, followed by a number so\n      // we fall through to proceed with scanning\n      // numbers\n\n      case 48\n      /* CharacterCodes._0 */\n      :\n      case 49\n      /* CharacterCodes._1 */\n      :\n      case 50\n      /* CharacterCodes._2 */\n      :\n      case 51\n      /* CharacterCodes._3 */\n      :\n      case 52\n      /* CharacterCodes._4 */\n      :\n      case 53\n      /* CharacterCodes._5 */\n      :\n      case 54\n      /* CharacterCodes._6 */\n      :\n      case 55\n      /* CharacterCodes._7 */\n      :\n      case 56\n      /* CharacterCodes._8 */\n      :\n      case 57\n      /* CharacterCodes._9 */\n      :\n        value += scanNumber();\n        return token = 11\n        /* SyntaxKind.NumericLiteral */\n        ;\n      // literals and unknown symbols\n\n      default:\n        // is a literal? Read the full word.\n        while (pos < len && isUnknownContentCharacter(code)) {\n          pos++;\n          code = text.charCodeAt(pos);\n        }\n\n        if (tokenOffset !== pos) {\n          value = text.substring(tokenOffset, pos); // keywords: true, false, null\n\n          switch (value) {\n            case 'true':\n              return token = 8\n              /* SyntaxKind.TrueKeyword */\n              ;\n\n            case 'false':\n              return token = 9\n              /* SyntaxKind.FalseKeyword */\n              ;\n\n            case 'null':\n              return token = 7\n              /* SyntaxKind.NullKeyword */\n              ;\n          }\n\n          return token = 16\n          /* SyntaxKind.Unknown */\n          ;\n        } // some\n\n\n        value += String.fromCharCode(code);\n        pos++;\n        return token = 16\n        /* SyntaxKind.Unknown */\n        ;\n    }\n  }\n\n  function isUnknownContentCharacter(code) {\n    if (isWhiteSpace(code) || isLineBreak(code)) {\n      return false;\n    }\n\n    switch (code) {\n      case 125\n      /* CharacterCodes.closeBrace */\n      :\n      case 93\n      /* CharacterCodes.closeBracket */\n      :\n      case 123\n      /* CharacterCodes.openBrace */\n      :\n      case 91\n      /* CharacterCodes.openBracket */\n      :\n      case 34\n      /* CharacterCodes.doubleQuote */\n      :\n      case 58\n      /* CharacterCodes.colon */\n      :\n      case 44\n      /* CharacterCodes.comma */\n      :\n      case 47\n      /* CharacterCodes.slash */\n      :\n        return false;\n    }\n\n    return true;\n  }\n\n  function scanNextNonTrivia() {\n    var result;\n\n    do {\n      result = scanNext();\n    } while (result >= 12\n    /* SyntaxKind.LineCommentTrivia */\n    && result <= 15\n    /* SyntaxKind.Trivia */\n    );\n\n    return result;\n  }\n\n  return {\n    setPosition: setPosition,\n    getPosition: function () {\n      return pos;\n    },\n    scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n    getToken: function () {\n      return token;\n    },\n    getTokenValue: function () {\n      return value;\n    },\n    getTokenOffset: function () {\n      return tokenOffset;\n    },\n    getTokenLength: function () {\n      return pos - tokenOffset;\n    },\n    getTokenStartLine: function () {\n      return lineStartOffset;\n    },\n    getTokenStartCharacter: function () {\n      return tokenOffset - prevTokenLineStartOffset;\n    },\n    getTokenError: function () {\n      return scanError;\n    }\n  };\n}\n\nfunction isWhiteSpace(ch) {\n  return ch === 32\n  /* CharacterCodes.space */\n  || ch === 9\n  /* CharacterCodes.tab */\n  ;\n}\n\nfunction isLineBreak(ch) {\n  return ch === 10\n  /* CharacterCodes.lineFeed */\n  || ch === 13\n  /* CharacterCodes.carriageReturn */\n  ;\n}\n\nfunction isDigit(ch) {\n  return ch >= 48\n  /* CharacterCodes._0 */\n  && ch <= 57\n  /* CharacterCodes._9 */\n  ;\n}","map":{"version":3,"names":["createScanner","text","ignoreTrivia","len","length","pos","value","tokenOffset","token","lineNumber","lineStartOffset","tokenLineStartOffset","prevTokenLineStartOffset","scanError","scanHexDigits","count","exact","digits","ch","charCodeAt","setPosition","newPosition","scanNumber","start","isDigit","substring","end","scanString","result","ch2","ch3","String","fromCharCode","isLineBreak","scanNext","code","isWhiteSpace","safeLength","commentClosed","isUnknownContentCharacter","scanNextNonTrivia","getPosition","scan","getToken","getTokenValue","getTokenOffset","getTokenLength","getTokenStartLine","getTokenStartCharacter","getTokenError"],"sources":["/Users/braxtoncoats/Github/bcd/node_modules/jsonc-parser/lib/esm/impl/scanner.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport function createScanner(text, ignoreTrivia) {\n    if (ignoreTrivia === void 0) { ignoreTrivia = false; }\n    var len = text.length;\n    var pos = 0, value = '', tokenOffset = 0, token = 16 /* SyntaxKind.Unknown */, lineNumber = 0, lineStartOffset = 0, tokenLineStartOffset = 0, prevTokenLineStartOffset = 0, scanError = 0 /* ScanError.None */;\n    function scanHexDigits(count, exact) {\n        var digits = 0;\n        var value = 0;\n        while (digits < count || !exact) {\n            var ch = text.charCodeAt(pos);\n            if (ch >= 48 /* CharacterCodes._0 */ && ch <= 57 /* CharacterCodes._9 */) {\n                value = value * 16 + ch - 48 /* CharacterCodes._0 */;\n            }\n            else if (ch >= 65 /* CharacterCodes.A */ && ch <= 70 /* CharacterCodes.F */) {\n                value = value * 16 + ch - 65 /* CharacterCodes.A */ + 10;\n            }\n            else if (ch >= 97 /* CharacterCodes.a */ && ch <= 102 /* CharacterCodes.f */) {\n                value = value * 16 + ch - 97 /* CharacterCodes.a */ + 10;\n            }\n            else {\n                break;\n            }\n            pos++;\n            digits++;\n        }\n        if (digits < count) {\n            value = -1;\n        }\n        return value;\n    }\n    function setPosition(newPosition) {\n        pos = newPosition;\n        value = '';\n        tokenOffset = 0;\n        token = 16 /* SyntaxKind.Unknown */;\n        scanError = 0 /* ScanError.None */;\n    }\n    function scanNumber() {\n        var start = pos;\n        if (text.charCodeAt(pos) === 48 /* CharacterCodes._0 */) {\n            pos++;\n        }\n        else {\n            pos++;\n            while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n            }\n        }\n        if (pos < text.length && text.charCodeAt(pos) === 46 /* CharacterCodes.dot */) {\n            pos++;\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n            }\n            else {\n                scanError = 3 /* ScanError.UnexpectedEndOfNumber */;\n                return text.substring(start, pos);\n            }\n        }\n        var end = pos;\n        if (pos < text.length && (text.charCodeAt(pos) === 69 /* CharacterCodes.E */ || text.charCodeAt(pos) === 101 /* CharacterCodes.e */)) {\n            pos++;\n            if (pos < text.length && text.charCodeAt(pos) === 43 /* CharacterCodes.plus */ || text.charCodeAt(pos) === 45 /* CharacterCodes.minus */) {\n                pos++;\n            }\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n                end = pos;\n            }\n            else {\n                scanError = 3 /* ScanError.UnexpectedEndOfNumber */;\n            }\n        }\n        return text.substring(start, end);\n    }\n    function scanString() {\n        var result = '', start = pos;\n        while (true) {\n            if (pos >= len) {\n                result += text.substring(start, pos);\n                scanError = 2 /* ScanError.UnexpectedEndOfString */;\n                break;\n            }\n            var ch = text.charCodeAt(pos);\n            if (ch === 34 /* CharacterCodes.doubleQuote */) {\n                result += text.substring(start, pos);\n                pos++;\n                break;\n            }\n            if (ch === 92 /* CharacterCodes.backslash */) {\n                result += text.substring(start, pos);\n                pos++;\n                if (pos >= len) {\n                    scanError = 2 /* ScanError.UnexpectedEndOfString */;\n                    break;\n                }\n                var ch2 = text.charCodeAt(pos++);\n                switch (ch2) {\n                    case 34 /* CharacterCodes.doubleQuote */:\n                        result += '\\\"';\n                        break;\n                    case 92 /* CharacterCodes.backslash */:\n                        result += '\\\\';\n                        break;\n                    case 47 /* CharacterCodes.slash */:\n                        result += '/';\n                        break;\n                    case 98 /* CharacterCodes.b */:\n                        result += '\\b';\n                        break;\n                    case 102 /* CharacterCodes.f */:\n                        result += '\\f';\n                        break;\n                    case 110 /* CharacterCodes.n */:\n                        result += '\\n';\n                        break;\n                    case 114 /* CharacterCodes.r */:\n                        result += '\\r';\n                        break;\n                    case 116 /* CharacterCodes.t */:\n                        result += '\\t';\n                        break;\n                    case 117 /* CharacterCodes.u */:\n                        var ch3 = scanHexDigits(4, true);\n                        if (ch3 >= 0) {\n                            result += String.fromCharCode(ch3);\n                        }\n                        else {\n                            scanError = 4 /* ScanError.InvalidUnicode */;\n                        }\n                        break;\n                    default:\n                        scanError = 5 /* ScanError.InvalidEscapeCharacter */;\n                }\n                start = pos;\n                continue;\n            }\n            if (ch >= 0 && ch <= 0x1f) {\n                if (isLineBreak(ch)) {\n                    result += text.substring(start, pos);\n                    scanError = 2 /* ScanError.UnexpectedEndOfString */;\n                    break;\n                }\n                else {\n                    scanError = 6 /* ScanError.InvalidCharacter */;\n                    // mark as error but continue with string\n                }\n            }\n            pos++;\n        }\n        return result;\n    }\n    function scanNext() {\n        value = '';\n        scanError = 0 /* ScanError.None */;\n        tokenOffset = pos;\n        lineStartOffset = lineNumber;\n        prevTokenLineStartOffset = tokenLineStartOffset;\n        if (pos >= len) {\n            // at the end\n            tokenOffset = len;\n            return token = 17 /* SyntaxKind.EOF */;\n        }\n        var code = text.charCodeAt(pos);\n        // trivia: whitespace\n        if (isWhiteSpace(code)) {\n            do {\n                pos++;\n                value += String.fromCharCode(code);\n                code = text.charCodeAt(pos);\n            } while (isWhiteSpace(code));\n            return token = 15 /* SyntaxKind.Trivia */;\n        }\n        // trivia: newlines\n        if (isLineBreak(code)) {\n            pos++;\n            value += String.fromCharCode(code);\n            if (code === 13 /* CharacterCodes.carriageReturn */ && text.charCodeAt(pos) === 10 /* CharacterCodes.lineFeed */) {\n                pos++;\n                value += '\\n';\n            }\n            lineNumber++;\n            tokenLineStartOffset = pos;\n            return token = 14 /* SyntaxKind.LineBreakTrivia */;\n        }\n        switch (code) {\n            // tokens: []{}:,\n            case 123 /* CharacterCodes.openBrace */:\n                pos++;\n                return token = 1 /* SyntaxKind.OpenBraceToken */;\n            case 125 /* CharacterCodes.closeBrace */:\n                pos++;\n                return token = 2 /* SyntaxKind.CloseBraceToken */;\n            case 91 /* CharacterCodes.openBracket */:\n                pos++;\n                return token = 3 /* SyntaxKind.OpenBracketToken */;\n            case 93 /* CharacterCodes.closeBracket */:\n                pos++;\n                return token = 4 /* SyntaxKind.CloseBracketToken */;\n            case 58 /* CharacterCodes.colon */:\n                pos++;\n                return token = 6 /* SyntaxKind.ColonToken */;\n            case 44 /* CharacterCodes.comma */:\n                pos++;\n                return token = 5 /* SyntaxKind.CommaToken */;\n            // strings\n            case 34 /* CharacterCodes.doubleQuote */:\n                pos++;\n                value = scanString();\n                return token = 10 /* SyntaxKind.StringLiteral */;\n            // comments\n            case 47 /* CharacterCodes.slash */:\n                var start = pos - 1;\n                // Single-line comment\n                if (text.charCodeAt(pos + 1) === 47 /* CharacterCodes.slash */) {\n                    pos += 2;\n                    while (pos < len) {\n                        if (isLineBreak(text.charCodeAt(pos))) {\n                            break;\n                        }\n                        pos++;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 12 /* SyntaxKind.LineCommentTrivia */;\n                }\n                // Multi-line comment\n                if (text.charCodeAt(pos + 1) === 42 /* CharacterCodes.asterisk */) {\n                    pos += 2;\n                    var safeLength = len - 1; // For lookahead.\n                    var commentClosed = false;\n                    while (pos < safeLength) {\n                        var ch = text.charCodeAt(pos);\n                        if (ch === 42 /* CharacterCodes.asterisk */ && text.charCodeAt(pos + 1) === 47 /* CharacterCodes.slash */) {\n                            pos += 2;\n                            commentClosed = true;\n                            break;\n                        }\n                        pos++;\n                        if (isLineBreak(ch)) {\n                            if (ch === 13 /* CharacterCodes.carriageReturn */ && text.charCodeAt(pos) === 10 /* CharacterCodes.lineFeed */) {\n                                pos++;\n                            }\n                            lineNumber++;\n                            tokenLineStartOffset = pos;\n                        }\n                    }\n                    if (!commentClosed) {\n                        pos++;\n                        scanError = 1 /* ScanError.UnexpectedEndOfComment */;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 13 /* SyntaxKind.BlockCommentTrivia */;\n                }\n                // just a single slash\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* SyntaxKind.Unknown */;\n            // numbers\n            case 45 /* CharacterCodes.minus */:\n                value += String.fromCharCode(code);\n                pos++;\n                if (pos === len || !isDigit(text.charCodeAt(pos))) {\n                    return token = 16 /* SyntaxKind.Unknown */;\n                }\n            // found a minus, followed by a number so\n            // we fall through to proceed with scanning\n            // numbers\n            case 48 /* CharacterCodes._0 */:\n            case 49 /* CharacterCodes._1 */:\n            case 50 /* CharacterCodes._2 */:\n            case 51 /* CharacterCodes._3 */:\n            case 52 /* CharacterCodes._4 */:\n            case 53 /* CharacterCodes._5 */:\n            case 54 /* CharacterCodes._6 */:\n            case 55 /* CharacterCodes._7 */:\n            case 56 /* CharacterCodes._8 */:\n            case 57 /* CharacterCodes._9 */:\n                value += scanNumber();\n                return token = 11 /* SyntaxKind.NumericLiteral */;\n            // literals and unknown symbols\n            default:\n                // is a literal? Read the full word.\n                while (pos < len && isUnknownContentCharacter(code)) {\n                    pos++;\n                    code = text.charCodeAt(pos);\n                }\n                if (tokenOffset !== pos) {\n                    value = text.substring(tokenOffset, pos);\n                    // keywords: true, false, null\n                    switch (value) {\n                        case 'true': return token = 8 /* SyntaxKind.TrueKeyword */;\n                        case 'false': return token = 9 /* SyntaxKind.FalseKeyword */;\n                        case 'null': return token = 7 /* SyntaxKind.NullKeyword */;\n                    }\n                    return token = 16 /* SyntaxKind.Unknown */;\n                }\n                // some\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* SyntaxKind.Unknown */;\n        }\n    }\n    function isUnknownContentCharacter(code) {\n        if (isWhiteSpace(code) || isLineBreak(code)) {\n            return false;\n        }\n        switch (code) {\n            case 125 /* CharacterCodes.closeBrace */:\n            case 93 /* CharacterCodes.closeBracket */:\n            case 123 /* CharacterCodes.openBrace */:\n            case 91 /* CharacterCodes.openBracket */:\n            case 34 /* CharacterCodes.doubleQuote */:\n            case 58 /* CharacterCodes.colon */:\n            case 44 /* CharacterCodes.comma */:\n            case 47 /* CharacterCodes.slash */:\n                return false;\n        }\n        return true;\n    }\n    function scanNextNonTrivia() {\n        var result;\n        do {\n            result = scanNext();\n        } while (result >= 12 /* SyntaxKind.LineCommentTrivia */ && result <= 15 /* SyntaxKind.Trivia */);\n        return result;\n    }\n    return {\n        setPosition: setPosition,\n        getPosition: function () { return pos; },\n        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n        getToken: function () { return token; },\n        getTokenValue: function () { return value; },\n        getTokenOffset: function () { return tokenOffset; },\n        getTokenLength: function () { return pos - tokenOffset; },\n        getTokenStartLine: function () { return lineStartOffset; },\n        getTokenStartCharacter: function () { return tokenOffset - prevTokenLineStartOffset; },\n        getTokenError: function () { return scanError; },\n    };\n}\nfunction isWhiteSpace(ch) {\n    return ch === 32 /* CharacterCodes.space */ || ch === 9 /* CharacterCodes.tab */;\n}\nfunction isLineBreak(ch) {\n    return ch === 10 /* CharacterCodes.lineFeed */ || ch === 13 /* CharacterCodes.carriageReturn */;\n}\nfunction isDigit(ch) {\n    return ch >= 48 /* CharacterCodes._0 */ && ch <= 57 /* CharacterCodes._9 */;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}