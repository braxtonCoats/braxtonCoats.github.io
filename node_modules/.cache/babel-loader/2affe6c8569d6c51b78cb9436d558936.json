{"ast":null,"code":"/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n/**\n * Add a custom filter to the style dictionary\n * @static\n * @memberof module:style-dictionary\n * @param {Object} filter\n * @param {String} filter.name - Name of the filter to be referenced in your config.json\n * @param {Function} filter.matcher - Matcher function, return boolean if the token should be included.\n * @returns {module:style-dictionary}\n * @example\n * ```js\n * StyleDictionary.registerFilter({\n *   name: 'isColor',\n *   matcher: function(token) {\n  *     return token.attributes.category === 'color';\n  *   }\n * })\n * ```\n */\nfunction registerFilter(options) {\n  if (typeof options.name !== 'string') throw new Error('Can\\'t register filter; filter.name must be a string');\n  if (typeof options.matcher !== 'function') throw new Error('Can\\'t register filter; filter.matcher must be a function');\n  this.filter[options.name] = options.matcher;\n  return this;\n}\n\nmodule.exports = registerFilter;","map":{"version":3,"names":["registerFilter","options","name","Error","matcher","filter","module","exports"],"sources":["/Users/braxtoncoats/Github/bcd/node_modules/style-dictionary/lib/register/filter.js"],"sourcesContent":["/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n/**\n * Add a custom filter to the style dictionary\n * @static\n * @memberof module:style-dictionary\n * @param {Object} filter\n * @param {String} filter.name - Name of the filter to be referenced in your config.json\n * @param {Function} filter.matcher - Matcher function, return boolean if the token should be included.\n * @returns {module:style-dictionary}\n * @example\n * ```js\n * StyleDictionary.registerFilter({\n *   name: 'isColor',\n *   matcher: function(token) {\n  *     return token.attributes.category === 'color';\n  *   }\n * })\n * ```\n */\nfunction registerFilter(options) {\n  if (typeof options.name !== 'string')\n    throw new Error('Can\\'t register filter; filter.name must be a string');\n  if (typeof options.matcher !== 'function')\n    throw new Error('Can\\'t register filter; filter.matcher must be a function');\n\n  this.filter[options.name] = options.matcher;\n\n  return this;\n}\n\nmodule.exports = registerFilter;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAT,CAAwBC,OAAxB,EAAiC;EAC/B,IAAI,OAAOA,OAAO,CAACC,IAAf,KAAwB,QAA5B,EACE,MAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;EACF,IAAI,OAAOF,OAAO,CAACG,OAAf,KAA2B,UAA/B,EACE,MAAM,IAAID,KAAJ,CAAU,2DAAV,CAAN;EAEF,KAAKE,MAAL,CAAYJ,OAAO,CAACC,IAApB,IAA4BD,OAAO,CAACG,OAApC;EAEA,OAAO,IAAP;AACD;;AAEDE,MAAM,CAACC,OAAP,GAAiBP,cAAjB"},"metadata":{},"sourceType":"script"}