{"ast":null,"code":"/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nconst buildFile = require('./buildFile');\n/**\n * Takes a platform config object and a dictionary\n * object and builds all the files. Dictionary object\n * should have been transformed and resolved before this\n * point.\n * @memberOf StyleDictionary\n * @param {Object} dictionary\n * @param {Object} platform\n * @returns {null}\n */\n\n\nfunction buildFiles(dictionary, platform) {\n  if (platform.buildPath && platform.buildPath.slice(-1) !== '/' && platform.buildPath.slice(-1) !== '\\\\') {\n    throw new Error('Build path must end in a trailing slash or you will get weird file names.');\n  }\n\n  platform.files.forEach(function (file) {\n    if (file.format) {\n      buildFile(file, platform, dictionary);\n    } else {\n      throw new Error('Please supply a format');\n    }\n  });\n}\n\nmodule.exports = buildFiles;","map":{"version":3,"names":["buildFile","require","buildFiles","dictionary","platform","buildPath","slice","Error","files","forEach","file","format","module","exports"],"sources":["/Users/braxtoncoats/Github/bcd/node_modules/style-dictionary/lib/buildFiles.js"],"sourcesContent":["/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nconst buildFile = require('./buildFile');\n\n/**\n * Takes a platform config object and a dictionary\n * object and builds all the files. Dictionary object\n * should have been transformed and resolved before this\n * point.\n * @memberOf StyleDictionary\n * @param {Object} dictionary\n * @param {Object} platform\n * @returns {null}\n */\nfunction buildFiles(dictionary, platform) {\n  if (platform.buildPath && (platform.buildPath.slice(-1) !== '/' && platform.buildPath.slice(-1) !== '\\\\')) {\n    throw new Error('Build path must end in a trailing slash or you will get weird file names.')\n  }\n\n  platform.files.forEach(function (file) {\n    if (file.format) {\n      buildFile(file, platform, dictionary);\n    } else {\n      throw new Error('Please supply a format');\n    }\n  });\n}\n\n\nmodule.exports = buildFiles;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,CAAoBC,UAApB,EAAgCC,QAAhC,EAA0C;EACxC,IAAIA,QAAQ,CAACC,SAAT,IAAuBD,QAAQ,CAACC,SAAT,CAAmBC,KAAnB,CAAyB,CAAC,CAA1B,MAAiC,GAAjC,IAAwCF,QAAQ,CAACC,SAAT,CAAmBC,KAAnB,CAAyB,CAAC,CAA1B,MAAiC,IAApG,EAA2G;IACzG,MAAM,IAAIC,KAAJ,CAAU,2EAAV,CAAN;EACD;;EAEDH,QAAQ,CAACI,KAAT,CAAeC,OAAf,CAAuB,UAAUC,IAAV,EAAgB;IACrC,IAAIA,IAAI,CAACC,MAAT,EAAiB;MACfX,SAAS,CAACU,IAAD,EAAON,QAAP,EAAiBD,UAAjB,CAAT;IACD,CAFD,MAEO;MACL,MAAM,IAAII,KAAJ,CAAU,wBAAV,CAAN;IACD;EACF,CAND;AAOD;;AAGDK,MAAM,CAACC,OAAP,GAAiBX,UAAjB"},"metadata":{},"sourceType":"script"}