{"ast":null,"code":"/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n/**\n * Outputs an object with swift format configurations. Sets import, object type and access control.\n * @memberof module:formatHelpers\n * @param {Object} options - The options object declared at configuration\n * @param {String} objectType - The type of the object in the final file. Could be a class, enum, struct, etc.\n * @param {String} transformGroup - The transformGroup of the file, so it can be applied proper import\n * @returns {Object}\n */\nfunction setSwiftFileProperties(options, objectType, transformGroup) {\n  if (typeof options.objectType === 'undefined') {\n    if (typeof objectType === 'undefined') {\n      options.objectType = 'class';\n    } else {\n      options.objectType = objectType;\n    }\n  }\n\n  if (typeof options.import === 'undefined') {\n    if (typeof transformGroup === 'undefined') {\n      options.import = ['UIKit'];\n    } else if (['ios-swift', 'ios-swift-separate'].includes(transformGroup)) {\n      options.import = ['UIKit'];\n    } else {\n      // future swift-ui transformGroup to be added here\n      options.import = ['SwiftUI'];\n    }\n  } else if (typeof options.import === 'string') {\n    options.import = [options.import];\n  }\n\n  if (typeof options.accessControl === 'undefined') {\n    options.accessControl = 'public ';\n  } else {\n    if (options.accessControl !== \"\") {\n      options.accessControl = `${options.accessControl} `;\n    }\n  }\n\n  return options;\n}\n\nmodule.exports = setSwiftFileProperties;","map":{"version":3,"names":["setSwiftFileProperties","options","objectType","transformGroup","import","includes","accessControl","module","exports"],"sources":["/Users/braxtoncoats/Github/bcd/node_modules/style-dictionary/lib/common/formatHelpers/setSwiftFileProperties.js"],"sourcesContent":["/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n/**\n * Outputs an object with swift format configurations. Sets import, object type and access control.\n * @memberof module:formatHelpers\n * @param {Object} options - The options object declared at configuration\n * @param {String} objectType - The type of the object in the final file. Could be a class, enum, struct, etc.\n * @param {String} transformGroup - The transformGroup of the file, so it can be applied proper import\n * @returns {Object}\n */\nfunction setSwiftFileProperties(options, objectType, transformGroup) {\n  if (typeof options.objectType === 'undefined') {\n    if (typeof objectType === 'undefined') {\n      options.objectType = 'class';\n    } else {\n      options.objectType = objectType;\n    }\n  }\n\n  if (typeof options.import === 'undefined') {\n    if (typeof transformGroup === 'undefined') {\n      options.import = ['UIKit'];\n    } else if (['ios-swift', 'ios-swift-separate'].includes(transformGroup)) {\n      options.import = ['UIKit'];\n    } else {\n      // future swift-ui transformGroup to be added here\n      options.import = ['SwiftUI'];\n    }\n  } else if (typeof options.import === 'string') {\n    options.import = [options.import];\n  }\n\n  if (typeof options.accessControl === 'undefined') {\n    options.accessControl = 'public ';\n  } else {\n    if (options.accessControl !== \"\") {\n      options.accessControl = `${options.accessControl} `;\n    }\n  }\n\n  return options\n}\n\nmodule.exports = setSwiftFileProperties;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,sBAAT,CAAgCC,OAAhC,EAAyCC,UAAzC,EAAqDC,cAArD,EAAqE;EACnE,IAAI,OAAOF,OAAO,CAACC,UAAf,KAA8B,WAAlC,EAA+C;IAC7C,IAAI,OAAOA,UAAP,KAAsB,WAA1B,EAAuC;MACrCD,OAAO,CAACC,UAAR,GAAqB,OAArB;IACD,CAFD,MAEO;MACLD,OAAO,CAACC,UAAR,GAAqBA,UAArB;IACD;EACF;;EAED,IAAI,OAAOD,OAAO,CAACG,MAAf,KAA0B,WAA9B,EAA2C;IACzC,IAAI,OAAOD,cAAP,KAA0B,WAA9B,EAA2C;MACzCF,OAAO,CAACG,MAAR,GAAiB,CAAC,OAAD,CAAjB;IACD,CAFD,MAEO,IAAI,CAAC,WAAD,EAAc,oBAAd,EAAoCC,QAApC,CAA6CF,cAA7C,CAAJ,EAAkE;MACvEF,OAAO,CAACG,MAAR,GAAiB,CAAC,OAAD,CAAjB;IACD,CAFM,MAEA;MACL;MACAH,OAAO,CAACG,MAAR,GAAiB,CAAC,SAAD,CAAjB;IACD;EACF,CATD,MASO,IAAI,OAAOH,OAAO,CAACG,MAAf,KAA0B,QAA9B,EAAwC;IAC7CH,OAAO,CAACG,MAAR,GAAiB,CAACH,OAAO,CAACG,MAAT,CAAjB;EACD;;EAED,IAAI,OAAOH,OAAO,CAACK,aAAf,KAAiC,WAArC,EAAkD;IAChDL,OAAO,CAACK,aAAR,GAAwB,SAAxB;EACD,CAFD,MAEO;IACL,IAAIL,OAAO,CAACK,aAAR,KAA0B,EAA9B,EAAkC;MAChCL,OAAO,CAACK,aAAR,GAAyB,GAAEL,OAAO,CAACK,aAAc,GAAjD;IACD;EACF;;EAED,OAAOL,OAAP;AACD;;AAEDM,MAAM,CAACC,OAAP,GAAiBR,sBAAjB"},"metadata":{},"sourceType":"script"}