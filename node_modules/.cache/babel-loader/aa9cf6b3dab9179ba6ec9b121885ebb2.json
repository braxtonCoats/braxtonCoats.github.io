{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { createScanner } from './scanner';\nexport function format(documentText, range, options) {\n  var initialIndentLevel;\n  var formatText;\n  var formatTextStart;\n  var rangeStart;\n  var rangeEnd;\n\n  if (range) {\n    rangeStart = range.offset;\n    rangeEnd = rangeStart + range.length;\n    formatTextStart = rangeStart;\n\n    while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n      formatTextStart--;\n    }\n\n    var endOffset = rangeEnd;\n\n    while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n      endOffset++;\n    }\n\n    formatText = documentText.substring(formatTextStart, endOffset);\n    initialIndentLevel = computeIndentLevel(formatText, options);\n  } else {\n    formatText = documentText;\n    initialIndentLevel = 0;\n    formatTextStart = 0;\n    rangeStart = 0;\n    rangeEnd = documentText.length;\n  }\n\n  var eol = getEOL(options, documentText);\n  var numberLineBreaks = 0;\n  var indentLevel = 0;\n  var indentValue;\n\n  if (options.insertSpaces) {\n    indentValue = repeat(' ', options.tabSize || 4);\n  } else {\n    indentValue = '\\t';\n  }\n\n  var scanner = createScanner(formatText, false);\n  var hasError = false;\n\n  function newLinesAndIndent() {\n    if (numberLineBreaks > 1) {\n      return repeat(eol, numberLineBreaks) + repeat(indentValue, initialIndentLevel + indentLevel);\n    } else {\n      return eol + repeat(indentValue, initialIndentLevel + indentLevel);\n    }\n  }\n\n  function scanNext() {\n    var token = scanner.scan();\n    numberLineBreaks = 0;\n\n    while (token === 15\n    /* SyntaxKind.Trivia */\n    || token === 14\n    /* SyntaxKind.LineBreakTrivia */\n    ) {\n      if (token === 14\n      /* SyntaxKind.LineBreakTrivia */\n      && options.keepLines) {\n        numberLineBreaks += 1;\n      } else if (token === 14\n      /* SyntaxKind.LineBreakTrivia */\n      ) {\n        numberLineBreaks = 1;\n      }\n\n      token = scanner.scan();\n    }\n\n    hasError = token === 16\n    /* SyntaxKind.Unknown */\n    || scanner.getTokenError() !== 0\n    /* ScanError.None */\n    ;\n    return token;\n  }\n\n  var editOperations = [];\n\n  function addEdit(text, startOffset, endOffset) {\n    if (!hasError && (!range || startOffset < rangeEnd && endOffset > rangeStart) && documentText.substring(startOffset, endOffset) !== text) {\n      editOperations.push({\n        offset: startOffset,\n        length: endOffset - startOffset,\n        content: text\n      });\n    }\n  }\n\n  var firstToken = scanNext();\n\n  if (options.keepLines && numberLineBreaks > 0) {\n    addEdit(repeat(eol, numberLineBreaks), 0, 0);\n  }\n\n  if (firstToken !== 17\n  /* SyntaxKind.EOF */\n  ) {\n    var firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n    var initialIndent = repeat(indentValue, initialIndentLevel);\n    addEdit(initialIndent, formatTextStart, firstTokenStart);\n  }\n\n  while (firstToken !== 17\n  /* SyntaxKind.EOF */\n  ) {\n    var firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n    var secondToken = scanNext();\n    var replaceContent = '';\n    var needsLineBreak = false;\n\n    while (numberLineBreaks === 0 && (secondToken === 12\n    /* SyntaxKind.LineCommentTrivia */\n    || secondToken === 13\n    /* SyntaxKind.BlockCommentTrivia */\n    )) {\n      var commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n      addEdit(' ', firstTokenEnd, commentTokenStart);\n      firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n      needsLineBreak = secondToken === 12\n      /* SyntaxKind.LineCommentTrivia */\n      ;\n      replaceContent = needsLineBreak ? newLinesAndIndent() : '';\n      secondToken = scanNext();\n    }\n\n    if (secondToken === 2\n    /* SyntaxKind.CloseBraceToken */\n    ) {\n      if (firstToken !== 1\n      /* SyntaxKind.OpenBraceToken */\n      ) {\n        indentLevel--;\n      }\n\n      ;\n\n      if (options.keepLines && numberLineBreaks > 0 || !options.keepLines && firstToken !== 1\n      /* SyntaxKind.OpenBraceToken */\n      ) {\n        replaceContent = newLinesAndIndent();\n      } else if (options.keepLines) {\n        replaceContent = ' ';\n      }\n    } else if (secondToken === 4\n    /* SyntaxKind.CloseBracketToken */\n    ) {\n      if (firstToken !== 3\n      /* SyntaxKind.OpenBracketToken */\n      ) {\n        indentLevel--;\n      }\n\n      ;\n\n      if (options.keepLines && numberLineBreaks > 0 || !options.keepLines && firstToken !== 3\n      /* SyntaxKind.OpenBracketToken */\n      ) {\n        replaceContent = newLinesAndIndent();\n      } else if (options.keepLines) {\n        replaceContent = ' ';\n      }\n    } else {\n      switch (firstToken) {\n        case 3\n        /* SyntaxKind.OpenBracketToken */\n        :\n        case 1\n        /* SyntaxKind.OpenBraceToken */\n        :\n          indentLevel++;\n\n          if (options.keepLines && numberLineBreaks > 0 || !options.keepLines) {\n            replaceContent = newLinesAndIndent();\n          } else {\n            replaceContent = ' ';\n          }\n\n          break;\n\n        case 5\n        /* SyntaxKind.CommaToken */\n        :\n          if (options.keepLines && numberLineBreaks > 0 || !options.keepLines) {\n            replaceContent = newLinesAndIndent();\n          } else {\n            replaceContent = ' ';\n          }\n\n          break;\n\n        case 12\n        /* SyntaxKind.LineCommentTrivia */\n        :\n          replaceContent = newLinesAndIndent();\n          break;\n\n        case 13\n        /* SyntaxKind.BlockCommentTrivia */\n        :\n          if (numberLineBreaks > 0) {\n            replaceContent = newLinesAndIndent();\n          } else if (!needsLineBreak) {\n            replaceContent = ' ';\n          }\n\n          break;\n\n        case 6\n        /* SyntaxKind.ColonToken */\n        :\n          if (options.keepLines && numberLineBreaks > 0) {\n            replaceContent = newLinesAndIndent();\n          } else if (!needsLineBreak) {\n            replaceContent = ' ';\n          }\n\n          break;\n\n        case 10\n        /* SyntaxKind.StringLiteral */\n        :\n          if (options.keepLines && numberLineBreaks > 0) {\n            replaceContent = newLinesAndIndent();\n          } else if (secondToken === 6\n          /* SyntaxKind.ColonToken */\n          && !needsLineBreak) {\n            replaceContent = '';\n          }\n\n          break;\n\n        case 7\n        /* SyntaxKind.NullKeyword */\n        :\n        case 8\n        /* SyntaxKind.TrueKeyword */\n        :\n        case 9\n        /* SyntaxKind.FalseKeyword */\n        :\n        case 11\n        /* SyntaxKind.NumericLiteral */\n        :\n        case 2\n        /* SyntaxKind.CloseBraceToken */\n        :\n        case 4\n        /* SyntaxKind.CloseBracketToken */\n        :\n          if (options.keepLines && numberLineBreaks > 0) {\n            replaceContent = newLinesAndIndent();\n          } else {\n            if ((secondToken === 12\n            /* SyntaxKind.LineCommentTrivia */\n            || secondToken === 13\n            /* SyntaxKind.BlockCommentTrivia */\n            ) && !needsLineBreak) {\n              replaceContent = ' ';\n            } else if (secondToken !== 5\n            /* SyntaxKind.CommaToken */\n            && secondToken !== 17\n            /* SyntaxKind.EOF */\n            ) {\n              hasError = true;\n            }\n          }\n\n          break;\n\n        case 16\n        /* SyntaxKind.Unknown */\n        :\n          hasError = true;\n          break;\n      }\n\n      if (numberLineBreaks > 0 && (secondToken === 12\n      /* SyntaxKind.LineCommentTrivia */\n      || secondToken === 13\n      /* SyntaxKind.BlockCommentTrivia */\n      )) {\n        replaceContent = newLinesAndIndent();\n      }\n    }\n\n    if (secondToken === 17\n    /* SyntaxKind.EOF */\n    ) {\n      if (options.keepLines && numberLineBreaks > 0) {\n        replaceContent = newLinesAndIndent();\n      } else {\n        replaceContent = options.insertFinalNewline ? eol : '';\n      }\n    }\n\n    var secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n    addEdit(replaceContent, firstTokenEnd, secondTokenStart);\n    firstToken = secondToken;\n  }\n\n  return editOperations;\n}\n\nfunction repeat(s, count) {\n  var result = '';\n\n  for (var i = 0; i < count; i++) {\n    result += s;\n  }\n\n  return result;\n}\n\nfunction computeIndentLevel(content, options) {\n  var i = 0;\n  var nChars = 0;\n  var tabSize = options.tabSize || 4;\n\n  while (i < content.length) {\n    var ch = content.charAt(i);\n\n    if (ch === ' ') {\n      nChars++;\n    } else if (ch === '\\t') {\n      nChars += tabSize;\n    } else {\n      break;\n    }\n\n    i++;\n  }\n\n  return Math.floor(nChars / tabSize);\n}\n\nfunction getEOL(options, text) {\n  for (var i = 0; i < text.length; i++) {\n    var ch = text.charAt(i);\n\n    if (ch === '\\r') {\n      if (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n        return '\\r\\n';\n      }\n\n      return '\\r';\n    } else if (ch === '\\n') {\n      return '\\n';\n    }\n  }\n\n  return options && options.eol || '\\n';\n}\n\nexport function isEOL(text, offset) {\n  return '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n}","map":{"version":3,"names":["createScanner","format","documentText","range","options","initialIndentLevel","formatText","formatTextStart","rangeStart","rangeEnd","offset","length","isEOL","endOffset","substring","computeIndentLevel","eol","getEOL","numberLineBreaks","indentLevel","indentValue","insertSpaces","repeat","tabSize","scanner","hasError","newLinesAndIndent","scanNext","token","scan","keepLines","getTokenError","editOperations","addEdit","text","startOffset","push","content","firstToken","firstTokenStart","getTokenOffset","initialIndent","firstTokenEnd","getTokenLength","secondToken","replaceContent","needsLineBreak","commentTokenStart","insertFinalNewline","secondTokenStart","s","count","result","i","nChars","ch","charAt","Math","floor","indexOf"],"sources":["/Users/braxtoncoats/Github/bcd/node_modules/jsonc-parser/lib/esm/impl/format.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner';\nexport function format(documentText, range, options) {\n    var initialIndentLevel;\n    var formatText;\n    var formatTextStart;\n    var rangeStart;\n    var rangeEnd;\n    if (range) {\n        rangeStart = range.offset;\n        rangeEnd = rangeStart + range.length;\n        formatTextStart = rangeStart;\n        while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n            formatTextStart--;\n        }\n        var endOffset = rangeEnd;\n        while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n            endOffset++;\n        }\n        formatText = documentText.substring(formatTextStart, endOffset);\n        initialIndentLevel = computeIndentLevel(formatText, options);\n    }\n    else {\n        formatText = documentText;\n        initialIndentLevel = 0;\n        formatTextStart = 0;\n        rangeStart = 0;\n        rangeEnd = documentText.length;\n    }\n    var eol = getEOL(options, documentText);\n    var numberLineBreaks = 0;\n    var indentLevel = 0;\n    var indentValue;\n    if (options.insertSpaces) {\n        indentValue = repeat(' ', options.tabSize || 4);\n    }\n    else {\n        indentValue = '\\t';\n    }\n    var scanner = createScanner(formatText, false);\n    var hasError = false;\n    function newLinesAndIndent() {\n        if (numberLineBreaks > 1) {\n            return repeat(eol, numberLineBreaks) + repeat(indentValue, initialIndentLevel + indentLevel);\n        }\n        else {\n            return eol + repeat(indentValue, initialIndentLevel + indentLevel);\n        }\n    }\n    function scanNext() {\n        var token = scanner.scan();\n        numberLineBreaks = 0;\n        while (token === 15 /* SyntaxKind.Trivia */ || token === 14 /* SyntaxKind.LineBreakTrivia */) {\n            if (token === 14 /* SyntaxKind.LineBreakTrivia */ && options.keepLines) {\n                numberLineBreaks += 1;\n            }\n            else if (token === 14 /* SyntaxKind.LineBreakTrivia */) {\n                numberLineBreaks = 1;\n            }\n            token = scanner.scan();\n        }\n        hasError = token === 16 /* SyntaxKind.Unknown */ || scanner.getTokenError() !== 0 /* ScanError.None */;\n        return token;\n    }\n    var editOperations = [];\n    function addEdit(text, startOffset, endOffset) {\n        if (!hasError && (!range || (startOffset < rangeEnd && endOffset > rangeStart)) && documentText.substring(startOffset, endOffset) !== text) {\n            editOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });\n        }\n    }\n    var firstToken = scanNext();\n    if (options.keepLines && numberLineBreaks > 0) {\n        addEdit(repeat(eol, numberLineBreaks), 0, 0);\n    }\n    if (firstToken !== 17 /* SyntaxKind.EOF */) {\n        var firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n        var initialIndent = repeat(indentValue, initialIndentLevel);\n        addEdit(initialIndent, formatTextStart, firstTokenStart);\n    }\n    while (firstToken !== 17 /* SyntaxKind.EOF */) {\n        var firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n        var secondToken = scanNext();\n        var replaceContent = '';\n        var needsLineBreak = false;\n        while (numberLineBreaks === 0 && (secondToken === 12 /* SyntaxKind.LineCommentTrivia */ || secondToken === 13 /* SyntaxKind.BlockCommentTrivia */)) {\n            var commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n            addEdit(' ', firstTokenEnd, commentTokenStart);\n            firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n            needsLineBreak = secondToken === 12 /* SyntaxKind.LineCommentTrivia */;\n            replaceContent = needsLineBreak ? newLinesAndIndent() : '';\n            secondToken = scanNext();\n        }\n        if (secondToken === 2 /* SyntaxKind.CloseBraceToken */) {\n            if (firstToken !== 1 /* SyntaxKind.OpenBraceToken */) {\n                indentLevel--;\n            }\n            ;\n            if (options.keepLines && numberLineBreaks > 0 || !options.keepLines && firstToken !== 1 /* SyntaxKind.OpenBraceToken */) {\n                replaceContent = newLinesAndIndent();\n            }\n            else if (options.keepLines) {\n                replaceContent = ' ';\n            }\n        }\n        else if (secondToken === 4 /* SyntaxKind.CloseBracketToken */) {\n            if (firstToken !== 3 /* SyntaxKind.OpenBracketToken */) {\n                indentLevel--;\n            }\n            ;\n            if (options.keepLines && numberLineBreaks > 0 || !options.keepLines && firstToken !== 3 /* SyntaxKind.OpenBracketToken */) {\n                replaceContent = newLinesAndIndent();\n            }\n            else if (options.keepLines) {\n                replaceContent = ' ';\n            }\n        }\n        else {\n            switch (firstToken) {\n                case 3 /* SyntaxKind.OpenBracketToken */:\n                case 1 /* SyntaxKind.OpenBraceToken */:\n                    indentLevel++;\n                    if (options.keepLines && numberLineBreaks > 0 || !options.keepLines) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else {\n                        replaceContent = ' ';\n                    }\n                    break;\n                case 5 /* SyntaxKind.CommaToken */:\n                    if (options.keepLines && numberLineBreaks > 0 || !options.keepLines) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else {\n                        replaceContent = ' ';\n                    }\n                    break;\n                case 12 /* SyntaxKind.LineCommentTrivia */:\n                    replaceContent = newLinesAndIndent();\n                    break;\n                case 13 /* SyntaxKind.BlockCommentTrivia */:\n                    if (numberLineBreaks > 0) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else if (!needsLineBreak) {\n                        replaceContent = ' ';\n                    }\n                    break;\n                case 6 /* SyntaxKind.ColonToken */:\n                    if (options.keepLines && numberLineBreaks > 0) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else if (!needsLineBreak) {\n                        replaceContent = ' ';\n                    }\n                    break;\n                case 10 /* SyntaxKind.StringLiteral */:\n                    if (options.keepLines && numberLineBreaks > 0) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else if (secondToken === 6 /* SyntaxKind.ColonToken */ && !needsLineBreak) {\n                        replaceContent = '';\n                    }\n                    break;\n                case 7 /* SyntaxKind.NullKeyword */:\n                case 8 /* SyntaxKind.TrueKeyword */:\n                case 9 /* SyntaxKind.FalseKeyword */:\n                case 11 /* SyntaxKind.NumericLiteral */:\n                case 2 /* SyntaxKind.CloseBraceToken */:\n                case 4 /* SyntaxKind.CloseBracketToken */:\n                    if (options.keepLines && numberLineBreaks > 0) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else {\n                        if ((secondToken === 12 /* SyntaxKind.LineCommentTrivia */ || secondToken === 13 /* SyntaxKind.BlockCommentTrivia */) && !needsLineBreak) {\n                            replaceContent = ' ';\n                        }\n                        else if (secondToken !== 5 /* SyntaxKind.CommaToken */ && secondToken !== 17 /* SyntaxKind.EOF */) {\n                            hasError = true;\n                        }\n                    }\n                    break;\n                case 16 /* SyntaxKind.Unknown */:\n                    hasError = true;\n                    break;\n            }\n            if (numberLineBreaks > 0 && (secondToken === 12 /* SyntaxKind.LineCommentTrivia */ || secondToken === 13 /* SyntaxKind.BlockCommentTrivia */)) {\n                replaceContent = newLinesAndIndent();\n            }\n        }\n        if (secondToken === 17 /* SyntaxKind.EOF */) {\n            if (options.keepLines && numberLineBreaks > 0) {\n                replaceContent = newLinesAndIndent();\n            }\n            else {\n                replaceContent = options.insertFinalNewline ? eol : '';\n            }\n        }\n        var secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n        addEdit(replaceContent, firstTokenEnd, secondTokenStart);\n        firstToken = secondToken;\n    }\n    return editOperations;\n}\nfunction repeat(s, count) {\n    var result = '';\n    for (var i = 0; i < count; i++) {\n        result += s;\n    }\n    return result;\n}\nfunction computeIndentLevel(content, options) {\n    var i = 0;\n    var nChars = 0;\n    var tabSize = options.tabSize || 4;\n    while (i < content.length) {\n        var ch = content.charAt(i);\n        if (ch === ' ') {\n            nChars++;\n        }\n        else if (ch === '\\t') {\n            nChars += tabSize;\n        }\n        else {\n            break;\n        }\n        i++;\n    }\n    return Math.floor(nChars / tabSize);\n}\nfunction getEOL(options, text) {\n    for (var i = 0; i < text.length; i++) {\n        var ch = text.charAt(i);\n        if (ch === '\\r') {\n            if (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                return '\\r\\n';\n            }\n            return '\\r';\n        }\n        else if (ch === '\\n') {\n            return '\\n';\n        }\n    }\n    return (options && options.eol) || '\\n';\n}\nexport function isEOL(text, offset) {\n    return '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}