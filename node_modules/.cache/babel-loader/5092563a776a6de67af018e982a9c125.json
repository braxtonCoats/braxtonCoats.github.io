{"ast":null,"code":"const util = require('./util');\n\nlet source;\nlet parseState;\nlet stack;\nlet pos;\nlet line;\nlet column;\nlet token;\nlet key;\nlet root;\n\nmodule.exports = function parse(text, reviver) {\n  source = String(text);\n  parseState = 'start';\n  stack = [];\n  pos = 0;\n  line = 1;\n  column = 0;\n  token = undefined;\n  key = undefined;\n  root = undefined;\n\n  do {\n    token = lex(); // This code is unreachable.\n    // if (!parseStates[parseState]) {\n    //     throw invalidParseState()\n    // }\n\n    parseStates[parseState]();\n  } while (token.type !== 'eof');\n\n  if (typeof reviver === 'function') {\n    return internalize({\n      '': root\n    }, '', reviver);\n  }\n\n  return root;\n};\n\nfunction internalize(holder, name, reviver) {\n  const value = holder[name];\n\n  if (value != null && typeof value === 'object') {\n    for (const key in value) {\n      const replacement = internalize(value, key, reviver);\n\n      if (replacement === undefined) {\n        delete value[key];\n      } else {\n        value[key] = replacement;\n      }\n    }\n  }\n\n  return reviver.call(holder, name, value);\n}\n\nlet lexState;\nlet buffer;\nlet doubleQuote;\nlet sign;\nlet c;\n\nfunction lex() {\n  lexState = 'default';\n  buffer = '';\n  doubleQuote = false;\n  sign = 1;\n\n  for (;;) {\n    c = peek(); // This code is unreachable.\n    // if (!lexStates[lexState]) {\n    //     throw invalidLexState(lexState)\n    // }\n\n    const token = lexStates[lexState]();\n\n    if (token) {\n      return token;\n    }\n  }\n}\n\nfunction peek() {\n  if (source[pos]) {\n    return String.fromCodePoint(source.codePointAt(pos));\n  }\n}\n\nfunction read() {\n  const c = peek();\n\n  if (c === '\\n') {\n    line++;\n    column = 0;\n  } else if (c) {\n    column += c.length;\n  } else {\n    column++;\n  }\n\n  if (c) {\n    pos += c.length;\n  }\n\n  return c;\n}\n\nconst lexStates = {\n  default() {\n    switch (c) {\n      case '\\t':\n      case '\\v':\n      case '\\f':\n      case ' ':\n      case '\\u00A0':\n      case '\\uFEFF':\n      case '\\n':\n      case '\\r':\n      case '\\u2028':\n      case '\\u2029':\n        read();\n        return;\n\n      case '/':\n        read();\n        lexState = 'comment';\n        return;\n\n      case undefined:\n        read();\n        return newToken('eof');\n    }\n\n    if (util.isSpaceSeparator(c)) {\n      read();\n      return;\n    } // This code is unreachable.\n    // if (!lexStates[parseState]) {\n    //     throw invalidLexState(parseState)\n    // }\n\n\n    return lexStates[parseState]();\n  },\n\n  comment() {\n    switch (c) {\n      case '*':\n        read();\n        lexState = 'multiLineComment';\n        return;\n\n      case '/':\n        read();\n        lexState = 'singleLineComment';\n        return;\n    }\n\n    throw invalidChar(read());\n  },\n\n  multiLineComment() {\n    switch (c) {\n      case '*':\n        read();\n        lexState = 'multiLineCommentAsterisk';\n        return;\n\n      case undefined:\n        throw invalidChar(read());\n    }\n\n    read();\n  },\n\n  multiLineCommentAsterisk() {\n    switch (c) {\n      case '*':\n        read();\n        return;\n\n      case '/':\n        read();\n        lexState = 'default';\n        return;\n\n      case undefined:\n        throw invalidChar(read());\n    }\n\n    read();\n    lexState = 'multiLineComment';\n  },\n\n  singleLineComment() {\n    switch (c) {\n      case '\\n':\n      case '\\r':\n      case '\\u2028':\n      case '\\u2029':\n        read();\n        lexState = 'default';\n        return;\n\n      case undefined:\n        read();\n        return newToken('eof');\n    }\n\n    read();\n  },\n\n  value() {\n    switch (c) {\n      case '{':\n      case '[':\n        return newToken('punctuator', read());\n\n      case 'n':\n        read();\n        literal('ull');\n        return newToken('null', null);\n\n      case 't':\n        read();\n        literal('rue');\n        return newToken('boolean', true);\n\n      case 'f':\n        read();\n        literal('alse');\n        return newToken('boolean', false);\n\n      case '-':\n      case '+':\n        if (read() === '-') {\n          sign = -1;\n        }\n\n        lexState = 'sign';\n        return;\n\n      case '.':\n        buffer = read();\n        lexState = 'decimalPointLeading';\n        return;\n\n      case '0':\n        buffer = read();\n        lexState = 'zero';\n        return;\n\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n        buffer = read();\n        lexState = 'decimalInteger';\n        return;\n\n      case 'I':\n        read();\n        literal('nfinity');\n        return newToken('numeric', Infinity);\n\n      case 'N':\n        read();\n        literal('aN');\n        return newToken('numeric', NaN);\n\n      case '\"':\n      case \"'\":\n        doubleQuote = read() === '\"';\n        buffer = '';\n        lexState = 'string';\n        return;\n    }\n\n    throw invalidChar(read());\n  },\n\n  identifierNameStartEscape() {\n    if (c !== 'u') {\n      throw invalidChar(read());\n    }\n\n    read();\n    const u = unicodeEscape();\n\n    switch (u) {\n      case '$':\n      case '_':\n        break;\n\n      default:\n        if (!util.isIdStartChar(u)) {\n          throw invalidIdentifier();\n        }\n\n        break;\n    }\n\n    buffer += u;\n    lexState = 'identifierName';\n  },\n\n  identifierName() {\n    switch (c) {\n      case '$':\n      case '_':\n      case '\\u200C':\n      case '\\u200D':\n        buffer += read();\n        return;\n\n      case '\\\\':\n        read();\n        lexState = 'identifierNameEscape';\n        return;\n    }\n\n    if (util.isIdContinueChar(c)) {\n      buffer += read();\n      return;\n    }\n\n    return newToken('identifier', buffer);\n  },\n\n  identifierNameEscape() {\n    if (c !== 'u') {\n      throw invalidChar(read());\n    }\n\n    read();\n    const u = unicodeEscape();\n\n    switch (u) {\n      case '$':\n      case '_':\n      case '\\u200C':\n      case '\\u200D':\n        break;\n\n      default:\n        if (!util.isIdContinueChar(u)) {\n          throw invalidIdentifier();\n        }\n\n        break;\n    }\n\n    buffer += u;\n    lexState = 'identifierName';\n  },\n\n  sign() {\n    switch (c) {\n      case '.':\n        buffer = read();\n        lexState = 'decimalPointLeading';\n        return;\n\n      case '0':\n        buffer = read();\n        lexState = 'zero';\n        return;\n\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n        buffer = read();\n        lexState = 'decimalInteger';\n        return;\n\n      case 'I':\n        read();\n        literal('nfinity');\n        return newToken('numeric', sign * Infinity);\n\n      case 'N':\n        read();\n        literal('aN');\n        return newToken('numeric', NaN);\n    }\n\n    throw invalidChar(read());\n  },\n\n  zero() {\n    switch (c) {\n      case '.':\n        buffer += read();\n        lexState = 'decimalPoint';\n        return;\n\n      case 'e':\n      case 'E':\n        buffer += read();\n        lexState = 'decimalExponent';\n        return;\n\n      case 'x':\n      case 'X':\n        buffer += read();\n        lexState = 'hexadecimal';\n        return;\n    }\n\n    return newToken('numeric', sign * 0);\n  },\n\n  decimalInteger() {\n    switch (c) {\n      case '.':\n        buffer += read();\n        lexState = 'decimalPoint';\n        return;\n\n      case 'e':\n      case 'E':\n        buffer += read();\n        lexState = 'decimalExponent';\n        return;\n    }\n\n    if (util.isDigit(c)) {\n      buffer += read();\n      return;\n    }\n\n    return newToken('numeric', sign * Number(buffer));\n  },\n\n  decimalPointLeading() {\n    if (util.isDigit(c)) {\n      buffer += read();\n      lexState = 'decimalFraction';\n      return;\n    }\n\n    throw invalidChar(read());\n  },\n\n  decimalPoint() {\n    switch (c) {\n      case 'e':\n      case 'E':\n        buffer += read();\n        lexState = 'decimalExponent';\n        return;\n    }\n\n    if (util.isDigit(c)) {\n      buffer += read();\n      lexState = 'decimalFraction';\n      return;\n    }\n\n    return newToken('numeric', sign * Number(buffer));\n  },\n\n  decimalFraction() {\n    switch (c) {\n      case 'e':\n      case 'E':\n        buffer += read();\n        lexState = 'decimalExponent';\n        return;\n    }\n\n    if (util.isDigit(c)) {\n      buffer += read();\n      return;\n    }\n\n    return newToken('numeric', sign * Number(buffer));\n  },\n\n  decimalExponent() {\n    switch (c) {\n      case '+':\n      case '-':\n        buffer += read();\n        lexState = 'decimalExponentSign';\n        return;\n    }\n\n    if (util.isDigit(c)) {\n      buffer += read();\n      lexState = 'decimalExponentInteger';\n      return;\n    }\n\n    throw invalidChar(read());\n  },\n\n  decimalExponentSign() {\n    if (util.isDigit(c)) {\n      buffer += read();\n      lexState = 'decimalExponentInteger';\n      return;\n    }\n\n    throw invalidChar(read());\n  },\n\n  decimalExponentInteger() {\n    if (util.isDigit(c)) {\n      buffer += read();\n      return;\n    }\n\n    return newToken('numeric', sign * Number(buffer));\n  },\n\n  hexadecimal() {\n    if (util.isHexDigit(c)) {\n      buffer += read();\n      lexState = 'hexadecimalInteger';\n      return;\n    }\n\n    throw invalidChar(read());\n  },\n\n  hexadecimalInteger() {\n    if (util.isHexDigit(c)) {\n      buffer += read();\n      return;\n    }\n\n    return newToken('numeric', sign * Number(buffer));\n  },\n\n  string() {\n    switch (c) {\n      case '\\\\':\n        read();\n        buffer += escape();\n        return;\n\n      case '\"':\n        if (doubleQuote) {\n          read();\n          return newToken('string', buffer);\n        }\n\n        buffer += read();\n        return;\n\n      case \"'\":\n        if (!doubleQuote) {\n          read();\n          return newToken('string', buffer);\n        }\n\n        buffer += read();\n        return;\n\n      case '\\n':\n      case '\\r':\n        throw invalidChar(read());\n\n      case '\\u2028':\n      case '\\u2029':\n        separatorChar(c);\n        break;\n\n      case undefined:\n        throw invalidChar(read());\n    }\n\n    buffer += read();\n  },\n\n  start() {\n    switch (c) {\n      case '{':\n      case '[':\n        return newToken('punctuator', read());\n      // This code is unreachable since the default lexState handles eof.\n      // case undefined:\n      //     return newToken('eof')\n    }\n\n    lexState = 'value';\n  },\n\n  beforePropertyName() {\n    switch (c) {\n      case '$':\n      case '_':\n        buffer = read();\n        lexState = 'identifierName';\n        return;\n\n      case '\\\\':\n        read();\n        lexState = 'identifierNameStartEscape';\n        return;\n\n      case '}':\n        return newToken('punctuator', read());\n\n      case '\"':\n      case \"'\":\n        doubleQuote = read() === '\"';\n        lexState = 'string';\n        return;\n    }\n\n    if (util.isIdStartChar(c)) {\n      buffer += read();\n      lexState = 'identifierName';\n      return;\n    }\n\n    throw invalidChar(read());\n  },\n\n  afterPropertyName() {\n    if (c === ':') {\n      return newToken('punctuator', read());\n    }\n\n    throw invalidChar(read());\n  },\n\n  beforePropertyValue() {\n    lexState = 'value';\n  },\n\n  afterPropertyValue() {\n    switch (c) {\n      case ',':\n      case '}':\n        return newToken('punctuator', read());\n    }\n\n    throw invalidChar(read());\n  },\n\n  beforeArrayValue() {\n    if (c === ']') {\n      return newToken('punctuator', read());\n    }\n\n    lexState = 'value';\n  },\n\n  afterArrayValue() {\n    switch (c) {\n      case ',':\n      case ']':\n        return newToken('punctuator', read());\n    }\n\n    throw invalidChar(read());\n  },\n\n  end() {\n    // This code is unreachable since it's handled by the default lexState.\n    // if (c === undefined) {\n    //     read()\n    //     return newToken('eof')\n    // }\n    throw invalidChar(read());\n  }\n\n};\n\nfunction newToken(type, value) {\n  return {\n    type,\n    value,\n    line,\n    column\n  };\n}\n\nfunction literal(s) {\n  for (const c of s) {\n    const p = peek();\n\n    if (p !== c) {\n      throw invalidChar(read());\n    }\n\n    read();\n  }\n}\n\nfunction escape() {\n  const c = peek();\n\n  switch (c) {\n    case 'b':\n      read();\n      return '\\b';\n\n    case 'f':\n      read();\n      return '\\f';\n\n    case 'n':\n      read();\n      return '\\n';\n\n    case 'r':\n      read();\n      return '\\r';\n\n    case 't':\n      read();\n      return '\\t';\n\n    case 'v':\n      read();\n      return '\\v';\n\n    case '0':\n      read();\n\n      if (util.isDigit(peek())) {\n        throw invalidChar(read());\n      }\n\n      return '\\0';\n\n    case 'x':\n      read();\n      return hexEscape();\n\n    case 'u':\n      read();\n      return unicodeEscape();\n\n    case '\\n':\n    case '\\u2028':\n    case '\\u2029':\n      read();\n      return '';\n\n    case '\\r':\n      read();\n\n      if (peek() === '\\n') {\n        read();\n      }\n\n      return '';\n\n    case '1':\n    case '2':\n    case '3':\n    case '4':\n    case '5':\n    case '6':\n    case '7':\n    case '8':\n    case '9':\n      throw invalidChar(read());\n\n    case undefined:\n      throw invalidChar(read());\n  }\n\n  return read();\n}\n\nfunction hexEscape() {\n  let buffer = '';\n  let c = peek();\n\n  if (!util.isHexDigit(c)) {\n    throw invalidChar(read());\n  }\n\n  buffer += read();\n  c = peek();\n\n  if (!util.isHexDigit(c)) {\n    throw invalidChar(read());\n  }\n\n  buffer += read();\n  return String.fromCodePoint(parseInt(buffer, 16));\n}\n\nfunction unicodeEscape() {\n  let buffer = '';\n  let count = 4;\n\n  while (count-- > 0) {\n    const c = peek();\n\n    if (!util.isHexDigit(c)) {\n      throw invalidChar(read());\n    }\n\n    buffer += read();\n  }\n\n  return String.fromCodePoint(parseInt(buffer, 16));\n}\n\nconst parseStates = {\n  start() {\n    if (token.type === 'eof') {\n      throw invalidEOF();\n    }\n\n    push();\n  },\n\n  beforePropertyName() {\n    switch (token.type) {\n      case 'identifier':\n      case 'string':\n        key = token.value;\n        parseState = 'afterPropertyName';\n        return;\n\n      case 'punctuator':\n        // This code is unreachable since it's handled by the lexState.\n        // if (token.value !== '}') {\n        //     throw invalidToken()\n        // }\n        pop();\n        return;\n\n      case 'eof':\n        throw invalidEOF();\n    } // This code is unreachable since it's handled by the lexState.\n    // throw invalidToken()\n\n  },\n\n  afterPropertyName() {\n    // This code is unreachable since it's handled by the lexState.\n    // if (token.type !== 'punctuator' || token.value !== ':') {\n    //     throw invalidToken()\n    // }\n    if (token.type === 'eof') {\n      throw invalidEOF();\n    }\n\n    parseState = 'beforePropertyValue';\n  },\n\n  beforePropertyValue() {\n    if (token.type === 'eof') {\n      throw invalidEOF();\n    }\n\n    push();\n  },\n\n  beforeArrayValue() {\n    if (token.type === 'eof') {\n      throw invalidEOF();\n    }\n\n    if (token.type === 'punctuator' && token.value === ']') {\n      pop();\n      return;\n    }\n\n    push();\n  },\n\n  afterPropertyValue() {\n    // This code is unreachable since it's handled by the lexState.\n    // if (token.type !== 'punctuator') {\n    //     throw invalidToken()\n    // }\n    if (token.type === 'eof') {\n      throw invalidEOF();\n    }\n\n    switch (token.value) {\n      case ',':\n        parseState = 'beforePropertyName';\n        return;\n\n      case '}':\n        pop();\n    } // This code is unreachable since it's handled by the lexState.\n    // throw invalidToken()\n\n  },\n\n  afterArrayValue() {\n    // This code is unreachable since it's handled by the lexState.\n    // if (token.type !== 'punctuator') {\n    //     throw invalidToken()\n    // }\n    if (token.type === 'eof') {\n      throw invalidEOF();\n    }\n\n    switch (token.value) {\n      case ',':\n        parseState = 'beforeArrayValue';\n        return;\n\n      case ']':\n        pop();\n    } // This code is unreachable since it's handled by the lexState.\n    // throw invalidToken()\n\n  },\n\n  end() {// This code is unreachable since it's handled by the lexState.\n    // if (token.type !== 'eof') {\n    //     throw invalidToken()\n    // }\n  }\n\n};\n\nfunction push() {\n  let value;\n\n  switch (token.type) {\n    case 'punctuator':\n      switch (token.value) {\n        case '{':\n          value = {};\n          break;\n\n        case '[':\n          value = [];\n          break;\n      }\n\n      break;\n\n    case 'null':\n    case 'boolean':\n    case 'numeric':\n    case 'string':\n      value = token.value;\n      break;\n    // This code is unreachable.\n    // default:\n    //     throw invalidToken()\n  }\n\n  if (root === undefined) {\n    root = value;\n  } else {\n    const parent = stack[stack.length - 1];\n\n    if (Array.isArray(parent)) {\n      parent.push(value);\n    } else {\n      parent[key] = value;\n    }\n  }\n\n  if (value !== null && typeof value === 'object') {\n    stack.push(value);\n\n    if (Array.isArray(value)) {\n      parseState = 'beforeArrayValue';\n    } else {\n      parseState = 'beforePropertyName';\n    }\n  } else {\n    const current = stack[stack.length - 1];\n\n    if (current == null) {\n      parseState = 'end';\n    } else if (Array.isArray(current)) {\n      parseState = 'afterArrayValue';\n    } else {\n      parseState = 'afterPropertyValue';\n    }\n  }\n}\n\nfunction pop() {\n  stack.pop();\n  const current = stack[stack.length - 1];\n\n  if (current == null) {\n    parseState = 'end';\n  } else if (Array.isArray(current)) {\n    parseState = 'afterArrayValue';\n  } else {\n    parseState = 'afterPropertyValue';\n  }\n} // This code is unreachable.\n// function invalidParseState () {\n//     return new Error(`JSON5: invalid parse state '${parseState}'`)\n// }\n// This code is unreachable.\n// function invalidLexState (state) {\n//     return new Error(`JSON5: invalid lex state '${state}'`)\n// }\n\n\nfunction invalidChar(c) {\n  if (c === undefined) {\n    return syntaxError(`JSON5: invalid end of input at ${line}:${column}`);\n  }\n\n  return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`);\n}\n\nfunction invalidEOF() {\n  return syntaxError(`JSON5: invalid end of input at ${line}:${column}`);\n} // This code is unreachable.\n// function invalidToken () {\n//     if (token.type === 'eof') {\n//         return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)\n//     }\n//     const c = String.fromCodePoint(token.value.codePointAt(0))\n//     return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)\n// }\n\n\nfunction invalidIdentifier() {\n  column -= 5;\n  return syntaxError(`JSON5: invalid identifier character at ${line}:${column}`);\n}\n\nfunction separatorChar(c) {\n  console.warn(`JSON5: '${formatChar(c)}' in strings is not valid ECMAScript; consider escaping`);\n}\n\nfunction formatChar(c) {\n  const replacements = {\n    \"'\": \"\\\\'\",\n    '\"': '\\\\\"',\n    '\\\\': '\\\\\\\\',\n    '\\b': '\\\\b',\n    '\\f': '\\\\f',\n    '\\n': '\\\\n',\n    '\\r': '\\\\r',\n    '\\t': '\\\\t',\n    '\\v': '\\\\v',\n    '\\0': '\\\\0',\n    '\\u2028': '\\\\u2028',\n    '\\u2029': '\\\\u2029'\n  };\n\n  if (replacements[c]) {\n    return replacements[c];\n  }\n\n  if (c < ' ') {\n    const hexString = c.charCodeAt(0).toString(16);\n    return '\\\\x' + ('00' + hexString).substring(hexString.length);\n  }\n\n  return c;\n}\n\nfunction syntaxError(message) {\n  const err = new SyntaxError(message);\n  err.lineNumber = line;\n  err.columnNumber = column;\n  return err;\n}","map":{"version":3,"names":["util","require","source","parseState","stack","pos","line","column","token","key","root","module","exports","parse","text","reviver","String","undefined","lex","parseStates","type","internalize","holder","name","value","replacement","call","lexState","buffer","doubleQuote","sign","c","peek","lexStates","fromCodePoint","codePointAt","read","length","default","newToken","isSpaceSeparator","comment","invalidChar","multiLineComment","multiLineCommentAsterisk","singleLineComment","literal","Infinity","NaN","identifierNameStartEscape","u","unicodeEscape","isIdStartChar","invalidIdentifier","identifierName","isIdContinueChar","identifierNameEscape","zero","decimalInteger","isDigit","Number","decimalPointLeading","decimalPoint","decimalFraction","decimalExponent","decimalExponentSign","decimalExponentInteger","hexadecimal","isHexDigit","hexadecimalInteger","string","escape","separatorChar","start","beforePropertyName","afterPropertyName","beforePropertyValue","afterPropertyValue","beforeArrayValue","afterArrayValue","end","s","p","hexEscape","parseInt","count","invalidEOF","push","pop","parent","Array","isArray","current","syntaxError","formatChar","console","warn","replacements","hexString","charCodeAt","toString","substring","message","err","SyntaxError","lineNumber","columnNumber"],"sources":["/Users/braxtoncoats/Github/bcd/node_modules/json5/lib/parse.js"],"sourcesContent":["const util = require('./util')\n\nlet source\nlet parseState\nlet stack\nlet pos\nlet line\nlet column\nlet token\nlet key\nlet root\n\nmodule.exports = function parse (text, reviver) {\n    source = String(text)\n    parseState = 'start'\n    stack = []\n    pos = 0\n    line = 1\n    column = 0\n    token = undefined\n    key = undefined\n    root = undefined\n\n    do {\n        token = lex()\n\n        // This code is unreachable.\n        // if (!parseStates[parseState]) {\n        //     throw invalidParseState()\n        // }\n\n        parseStates[parseState]()\n    } while (token.type !== 'eof')\n\n    if (typeof reviver === 'function') {\n        return internalize({'': root}, '', reviver)\n    }\n\n    return root\n}\n\nfunction internalize (holder, name, reviver) {\n    const value = holder[name]\n    if (value != null && typeof value === 'object') {\n        for (const key in value) {\n            const replacement = internalize(value, key, reviver)\n            if (replacement === undefined) {\n                delete value[key]\n            } else {\n                value[key] = replacement\n            }\n        }\n    }\n\n    return reviver.call(holder, name, value)\n}\n\nlet lexState\nlet buffer\nlet doubleQuote\nlet sign\nlet c\n\nfunction lex () {\n    lexState = 'default'\n    buffer = ''\n    doubleQuote = false\n    sign = 1\n\n    for (;;) {\n        c = peek()\n\n        // This code is unreachable.\n        // if (!lexStates[lexState]) {\n        //     throw invalidLexState(lexState)\n        // }\n\n        const token = lexStates[lexState]()\n        if (token) {\n            return token\n        }\n    }\n}\n\nfunction peek () {\n    if (source[pos]) {\n        return String.fromCodePoint(source.codePointAt(pos))\n    }\n}\n\nfunction read () {\n    const c = peek()\n\n    if (c === '\\n') {\n        line++\n        column = 0\n    } else if (c) {\n        column += c.length\n    } else {\n        column++\n    }\n\n    if (c) {\n        pos += c.length\n    }\n\n    return c\n}\n\nconst lexStates = {\n    default () {\n        switch (c) {\n        case '\\t':\n        case '\\v':\n        case '\\f':\n        case ' ':\n        case '\\u00A0':\n        case '\\uFEFF':\n        case '\\n':\n        case '\\r':\n        case '\\u2028':\n        case '\\u2029':\n            read()\n            return\n\n        case '/':\n            read()\n            lexState = 'comment'\n            return\n\n        case undefined:\n            read()\n            return newToken('eof')\n        }\n\n        if (util.isSpaceSeparator(c)) {\n            read()\n            return\n        }\n\n        // This code is unreachable.\n        // if (!lexStates[parseState]) {\n        //     throw invalidLexState(parseState)\n        // }\n\n        return lexStates[parseState]()\n    },\n\n    comment () {\n        switch (c) {\n        case '*':\n            read()\n            lexState = 'multiLineComment'\n            return\n\n        case '/':\n            read()\n            lexState = 'singleLineComment'\n            return\n        }\n\n        throw invalidChar(read())\n    },\n\n    multiLineComment () {\n        switch (c) {\n        case '*':\n            read()\n            lexState = 'multiLineCommentAsterisk'\n            return\n\n        case undefined:\n            throw invalidChar(read())\n        }\n\n        read()\n    },\n\n    multiLineCommentAsterisk () {\n        switch (c) {\n        case '*':\n            read()\n            return\n\n        case '/':\n            read()\n            lexState = 'default'\n            return\n\n        case undefined:\n            throw invalidChar(read())\n        }\n\n        read()\n        lexState = 'multiLineComment'\n    },\n\n    singleLineComment () {\n        switch (c) {\n        case '\\n':\n        case '\\r':\n        case '\\u2028':\n        case '\\u2029':\n            read()\n            lexState = 'default'\n            return\n\n        case undefined:\n            read()\n            return newToken('eof')\n        }\n\n        read()\n    },\n\n    value () {\n        switch (c) {\n        case '{':\n        case '[':\n            return newToken('punctuator', read())\n\n        case 'n':\n            read()\n            literal('ull')\n            return newToken('null', null)\n\n        case 't':\n            read()\n            literal('rue')\n            return newToken('boolean', true)\n\n        case 'f':\n            read()\n            literal('alse')\n            return newToken('boolean', false)\n\n        case '-':\n        case '+':\n            if (read() === '-') {\n                sign = -1\n            }\n\n            lexState = 'sign'\n            return\n\n        case '.':\n            buffer = read()\n            lexState = 'decimalPointLeading'\n            return\n\n        case '0':\n            buffer = read()\n            lexState = 'zero'\n            return\n\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            buffer = read()\n            lexState = 'decimalInteger'\n            return\n\n        case 'I':\n            read()\n            literal('nfinity')\n            return newToken('numeric', Infinity)\n\n        case 'N':\n            read()\n            literal('aN')\n            return newToken('numeric', NaN)\n\n        case '\"':\n        case \"'\":\n            doubleQuote = (read() === '\"')\n            buffer = ''\n            lexState = 'string'\n            return\n        }\n\n        throw invalidChar(read())\n    },\n\n    identifierNameStartEscape () {\n        if (c !== 'u') {\n            throw invalidChar(read())\n        }\n\n        read()\n        const u = unicodeEscape()\n        switch (u) {\n        case '$':\n        case '_':\n            break\n\n        default:\n            if (!util.isIdStartChar(u)) {\n                throw invalidIdentifier()\n            }\n\n            break\n        }\n\n        buffer += u\n        lexState = 'identifierName'\n    },\n\n    identifierName () {\n        switch (c) {\n        case '$':\n        case '_':\n        case '\\u200C':\n        case '\\u200D':\n            buffer += read()\n            return\n\n        case '\\\\':\n            read()\n            lexState = 'identifierNameEscape'\n            return\n        }\n\n        if (util.isIdContinueChar(c)) {\n            buffer += read()\n            return\n        }\n\n        return newToken('identifier', buffer)\n    },\n\n    identifierNameEscape () {\n        if (c !== 'u') {\n            throw invalidChar(read())\n        }\n\n        read()\n        const u = unicodeEscape()\n        switch (u) {\n        case '$':\n        case '_':\n        case '\\u200C':\n        case '\\u200D':\n            break\n\n        default:\n            if (!util.isIdContinueChar(u)) {\n                throw invalidIdentifier()\n            }\n\n            break\n        }\n\n        buffer += u\n        lexState = 'identifierName'\n    },\n\n    sign () {\n        switch (c) {\n        case '.':\n            buffer = read()\n            lexState = 'decimalPointLeading'\n            return\n\n        case '0':\n            buffer = read()\n            lexState = 'zero'\n            return\n\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            buffer = read()\n            lexState = 'decimalInteger'\n            return\n\n        case 'I':\n            read()\n            literal('nfinity')\n            return newToken('numeric', sign * Infinity)\n\n        case 'N':\n            read()\n            literal('aN')\n            return newToken('numeric', NaN)\n        }\n\n        throw invalidChar(read())\n    },\n\n    zero () {\n        switch (c) {\n        case '.':\n            buffer += read()\n            lexState = 'decimalPoint'\n            return\n\n        case 'e':\n        case 'E':\n            buffer += read()\n            lexState = 'decimalExponent'\n            return\n\n        case 'x':\n        case 'X':\n            buffer += read()\n            lexState = 'hexadecimal'\n            return\n        }\n\n        return newToken('numeric', sign * 0)\n    },\n\n    decimalInteger () {\n        switch (c) {\n        case '.':\n            buffer += read()\n            lexState = 'decimalPoint'\n            return\n\n        case 'e':\n        case 'E':\n            buffer += read()\n            lexState = 'decimalExponent'\n            return\n        }\n\n        if (util.isDigit(c)) {\n            buffer += read()\n            return\n        }\n\n        return newToken('numeric', sign * Number(buffer))\n    },\n\n    decimalPointLeading () {\n        if (util.isDigit(c)) {\n            buffer += read()\n            lexState = 'decimalFraction'\n            return\n        }\n\n        throw invalidChar(read())\n    },\n\n    decimalPoint () {\n        switch (c) {\n        case 'e':\n        case 'E':\n            buffer += read()\n            lexState = 'decimalExponent'\n            return\n        }\n\n        if (util.isDigit(c)) {\n            buffer += read()\n            lexState = 'decimalFraction'\n            return\n        }\n\n        return newToken('numeric', sign * Number(buffer))\n    },\n\n    decimalFraction () {\n        switch (c) {\n        case 'e':\n        case 'E':\n            buffer += read()\n            lexState = 'decimalExponent'\n            return\n        }\n\n        if (util.isDigit(c)) {\n            buffer += read()\n            return\n        }\n\n        return newToken('numeric', sign * Number(buffer))\n    },\n\n    decimalExponent () {\n        switch (c) {\n        case '+':\n        case '-':\n            buffer += read()\n            lexState = 'decimalExponentSign'\n            return\n        }\n\n        if (util.isDigit(c)) {\n            buffer += read()\n            lexState = 'decimalExponentInteger'\n            return\n        }\n\n        throw invalidChar(read())\n    },\n\n    decimalExponentSign () {\n        if (util.isDigit(c)) {\n            buffer += read()\n            lexState = 'decimalExponentInteger'\n            return\n        }\n\n        throw invalidChar(read())\n    },\n\n    decimalExponentInteger () {\n        if (util.isDigit(c)) {\n            buffer += read()\n            return\n        }\n\n        return newToken('numeric', sign * Number(buffer))\n    },\n\n    hexadecimal () {\n        if (util.isHexDigit(c)) {\n            buffer += read()\n            lexState = 'hexadecimalInteger'\n            return\n        }\n\n        throw invalidChar(read())\n    },\n\n    hexadecimalInteger () {\n        if (util.isHexDigit(c)) {\n            buffer += read()\n            return\n        }\n\n        return newToken('numeric', sign * Number(buffer))\n    },\n\n    string () {\n        switch (c) {\n        case '\\\\':\n            read()\n            buffer += escape()\n            return\n\n        case '\"':\n            if (doubleQuote) {\n                read()\n                return newToken('string', buffer)\n            }\n\n            buffer += read()\n            return\n\n        case \"'\":\n            if (!doubleQuote) {\n                read()\n                return newToken('string', buffer)\n            }\n\n            buffer += read()\n            return\n\n        case '\\n':\n        case '\\r':\n            throw invalidChar(read())\n\n        case '\\u2028':\n        case '\\u2029':\n            separatorChar(c)\n            break\n\n        case undefined:\n            throw invalidChar(read())\n        }\n\n        buffer += read()\n    },\n\n    start () {\n        switch (c) {\n        case '{':\n        case '[':\n            return newToken('punctuator', read())\n\n        // This code is unreachable since the default lexState handles eof.\n        // case undefined:\n        //     return newToken('eof')\n        }\n\n        lexState = 'value'\n    },\n\n    beforePropertyName () {\n        switch (c) {\n        case '$':\n        case '_':\n            buffer = read()\n            lexState = 'identifierName'\n            return\n\n        case '\\\\':\n            read()\n            lexState = 'identifierNameStartEscape'\n            return\n\n        case '}':\n            return newToken('punctuator', read())\n\n        case '\"':\n        case \"'\":\n            doubleQuote = (read() === '\"')\n            lexState = 'string'\n            return\n        }\n\n        if (util.isIdStartChar(c)) {\n            buffer += read()\n            lexState = 'identifierName'\n            return\n        }\n\n        throw invalidChar(read())\n    },\n\n    afterPropertyName () {\n        if (c === ':') {\n            return newToken('punctuator', read())\n        }\n\n        throw invalidChar(read())\n    },\n\n    beforePropertyValue () {\n        lexState = 'value'\n    },\n\n    afterPropertyValue () {\n        switch (c) {\n        case ',':\n        case '}':\n            return newToken('punctuator', read())\n        }\n\n        throw invalidChar(read())\n    },\n\n    beforeArrayValue () {\n        if (c === ']') {\n            return newToken('punctuator', read())\n        }\n\n        lexState = 'value'\n    },\n\n    afterArrayValue () {\n        switch (c) {\n        case ',':\n        case ']':\n            return newToken('punctuator', read())\n        }\n\n        throw invalidChar(read())\n    },\n\n    end () {\n        // This code is unreachable since it's handled by the default lexState.\n        // if (c === undefined) {\n        //     read()\n        //     return newToken('eof')\n        // }\n\n        throw invalidChar(read())\n    },\n}\n\nfunction newToken (type, value) {\n    return {\n        type,\n        value,\n        line,\n        column,\n    }\n}\n\nfunction literal (s) {\n    for (const c of s) {\n        const p = peek()\n\n        if (p !== c) {\n            throw invalidChar(read())\n        }\n\n        read()\n    }\n}\n\nfunction escape () {\n    const c = peek()\n    switch (c) {\n    case 'b':\n        read()\n        return '\\b'\n\n    case 'f':\n        read()\n        return '\\f'\n\n    case 'n':\n        read()\n        return '\\n'\n\n    case 'r':\n        read()\n        return '\\r'\n\n    case 't':\n        read()\n        return '\\t'\n\n    case 'v':\n        read()\n        return '\\v'\n\n    case '0':\n        read()\n        if (util.isDigit(peek())) {\n            throw invalidChar(read())\n        }\n\n        return '\\0'\n\n    case 'x':\n        read()\n        return hexEscape()\n\n    case 'u':\n        read()\n        return unicodeEscape()\n\n    case '\\n':\n    case '\\u2028':\n    case '\\u2029':\n        read()\n        return ''\n\n    case '\\r':\n        read()\n        if (peek() === '\\n') {\n            read()\n        }\n\n        return ''\n\n    case '1':\n    case '2':\n    case '3':\n    case '4':\n    case '5':\n    case '6':\n    case '7':\n    case '8':\n    case '9':\n        throw invalidChar(read())\n\n    case undefined:\n        throw invalidChar(read())\n    }\n\n    return read()\n}\n\nfunction hexEscape () {\n    let buffer = ''\n    let c = peek()\n\n    if (!util.isHexDigit(c)) {\n        throw invalidChar(read())\n    }\n\n    buffer += read()\n\n    c = peek()\n    if (!util.isHexDigit(c)) {\n        throw invalidChar(read())\n    }\n\n    buffer += read()\n\n    return String.fromCodePoint(parseInt(buffer, 16))\n}\n\nfunction unicodeEscape () {\n    let buffer = ''\n    let count = 4\n\n    while (count-- > 0) {\n        const c = peek()\n        if (!util.isHexDigit(c)) {\n            throw invalidChar(read())\n        }\n\n        buffer += read()\n    }\n\n    return String.fromCodePoint(parseInt(buffer, 16))\n}\n\nconst parseStates = {\n    start () {\n        if (token.type === 'eof') {\n            throw invalidEOF()\n        }\n\n        push()\n    },\n\n    beforePropertyName () {\n        switch (token.type) {\n        case 'identifier':\n        case 'string':\n            key = token.value\n            parseState = 'afterPropertyName'\n            return\n\n        case 'punctuator':\n            // This code is unreachable since it's handled by the lexState.\n            // if (token.value !== '}') {\n            //     throw invalidToken()\n            // }\n\n            pop()\n            return\n\n        case 'eof':\n            throw invalidEOF()\n        }\n\n        // This code is unreachable since it's handled by the lexState.\n        // throw invalidToken()\n    },\n\n    afterPropertyName () {\n        // This code is unreachable since it's handled by the lexState.\n        // if (token.type !== 'punctuator' || token.value !== ':') {\n        //     throw invalidToken()\n        // }\n\n        if (token.type === 'eof') {\n            throw invalidEOF()\n        }\n\n        parseState = 'beforePropertyValue'\n    },\n\n    beforePropertyValue () {\n        if (token.type === 'eof') {\n            throw invalidEOF()\n        }\n\n        push()\n    },\n\n    beforeArrayValue () {\n        if (token.type === 'eof') {\n            throw invalidEOF()\n        }\n\n        if (token.type === 'punctuator' && token.value === ']') {\n            pop()\n            return\n        }\n\n        push()\n    },\n\n    afterPropertyValue () {\n        // This code is unreachable since it's handled by the lexState.\n        // if (token.type !== 'punctuator') {\n        //     throw invalidToken()\n        // }\n\n        if (token.type === 'eof') {\n            throw invalidEOF()\n        }\n\n        switch (token.value) {\n        case ',':\n            parseState = 'beforePropertyName'\n            return\n\n        case '}':\n            pop()\n        }\n\n        // This code is unreachable since it's handled by the lexState.\n        // throw invalidToken()\n    },\n\n    afterArrayValue () {\n        // This code is unreachable since it's handled by the lexState.\n        // if (token.type !== 'punctuator') {\n        //     throw invalidToken()\n        // }\n\n        if (token.type === 'eof') {\n            throw invalidEOF()\n        }\n\n        switch (token.value) {\n        case ',':\n            parseState = 'beforeArrayValue'\n            return\n\n        case ']':\n            pop()\n        }\n\n        // This code is unreachable since it's handled by the lexState.\n        // throw invalidToken()\n    },\n\n    end () {\n        // This code is unreachable since it's handled by the lexState.\n        // if (token.type !== 'eof') {\n        //     throw invalidToken()\n        // }\n    },\n}\n\nfunction push () {\n    let value\n\n    switch (token.type) {\n    case 'punctuator':\n        switch (token.value) {\n        case '{':\n            value = {}\n            break\n\n        case '[':\n            value = []\n            break\n        }\n\n        break\n\n    case 'null':\n    case 'boolean':\n    case 'numeric':\n    case 'string':\n        value = token.value\n        break\n\n    // This code is unreachable.\n    // default:\n    //     throw invalidToken()\n    }\n\n    if (root === undefined) {\n        root = value\n    } else {\n        const parent = stack[stack.length - 1]\n        if (Array.isArray(parent)) {\n            parent.push(value)\n        } else {\n            parent[key] = value\n        }\n    }\n\n    if (value !== null && typeof value === 'object') {\n        stack.push(value)\n\n        if (Array.isArray(value)) {\n            parseState = 'beforeArrayValue'\n        } else {\n            parseState = 'beforePropertyName'\n        }\n    } else {\n        const current = stack[stack.length - 1]\n        if (current == null) {\n            parseState = 'end'\n        } else if (Array.isArray(current)) {\n            parseState = 'afterArrayValue'\n        } else {\n            parseState = 'afterPropertyValue'\n        }\n    }\n}\n\nfunction pop () {\n    stack.pop()\n\n    const current = stack[stack.length - 1]\n    if (current == null) {\n        parseState = 'end'\n    } else if (Array.isArray(current)) {\n        parseState = 'afterArrayValue'\n    } else {\n        parseState = 'afterPropertyValue'\n    }\n}\n\n// This code is unreachable.\n// function invalidParseState () {\n//     return new Error(`JSON5: invalid parse state '${parseState}'`)\n// }\n\n// This code is unreachable.\n// function invalidLexState (state) {\n//     return new Error(`JSON5: invalid lex state '${state}'`)\n// }\n\nfunction invalidChar (c) {\n    if (c === undefined) {\n        return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)\n    }\n\n    return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)\n}\n\nfunction invalidEOF () {\n    return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)\n}\n\n// This code is unreachable.\n// function invalidToken () {\n//     if (token.type === 'eof') {\n//         return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)\n//     }\n\n//     const c = String.fromCodePoint(token.value.codePointAt(0))\n//     return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)\n// }\n\nfunction invalidIdentifier () {\n    column -= 5\n    return syntaxError(`JSON5: invalid identifier character at ${line}:${column}`)\n}\n\nfunction separatorChar (c) {\n    console.warn(`JSON5: '${formatChar(c)}' in strings is not valid ECMAScript; consider escaping`)\n}\n\nfunction formatChar (c) {\n    const replacements = {\n        \"'\": \"\\\\'\",\n        '\"': '\\\\\"',\n        '\\\\': '\\\\\\\\',\n        '\\b': '\\\\b',\n        '\\f': '\\\\f',\n        '\\n': '\\\\n',\n        '\\r': '\\\\r',\n        '\\t': '\\\\t',\n        '\\v': '\\\\v',\n        '\\0': '\\\\0',\n        '\\u2028': '\\\\u2028',\n        '\\u2029': '\\\\u2029',\n    }\n\n    if (replacements[c]) {\n        return replacements[c]\n    }\n\n    if (c < ' ') {\n        const hexString = c.charCodeAt(0).toString(16)\n        return '\\\\x' + ('00' + hexString).substring(hexString.length)\n    }\n\n    return c\n}\n\nfunction syntaxError (message) {\n    const err = new SyntaxError(message)\n    err.lineNumber = line\n    err.columnNumber = column\n    return err\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}