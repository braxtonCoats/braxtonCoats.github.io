{"ast":null,"code":"/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nconst {\n  unique\n} = require('../../utils/es6_');\n/**\n * Given some value, returns a basic valid TypeScript type for that value.\n * Supports numbers, strings, booleans, arrays and objects of any of those types.\n *\n * @memberof module:formatHelpers\n * @example\n * ```javascript\n * StyleDictionary.registerFormat({\n *   name: 'myCustomFormat',\n *   formatter: function({ dictionary, options }) {\n *    return dictionary.allProperties.map(function(prop) {\n *      var to_ret_prop = 'export const ' + prop.name + ' : ' + getTypeScriptType(prop.value) + ';';\n *      if (prop.comment)\n *        to_ret_prop = to_ret_prop.concat(' // ' + prop.comment);\n *      return to_ret_prop;\n *    }).join('\\n');\n *   }\n * });\n *``` \n * @param {*} value A value to check the type of.\n * @return {String} A valid name for a TypeScript type.\n *\n */\n\n\nfunction getTypeScriptType(value) {\n  if (Array.isArray(value)) return getArrayType(value);\n  if (typeof value === 'object') return getObjectType(value);\n  if (['string', 'number', 'boolean'].includes(typeof value)) return typeof value;\n  return 'any';\n}\n/**\n * @param {Object} value An object with uknown type properties\n * @returns {String} A representation of the type model for the passed object\n */\n\n\nfunction getObjectType(value) {\n  const entries = Object.entries(value);\n  return `{ ${entries.map((_ref, index) => {\n    let [key, property] = _ref;\n    const isLast = entries.length === index + 1;\n    return `${key}: ${getTypeScriptType(property)}${!isLast ? ', ' : ''}`;\n  }).join('')} }`;\n}\n/**\n * @param {Array} value An array to check each property of\n * @returns {String} A valid type for the passed array and it's items\n */\n\n\nfunction getArrayType(passedArray) {\n  if (passedArray.length > 0) {\n    const firstValueType = getTypeScriptType(passedArray[0]);\n\n    if (passedArray.every(v => getTypeScriptType(v) === firstValueType)) {\n      return firstValueType + '[]';\n    } else {\n      return `(${unique(passedArray.map((item, index) => {\n        const isLast = passedArray.length === index + 1;\n        return `${getTypeScriptType(item)}${!isLast ? ' | ' : ''}`;\n      })).join('')})[]`;\n    }\n  }\n\n  return 'any[]';\n}\n\nmodule.exports = getTypeScriptType;","map":{"version":3,"names":["unique","require","getTypeScriptType","value","Array","isArray","getArrayType","getObjectType","includes","entries","Object","map","index","key","property","isLast","length","join","passedArray","firstValueType","every","v","item","module","exports"],"sources":["/Users/braxtoncoats/Github/bcd/node_modules/style-dictionary/lib/common/formatHelpers/getTypeScriptType.js"],"sourcesContent":["/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nconst { unique } = require('../../utils/es6_');\n\n/**\n * Given some value, returns a basic valid TypeScript type for that value.\n * Supports numbers, strings, booleans, arrays and objects of any of those types.\n *\n * @memberof module:formatHelpers\n * @example\n * ```javascript\n * StyleDictionary.registerFormat({\n *   name: 'myCustomFormat',\n *   formatter: function({ dictionary, options }) {\n *    return dictionary.allProperties.map(function(prop) {\n *      var to_ret_prop = 'export const ' + prop.name + ' : ' + getTypeScriptType(prop.value) + ';';\n *      if (prop.comment)\n *        to_ret_prop = to_ret_prop.concat(' // ' + prop.comment);\n *      return to_ret_prop;\n *    }).join('\\n');\n *   }\n * });\n *``` \n * @param {*} value A value to check the type of.\n * @return {String} A valid name for a TypeScript type.\n *\n */\n function getTypeScriptType(value)  {\n  if (Array.isArray(value)) return getArrayType(value)\n  if (typeof value === 'object') return getObjectType(value)\n  if (['string', 'number', 'boolean'].includes(typeof value)) return typeof value\n\n  return 'any'\n}\n\n/**\n * @param {Object} value An object with uknown type properties\n * @returns {String} A representation of the type model for the passed object\n */\nfunction getObjectType(value)  {\n  const entries = Object.entries(value)\n  return `{ ${entries.map(([key, property], index) => {\n    const isLast = entries.length === index + 1\n    return `${key}: ${getTypeScriptType(property)}${!isLast ? ', ' : ''}`\n  }).join('')} }`\n}\n\n/**\n * @param {Array} value An array to check each property of\n * @returns {String} A valid type for the passed array and it's items\n */\nfunction getArrayType(passedArray)  {\n  if (passedArray.length > 0) {\n    const firstValueType = getTypeScriptType(passedArray[0]);\n    if (passedArray.every((v) => getTypeScriptType(v) === firstValueType)) {\n      return firstValueType + '[]';\n    } else {\n      return `(${unique(passedArray.map((item, index) => {\n        const isLast = passedArray.length === index + 1;\n        return `${getTypeScriptType(item)}${!isLast ? ' | ' : ''}`\n      })).join('')})[]`\n    }\n  }\n  return 'any[]';\n}\n\nmodule.exports = getTypeScriptType;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;EAAEA;AAAF,IAAaC,OAAO,CAAC,kBAAD,CAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACC,SAASC,iBAAT,CAA2BC,KAA3B,EAAmC;EAClC,IAAIC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAJ,EAA0B,OAAOG,YAAY,CAACH,KAAD,CAAnB;EAC1B,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B,OAAOI,aAAa,CAACJ,KAAD,CAApB;EAC/B,IAAI,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,EAAgCK,QAAhC,CAAyC,OAAOL,KAAhD,CAAJ,EAA4D,OAAO,OAAOA,KAAd;EAE5D,OAAO,KAAP;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASI,aAAT,CAAuBJ,KAAvB,EAA+B;EAC7B,MAAMM,OAAO,GAAGC,MAAM,CAACD,OAAP,CAAeN,KAAf,CAAhB;EACA,OAAQ,KAAIM,OAAO,CAACE,GAAR,CAAY,OAAkBC,KAAlB,KAA4B;IAAA,IAA3B,CAACC,GAAD,EAAMC,QAAN,CAA2B;IAClD,MAAMC,MAAM,GAAGN,OAAO,CAACO,MAAR,KAAmBJ,KAAK,GAAG,CAA1C;IACA,OAAQ,GAAEC,GAAI,KAAIX,iBAAiB,CAACY,QAAD,CAAW,GAAE,CAACC,MAAD,GAAU,IAAV,GAAiB,EAAG,EAApE;EACD,CAHW,EAGTE,IAHS,CAGJ,EAHI,CAGA,IAHZ;AAID;AAED;AACA;AACA;AACA;;;AACA,SAASX,YAAT,CAAsBY,WAAtB,EAAoC;EAClC,IAAIA,WAAW,CAACF,MAAZ,GAAqB,CAAzB,EAA4B;IAC1B,MAAMG,cAAc,GAAGjB,iBAAiB,CAACgB,WAAW,CAAC,CAAD,CAAZ,CAAxC;;IACA,IAAIA,WAAW,CAACE,KAAZ,CAAmBC,CAAD,IAAOnB,iBAAiB,CAACmB,CAAD,CAAjB,KAAyBF,cAAlD,CAAJ,EAAuE;MACrE,OAAOA,cAAc,GAAG,IAAxB;IACD,CAFD,MAEO;MACL,OAAQ,IAAGnB,MAAM,CAACkB,WAAW,CAACP,GAAZ,CAAgB,CAACW,IAAD,EAAOV,KAAP,KAAiB;QACjD,MAAMG,MAAM,GAAGG,WAAW,CAACF,MAAZ,KAAuBJ,KAAK,GAAG,CAA9C;QACA,OAAQ,GAAEV,iBAAiB,CAACoB,IAAD,CAAO,GAAE,CAACP,MAAD,GAAU,KAAV,GAAkB,EAAG,EAAzD;MACD,CAHiB,CAAD,CAAN,CAGPE,IAHO,CAGF,EAHE,CAGE,KAHb;IAID;EACF;;EACD,OAAO,OAAP;AACD;;AAEDM,MAAM,CAACC,OAAP,GAAiBtB,iBAAjB"},"metadata":{},"sourceType":"script"}