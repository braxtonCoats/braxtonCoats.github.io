{"ast":null,"code":"/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nrequire('json5/lib/register');\n\nrequire.extensions[\".jsonc\"] = require(\"./jsonc\").register;\n\nvar glob = require('glob'),\n    deepExtend = require('./deepExtend'),\n    path = require('path'),\n    fs = require('fs');\n\nfunction traverseObj(obj, fn) {\n  for (let key in obj) {\n    fn.apply(null, [obj, key, obj[key]]);\n\n    if (obj[key] && typeof obj[key] === 'object') {\n      traverseObj(obj[key], fn);\n    }\n  }\n}\n/**\n * Takes an array of json files and merges\n * them together. Optionally does a deep extend.\n * @private\n * @param {String[]} arr - Array of paths to json (or node modules that export objects) files\n * @param {Boolean} [deep=false] - If it should perform a deep merge\n * @param {Function} collision - A function to be called when a name collision happens that isn't a normal deep merge of objects\n * @param {Boolean} [source=true] - If json files are \"sources\", tag properties\n * @param {Object[]} [parsers=[]] - Custom file parsers\n * @returns {Object}\n */\n\n\nfunction combineJSON(arr, deep, collision, source) {\n  let parsers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var i,\n      files = [],\n      to_ret = {};\n\n  for (i = 0; i < arr.length; i++) {\n    var new_files = glob.sync(arr[i], {});\n    files = files.concat(new_files);\n  }\n\n  for (i = 0; i < files.length; i++) {\n    var filePath = files[i];\n    var resolvedPath = path.isAbsolute(files[i]) ? files[i] : path.resolve(process.cwd(), files[i]);\n    var file_content = null;\n\n    try {\n      // This delete force require(resolvedPath) to take the latest version of the file. It's handfull when using the node package along chokidar.\n      delete require.cache[resolvedPath]; // Iterate over custom parsers, if the file path matches the parser's\n      // pattern regex, use it's parse function to generate the object\n\n      parsers.forEach(_ref => {\n        let {\n          pattern,\n          parse\n        } = _ref;\n\n        if (resolvedPath.match(pattern)) {\n          file_content = parse({\n            contents: fs.readFileSync(resolvedPath, {\n              encoding: 'UTF-8'\n            }),\n            filePath: resolvedPath\n          });\n        }\n      }); // If there is no file_content then no custom parser ran on that file\n\n      if (!file_content) {\n        file_content = deepExtend([file_content, require(resolvedPath)]);\n      }\n    } catch (e) {\n      e.message = 'Failed to load or parse JSON or JS Object: ' + e.message;\n      throw e;\n    } // Add some side data on each property to make filtering easier\n\n\n    traverseObj(file_content, obj => {\n      if (obj.hasOwnProperty('value') && !obj.filePath) {\n        obj.filePath = filePath;\n        obj.isSource = source || source === undefined ? true : false;\n      }\n    });\n\n    if (deep) {\n      deepExtend([to_ret, file_content], collision);\n    } else {\n      Object.assign(to_ret, file_content);\n    }\n  }\n\n  return to_ret;\n}\n\nmodule.exports = combineJSON;","map":{"version":3,"names":["require","extensions","register","glob","deepExtend","path","fs","traverseObj","obj","fn","key","apply","combineJSON","arr","deep","collision","source","parsers","i","files","to_ret","length","new_files","sync","concat","filePath","resolvedPath","isAbsolute","resolve","process","cwd","file_content","cache","forEach","pattern","parse","match","contents","readFileSync","encoding","e","message","hasOwnProperty","isSource","undefined","Object","assign","module","exports"],"sources":["/Users/braxtoncoats/Github/bcd/node_modules/style-dictionary/lib/utils/combineJSON.js"],"sourcesContent":["/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nrequire('json5/lib/register');\nrequire.extensions[\".jsonc\"] = require(\"./jsonc\").register;\n\nvar glob = require('glob'),\n  deepExtend = require('./deepExtend'),\n  path = require('path'),\n  fs = require('fs');\n\nfunction traverseObj(obj, fn) {\n  for (let key in obj) {\n    fn.apply(null, [obj, key, obj[key]]);\n    if (obj[key] && typeof obj[key] === 'object') {\n      traverseObj(obj[key], fn);\n    }\n  }\n}\n\n/**\n * Takes an array of json files and merges\n * them together. Optionally does a deep extend.\n * @private\n * @param {String[]} arr - Array of paths to json (or node modules that export objects) files\n * @param {Boolean} [deep=false] - If it should perform a deep merge\n * @param {Function} collision - A function to be called when a name collision happens that isn't a normal deep merge of objects\n * @param {Boolean} [source=true] - If json files are \"sources\", tag properties\n * @param {Object[]} [parsers=[]] - Custom file parsers\n * @returns {Object}\n */\nfunction combineJSON(arr, deep, collision, source, parsers=[]) {\n  var i, files = [],\n    to_ret = {};\n\n  for (i = 0; i < arr.length; i++) {\n    var new_files = glob.sync(arr[i], {});\n    files = files.concat(new_files);\n  }\n\n  for (i = 0; i < files.length; i++) {\n    var filePath = files[i];\n    var resolvedPath = path.isAbsolute(files[i])\n      ? files[i]\n      : path.resolve(process.cwd(), files[i]);\n    var file_content = null;\n\n    try {\n      // This delete force require(resolvedPath) to take the latest version of the file. It's handfull when using the node package along chokidar.\n      delete require.cache[resolvedPath];\n\n      // Iterate over custom parsers, if the file path matches the parser's\n      // pattern regex, use it's parse function to generate the object\n      parsers.forEach(({pattern, parse}) => {\n        if (resolvedPath.match(pattern)) {\n          file_content = parse({\n            contents: fs.readFileSync(resolvedPath, {encoding:'UTF-8'}),\n            filePath: resolvedPath\n          });\n        }\n      });\n\n      // If there is no file_content then no custom parser ran on that file\n      if (!file_content) {\n        file_content = deepExtend([file_content, require(resolvedPath)]);\n      }\n    } catch (e) {\n      e.message = 'Failed to load or parse JSON or JS Object: ' + e.message;\n      throw e;\n    }\n\n    // Add some side data on each property to make filtering easier\n    traverseObj(file_content, (obj) => {\n      if (obj.hasOwnProperty('value') && !obj.filePath) {\n        obj.filePath = filePath;\n\n        obj.isSource = source || source === undefined ? true : false;\n      }\n    });\n\n    if (deep) {\n      deepExtend([to_ret, file_content], collision);\n    } else {\n      Object.assign(to_ret, file_content);\n    }\n  }\n\n  return to_ret;\n}\n\nmodule.exports = combineJSON;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}