{"ast":null,"code":"/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n// no-op default\nconst defaultFileHeader = arr => arr;\n\nconst lineSeparator = `\\n`;\nconst defaultFormatting = {\n  lineSeparator,\n  prefix: ` * `,\n  header: `/**${lineSeparator}`,\n  footer: `${lineSeparator} */${lineSeparator}${lineSeparator}`\n};\n/**\n *\n * This is for creating the comment at the top of generated files with the generated at date.\n * It will use the custom file header if defined on the configuration, or use the\n * default file header.\n * @memberof module:formatHelpers\n * @param {Object} options\n * @param {File} options.file - The file object that is passed to the formatter.\n * @param {String} options.commentStyle - The only options are 'short' and 'xml', which will use the // or \\<!-- --> style comments respectively. Anything else will use \\/\\* style comments.\n * @param {Object} options.formatting - Custom formatting properties that define parts of a comment in code. The configurable strings are: prefix, lineSeparator, header, and footer.\n * @returns {String}\n * @example\n * ```js\n * StyleDictionary.registerFormat({\n *   name: 'myCustomFormat',\n *   formatter: function({ dictionary, file }) {\n *     return fileHeader({file, commentStyle: 'short'}) +\n *       dictionary.allTokens.map(token => `${token.name} = ${token.value}`)\n *         .join('\\n');\n *   }\n * });\n * ```\n */\n\nfunction fileHeader(_ref) {\n  let {\n    file = {},\n    commentStyle,\n    formatting = {}\n  } = _ref;\n  // showFileHeader is true by default\n  let showFileHeader = true;\n\n  if (file.options && typeof file.options.showFileHeader !== 'undefined') {\n    showFileHeader = file.options.showFileHeader;\n  } // Return empty string if the showFileHeader is false\n\n\n  if (!showFileHeader) return '';\n  let fn = defaultFileHeader;\n\n  if (file.options && typeof file.options.fileHeader === 'function') {\n    fn = file.options.fileHeader;\n  } // default header\n\n\n  const defaultHeader = [`Do not edit directly`, `Generated on ${new Date().toUTCString()}`];\n  let {\n    prefix,\n    lineSeparator,\n    header,\n    footer\n  } = Object.assign({}, defaultFormatting, formatting);\n\n  if (commentStyle === 'short') {\n    prefix = `// `;\n    header = `${lineSeparator}`;\n    footer = `${lineSeparator}${lineSeparator}`;\n  } else if (commentStyle === 'xml') {\n    prefix = `  `;\n    header = `<!--${lineSeparator}`;\n    footer = `${lineSeparator}-->`;\n  }\n\n  return `${header}${fn(defaultHeader).map(line => `${prefix}${line}`).join(lineSeparator)}${footer}`;\n}\n\nmodule.exports = fileHeader;","map":{"version":3,"names":["defaultFileHeader","arr","lineSeparator","defaultFormatting","prefix","header","footer","fileHeader","file","commentStyle","formatting","showFileHeader","options","fn","defaultHeader","Date","toUTCString","Object","assign","map","line","join","module","exports"],"sources":["/Users/braxtoncoats/Github/bcd/node_modules/style-dictionary/lib/common/formatHelpers/fileHeader.js"],"sourcesContent":["/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n// no-op default\nconst defaultFileHeader = (arr) => arr\n\nconst lineSeparator = `\\n`;\nconst defaultFormatting = {\n  lineSeparator,\n  prefix: ` * `,\n  header: `/**${lineSeparator}`,\n  footer: `${lineSeparator} */${lineSeparator}${lineSeparator}`\n}\n\n/**\n *\n * This is for creating the comment at the top of generated files with the generated at date.\n * It will use the custom file header if defined on the configuration, or use the\n * default file header.\n * @memberof module:formatHelpers\n * @param {Object} options\n * @param {File} options.file - The file object that is passed to the formatter.\n * @param {String} options.commentStyle - The only options are 'short' and 'xml', which will use the // or \\<!-- --> style comments respectively. Anything else will use \\/\\* style comments.\n * @param {Object} options.formatting - Custom formatting properties that define parts of a comment in code. The configurable strings are: prefix, lineSeparator, header, and footer.\n * @returns {String}\n * @example\n * ```js\n * StyleDictionary.registerFormat({\n *   name: 'myCustomFormat',\n *   formatter: function({ dictionary, file }) {\n *     return fileHeader({file, commentStyle: 'short'}) +\n *       dictionary.allTokens.map(token => `${token.name} = ${token.value}`)\n *         .join('\\n');\n *   }\n * });\n * ```\n */\nfunction fileHeader({file={}, commentStyle, formatting={}}) {\n  // showFileHeader is true by default\n  let showFileHeader = true;\n  if (file.options && typeof file.options.showFileHeader !== 'undefined') {\n    showFileHeader = file.options.showFileHeader;\n  }\n\n  // Return empty string if the showFileHeader is false\n  if (!showFileHeader) return '';\n\n  let fn = defaultFileHeader;\n  if (file.options && typeof file.options.fileHeader === 'function') {\n    fn = file.options.fileHeader;\n  }\n\n  // default header\n  const defaultHeader = [\n    `Do not edit directly`,\n    `Generated on ${new Date().toUTCString()}`\n  ];\n\n\n  let {prefix, lineSeparator, header, footer} = Object.assign({}, defaultFormatting, formatting);\n\n  if (commentStyle === 'short') {\n    prefix = `// `;\n    header = `${lineSeparator}`;\n    footer = `${lineSeparator}${lineSeparator}`;\n  } else if (commentStyle === 'xml') {\n    prefix = `  `;\n    header = `<!--${lineSeparator}`;\n    footer = `${lineSeparator}-->`;\n  }\n\n  return `${header}${fn(defaultHeader)\n    .map(line => `${prefix}${line}`)\n    .join(lineSeparator)}${footer}`;\n}\n\nmodule.exports = fileHeader;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,MAAMA,iBAAiB,GAAIC,GAAD,IAASA,GAAnC;;AAEA,MAAMC,aAAa,GAAI,IAAvB;AACA,MAAMC,iBAAiB,GAAG;EACxBD,aADwB;EAExBE,MAAM,EAAG,KAFe;EAGxBC,MAAM,EAAG,MAAKH,aAAc,EAHJ;EAIxBI,MAAM,EAAG,GAAEJ,aAAc,MAAKA,aAAc,GAAEA,aAAc;AAJpC,CAA1B;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASK,UAAT,OAA4D;EAAA,IAAxC;IAACC,IAAI,GAAC,EAAN;IAAUC,YAAV;IAAwBC,UAAU,GAAC;EAAnC,CAAwC;EAC1D;EACA,IAAIC,cAAc,GAAG,IAArB;;EACA,IAAIH,IAAI,CAACI,OAAL,IAAgB,OAAOJ,IAAI,CAACI,OAAL,CAAaD,cAApB,KAAuC,WAA3D,EAAwE;IACtEA,cAAc,GAAGH,IAAI,CAACI,OAAL,CAAaD,cAA9B;EACD,CALyD,CAO1D;;;EACA,IAAI,CAACA,cAAL,EAAqB,OAAO,EAAP;EAErB,IAAIE,EAAE,GAAGb,iBAAT;;EACA,IAAIQ,IAAI,CAACI,OAAL,IAAgB,OAAOJ,IAAI,CAACI,OAAL,CAAaL,UAApB,KAAmC,UAAvD,EAAmE;IACjEM,EAAE,GAAGL,IAAI,CAACI,OAAL,CAAaL,UAAlB;EACD,CAbyD,CAe1D;;;EACA,MAAMO,aAAa,GAAG,CACnB,sBADmB,EAEnB,gBAAe,IAAIC,IAAJ,GAAWC,WAAX,EAAyB,EAFrB,CAAtB;EAMA,IAAI;IAACZ,MAAD;IAASF,aAAT;IAAwBG,MAAxB;IAAgCC;EAAhC,IAA0CW,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBf,iBAAlB,EAAqCO,UAArC,CAA9C;;EAEA,IAAID,YAAY,KAAK,OAArB,EAA8B;IAC5BL,MAAM,GAAI,KAAV;IACAC,MAAM,GAAI,GAAEH,aAAc,EAA1B;IACAI,MAAM,GAAI,GAAEJ,aAAc,GAAEA,aAAc,EAA1C;EACD,CAJD,MAIO,IAAIO,YAAY,KAAK,KAArB,EAA4B;IACjCL,MAAM,GAAI,IAAV;IACAC,MAAM,GAAI,OAAMH,aAAc,EAA9B;IACAI,MAAM,GAAI,GAAEJ,aAAc,KAA1B;EACD;;EAED,OAAQ,GAAEG,MAAO,GAAEQ,EAAE,CAACC,aAAD,CAAF,CAChBK,GADgB,CACZC,IAAI,IAAK,GAAEhB,MAAO,GAAEgB,IAAK,EADb,EAEhBC,IAFgB,CAEXnB,aAFW,CAEI,GAAEI,MAAO,EAFhC;AAGD;;AAEDgB,MAAM,CAACC,OAAP,GAAiBhB,UAAjB"},"metadata":{},"sourceType":"script"}