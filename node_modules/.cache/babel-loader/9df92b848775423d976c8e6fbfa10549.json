{"ast":null,"code":"/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst _template = require('lodash/template');\n\nconst GroupMessages = require('../utils/groupMessages');\n\nconst {\n  fileHeader,\n  formattedVariables,\n  getTypeScriptType,\n  iconsWithPrefix,\n  minifyDictionary,\n  sortByReference,\n  createPropertyFormatter,\n  sortByName,\n  setSwiftFileProperties\n} = require('./formatHelpers');\n\nconst SASS_MAP_FORMAT_DEPRECATION_WARNINGS = GroupMessages.GROUP.SassMapFormatDeprecationWarnings;\n/**\n * @namespace Formats\n */\n\nmodule.exports = {\n  /**\n   * Creates a CSS file with variable definitions based on the style dictionary\n   *\n   * @memberof Formats\n   * @kind member\n   * @param {Object} options\n   * @param {Boolean} [options.showFileHeader=true] - Whether or not to include a comment that has the build date\n   * @param {Boolean} [options.outputReferences=false] - Whether or not to keep [references](/#/formats?id=references-in-output-files) (a -> b -> c) in the output.\n   * @param {string} [options.selector] - Override the root css selector\n   * @example\n   * ```css\n   * :root {\n   *   --color-background-base: #f0f0f0;\n   *   --color-background-alt: #eeeeee;\n   * }\n   * ```\n   */\n  'css/variables': function (_ref) {\n    let {\n      dictionary,\n      options = {},\n      file\n    } = _ref;\n    const selector = options.selector ? options.selector : `:root`;\n    const {\n      outputReferences\n    } = options;\n    return fileHeader({\n      file\n    }) + `${selector} {\\n` + formattedVariables({\n      format: 'css',\n      dictionary,\n      outputReferences\n    }) + `\\n}\\n`;\n  },\n\n  /**\n   * Creates a SCSS file with a flat map based on the style dictionary\n   *\n   * Name the map by adding a 'mapName' attribute on the file object in your config.\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```scss\n   * $tokens: (\n   *   'color-background-base': #f0f0f0;\n   *   'color-background-alt': #eeeeee;\n   * )\n   * ```\n   */\n  'scss/map-flat': function (_ref2) {\n    let {\n      dictionary,\n      options,\n      file\n    } = _ref2;\n\n    const template = _template(fs.readFileSync(__dirname + '/templates/scss/map-flat.template'));\n\n    const {\n      allTokens\n    } = dictionary;\n    return template({\n      allTokens,\n      file,\n      options,\n      fileHeader\n    });\n  },\n  // This will soon be removed, is left here only for backwards compatibility\n  'sass/map-flat': function (_ref3) {\n    let {\n      dictionary,\n      options,\n      file\n    } = _ref3;\n    GroupMessages.add(SASS_MAP_FORMAT_DEPRECATION_WARNINGS, \"sass/map-flat\");\n    return module.exports['scss/map-flat']({\n      dictionary,\n      options,\n      file\n    });\n  },\n\n  /**\n   * Creates a SCSS file with a deep map based on the style dictionary.\n   *\n   * Name the map by adding a 'mapName' attribute on the file object in your config.\n   *\n   * @memberof Formats\n   * @kind member\n   * @param {Object} options\n   * @param {Boolean} [options.outputReferences=false] - Whether or not to keep [references](/#/formats?id=references-in-output-files) (a -> b -> c) in the output.\n   * @param {Boolean} [options.themeable=true] - Whether or not tokens should default to being themeable, if not otherwise specified per token.\n   * @example\n   * ```scss\n   * $color-background-base: #f0f0f0 !default;\n   * $color-background-alt: #eeeeee !default;\n   *\n   * $tokens: {\n   *   'color': (\n   *     'background': (\n   *       'base': $color-background-base,\n   *       'alt': $color-background-alt\n   *     )\n   *   )\n   * )\n   * ```\n   */\n  'scss/map-deep': function (_ref4) {\n    let {\n      dictionary,\n      options,\n      file\n    } = _ref4;\n\n    const mapTemplate = _template(fs.readFileSync(__dirname + '/templates/scss/map-deep.template')); // Default the \"themeable\" option to true for backward compatibility.\n\n\n    const {\n      outputReferences,\n      themeable = true\n    } = options;\n    return '\\n' + fileHeader({\n      file,\n      commentStyle: 'long'\n    }) + formattedVariables({\n      format: 'sass',\n      dictionary,\n      outputReferences,\n      themeable\n    }) + '\\n' + mapTemplate({\n      dictionary,\n      file\n    });\n  },\n  // This will soon be removed, is left here only for backwards compatibility\n  'sass/map-deep': function (_ref5) {\n    let {\n      dictionary,\n      options,\n      file\n    } = _ref5;\n    GroupMessages.add(SASS_MAP_FORMAT_DEPRECATION_WARNINGS, \"sass/map-deep\");\n    return module.exports['scss/map-deep']({\n      dictionary,\n      options,\n      file\n    });\n  },\n\n  /**\n   * Creates a SCSS file with variable definitions based on the style dictionary.\n   *\n   * Add `!default` to any variable by setting a `themeable: true` attribute in the token's definition.\n   *\n   * @memberof Formats\n   * @kind member\n   * @param {Object} options\n   * @param {Boolean} [options.showFileHeader=true] - Whether or not to include a comment that has the build date\n   * @param {Boolean} [options.outputReferences=false] - Whether or not to keep [references](/#/formats?id=references-in-output-files) (a -> b -> c) in the output.\n   * @param {Boolean} [options.themeable=false] - Whether or not tokens should default to being themeable, if not otherwise specified per token.\n   * @example\n   * ```scss\n   * $color-background-base: #f0f0f0;\n   * $color-background-alt: #eeeeee !default;\n   * ```\n   */\n  'scss/variables': function (_ref6) {\n    let {\n      dictionary,\n      options,\n      file\n    } = _ref6;\n    const {\n      outputReferences,\n      themeable = false\n    } = options;\n    return fileHeader({\n      file,\n      commentStyle: 'short'\n    }) + formattedVariables({\n      format: 'sass',\n      dictionary,\n      outputReferences,\n      themeable\n    });\n  },\n\n  /**\n   * Creates a SCSS file with variable definitions and helper classes for icons\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```scss\n   * $content-icon-email: '\\E001';\n   * .icon.email:before { content:$content-icon-email; }\n   * ```\n   */\n  'scss/icons': function (_ref7) {\n    let {\n      dictionary,\n      options,\n      file\n    } = _ref7;\n    return fileHeader({\n      file,\n      commentStyle: 'short'\n    }) + iconsWithPrefix('$', dictionary.allTokens, options);\n  },\n\n  /**\n   * Creates a LESS file with variable definitions based on the style dictionary\n   *\n   * @memberof Formats\n   * @kind member\n   * @param {Object} options\n   * @param {Boolean} [options.showFileHeader=true] - Whether or not to include a comment that has the build date\n   * @param {Boolean} [options.outputReferences=false] - Whether or not to keep [references](/#/formats?id=references-in-output-files) (a -> b -> c) in the output.\n   * @example\n   * ```less\n   * \\@color-background-base: #f0f0f0;\n   * \\@color-background-alt: #eeeeee;\n   * ```\n   */\n  'less/variables': function (_ref8) {\n    let {\n      dictionary,\n      options,\n      file\n    } = _ref8;\n    const {\n      outputReferences\n    } = options;\n    return fileHeader({\n      file,\n      commentStyle: 'short'\n    }) + formattedVariables({\n      format: 'less',\n      dictionary,\n      outputReferences\n    });\n  },\n\n  /**\n   * Creates a LESS file with variable definitions and helper classes for icons\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```less\n   * \\@content-icon-email: '\\E001';\n   * .icon.email:before { content:\\@content-icon-email; }\n   * ```\n   */\n  'less/icons': function (_ref9) {\n    let {\n      dictionary,\n      options,\n      file\n    } = _ref9;\n    return fileHeader({\n      file,\n      commentStyle: 'short'\n    }) + iconsWithPrefix('@', dictionary.allTokens, options);\n  },\n\n  /**\n   * Creates a Stylus file with variable definitions based on the style dictionary\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```stylus\n   * $color-background-base= #f0f0f0;\n   * $color-background-alt= #eeeeee;\n   * ```\n   */\n  'stylus/variables': function (_ref10) {\n    let {\n      dictionary,\n      options,\n      file\n    } = _ref10;\n    const {\n      outputReferences\n    } = options;\n    return fileHeader({\n      file,\n      commentStyle: 'short'\n    }) + formattedVariables({\n      format: 'stylus',\n      dictionary,\n      outputReferences\n    });\n  },\n\n  /**\n   * Creates a CommonJS module with the whole style dictionary\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```js\n   * module.exports = {\n   *   color: {\n   *     base: {\n   *        red: {\n   *          value: '#ff0000'\n   *        }\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  'javascript/module': function (_ref11) {\n    let {\n      dictionary,\n      file\n    } = _ref11;\n    return fileHeader({\n      file\n    }) + 'module.exports = ' + JSON.stringify(dictionary.tokens, null, 2) + ';';\n  },\n\n  /**\n   * Creates a CommonJS module with the whole style dictionary flattened to a single level.\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```js\n   * module.exports = {\n   *  \"ColorBaseRed\": \"#ff0000\"\n   *}\n   *```\n   */\n  'javascript/module-flat': function (_ref12) {\n    let {\n      dictionary,\n      file\n    } = _ref12;\n    return fileHeader({\n      file\n    }) + 'module.exports = ' + module.exports['json/flat']({\n      dictionary\n    }) + ';';\n  },\n\n  /**\n   * Creates a JS file a global var that is a plain javascript object of the style dictionary.\n   * Name the variable by adding a 'name' attribute on the file object in your config.\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```js\n   * var StyleDictionary = {\n   *   color: {\n   *     base: {\n   *        red: {\n   *          value: '#ff0000'\n   *        }\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  'javascript/object': function (_ref13) {\n    let {\n      dictionary,\n      file\n    } = _ref13;\n    return fileHeader({\n      file\n    }) + 'var ' + (file.name || '_styleDictionary') + ' = ' + JSON.stringify(dictionary.tokens, null, 2) + ';';\n  },\n\n  /**\n   * Creates a [UMD](https://github.com/umdjs/umd) module of the style\n   * dictionary. Name the module by adding a 'name' attribute on the file object\n   * in your config.\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```js\n   * (function(root, factory) {\n   *   if (typeof module === \"object\" && module.exports) {\n   *     module.exports = factory();\n   *   } else if (typeof exports === \"object\") {\n   *     exports[\"_styleDictionary\"] = factory();\n   *   } else if (typeof define === \"function\" && define.amd) {\n   *     define([], factory);\n   *   } else {\n   *     root[\"_styleDictionary\"] = factory();\n   *   }\n   * }(this, function() {\n   *   return {\n   *     \"color\": {\n   *       \"red\": {\n   *         \"value\": \"#FF0000\"\n   *       }\n   *     }\n   *   };\n   * }))\n   * ```\n   */\n  'javascript/umd': function (_ref14) {\n    let {\n      dictionary,\n      file\n    } = _ref14;\n    var name = file.name || '_styleDictionary';\n    return fileHeader({\n      file\n    }) + '(function(root, factory) {\\n' + '  if (typeof module === \"object\" && module.exports) {\\n' + '    module.exports = factory();\\n' + '  } else if (typeof exports === \"object\") {\\n' + '    exports[\"' + name + '\"] = factory();\\n' + '  } else if (typeof define === \"function\" && define.amd) {\\n' + '    define([], factory);\\n' + '  } else {\\n' + '    root[\"' + name + '\"] = factory();\\n' + '  }\\n' + '}(this, function() {\\n' + '  return ' + JSON.stringify(dictionary.tokens, null, 2) + ';\\n' + '}))\\n';\n  },\n\n  /**\n   * Creates a ES6 module of the style dictionary.\n   *\n   * ```json\n   * {\n   *   \"platforms\": {\n   *     \"js\": {\n   *       \"transformGroup\": \"js\",\n   *       \"files\": [\n   *         {\n   *           \"format\": \"javascript/es6\",\n   *           \"destination\": \"colors.js\",\n   *           \"filter\": {\n   *             \"attributes\": {\n   *               \"category\": \"color\"\n   *             }\n   *           }\n   *         }\n   *       ]\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```js\n   * export const ColorBackgroundBase = '#ffffff';\n   * export const ColorBackgroundAlt = '#fcfcfcfc';\n   * ```\n   */\n  'javascript/es6': function (_ref15) {\n    let {\n      dictionary,\n      file\n    } = _ref15;\n    return fileHeader({\n      file\n    }) + dictionary.allTokens.map(function (token) {\n      var to_ret = 'export const ' + token.name + ' = ' + JSON.stringify(token.value) + ';';\n      if (token.comment) to_ret = to_ret.concat(' // ' + token.comment);\n      return to_ret;\n    }).join('\\n');\n  },\n  // TypeScript declarations\n\n  /**\n   * Creates TypeScript declarations for ES6 modules\n   *\n   * ```json\n   * {\n   *   \"platforms\": {\n   *     \"ts\": {\n   *       \"transformGroup\": \"js\",\n   *       \"files\": [\n   *         {\n   *           \"format\": \"javascript/es6\",\n   *           \"destination\": \"colors.js\"\n   *         },\n   *         {\n   *           \"format\": \"typescript/es6-declarations\",\n   *           \"destination\": \"colors.d.ts\"\n   *         }\n   *       ]\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```typescript\n   * export const ColorBackgroundBase : string;\n   * export const ColorBackgroundAlt : string;\n   * ```\n   */\n  'typescript/es6-declarations': function (_ref16) {\n    let {\n      dictionary,\n      file\n    } = _ref16;\n    return fileHeader({\n      file\n    }) + dictionary.allProperties.map(function (prop) {\n      var to_ret_prop = 'export const ' + prop.name + ' : ' + getTypeScriptType(prop.value) + ';';\n      if (prop.comment) to_ret_prop = to_ret_prop.concat(' // ' + prop.comment);\n      return to_ret_prop;\n    }).join('\\n');\n  },\n\n  /**\n   * Creates TypeScript declarations for CommonJS module\n   *\n   * ```json\n   * {\n   *   \"platforms\": {\n   *     \"ts\": {\n   *       \"transformGroup\": \"js\",\n   *       \"files\": [\n   *         {\n   *           \"format\": \"javascript/module\",\n   *           \"destination\": \"colors.js\"\n   *         },\n   *         {\n   *           \"format\": \"typescript/module-declarations\",\n   *           \"destination\": \"colors.d.ts\"\n   *         }\n   *       ]\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```typescript\n   * export default tokens;\n   * declare interface DesignToken { value: string; name?: string; path?: string[]; comment?: string; attributes?: any; original?: any; }\n   * declare const tokens: {\n   *  \"color\": {\n   *    \"red\": DesignToken\n   *  }\n   * }\n   * ```\n   *\n   * As you can see above example output this does not generate 100% accurate d.ts.\n   * This is a compromise between of what style-dictionary can do to help and not bloating the library with rarely used dependencies.\n   *\n   * Thankfully you can extend style-dictionary very easily:\n   *\n   * ```js\n   * const JsonToTS = require('json-to-ts');\n   * StyleDictionaryPackage.registerFormat({\n   *   name: 'typescript/accurate-module-declarations',\n   *   formatter: function({ dictionary }) {\n   *     return 'declare const root: RootObject\\n' +\n   *     'export default root\\n' +\n   *     JsonToTS(dictionary.properties).join('\\n');\n   *   },\n   * });\n   * ```\n   */\n  'typescript/module-declarations': function (_ref17) {\n    let {\n      dictionary,\n      file,\n      options\n    } = _ref17;\n    const {\n      moduleName = `tokens`\n    } = options;\n\n    function treeWalker(obj) {\n      let type = Object.create(null);\n      let has = Object.prototype.hasOwnProperty.bind(obj);\n\n      if (has('value')) {\n        type = 'DesignToken';\n      } else {\n        for (var k in obj) if (has(k)) {\n          switch (typeof obj[k]) {\n            case 'object':\n              type[k] = treeWalker(obj[k]);\n          }\n        }\n      }\n\n      return type;\n    }\n\n    const designTokenInterface = fs.readFileSync(path.resolve(__dirname, `../../types/DesignToken.d.ts`), {\n      encoding: 'UTF-8'\n    }); // get the first and last lines to add to the format by\n    // looking for the first and last single-line comment\n\n    const lines = designTokenInterface.split('\\n');\n    const firstLine = lines.indexOf(`//start`) + 1;\n    const lastLine = lines.indexOf(`//end`);\n    const output = fileHeader({\n      file\n    }) + `export default ${moduleName};\n\ndeclare ${lines.slice(firstLine, lastLine).join(`\\n`)}\n\ndeclare const ${moduleName}: ${JSON.stringify(treeWalker(dictionary.tokens), null, 2)}`; // JSON stringify will quote strings, because this is a type we need\n    // it unquoted.\n\n    return output.replace(/\"DesignToken\"/g, 'DesignToken');\n  },\n  // Android templates\n\n  /**\n   * Creates a [resource](https://developer.android.com/guide/topics/resources/providing-resources) xml file. It is recommended to use a filter with this format\n   * as it is generally best practice in Android development to have resource files\n   * organized by type (color, dimension, string, etc.). However, a resource file\n   * with mixed resources will still work.\n   *\n   * This format will try to use the proper resource type for each token based on\n   * the category (color => color, size => dimen, etc.). However if you want to\n   * force a particular resource type you can provide a 'resourceType' attribute\n   * on the file configuration. You can also provide a 'resourceMap' if you\n   * don't use Style Dictionary's built-in CTI structure.\n   *\n   * @memberof Formats\n   * @kind member\n   * @param {Object} options\n   * @param {Boolean} [options.showFileHeader=true] - Whether or not to include a comment that has the build date\n   * @param {Boolean} [options.outputReferences=false] - Whether or not to keep [references](/#/formats?id=references-in-output-files) (a -> b -> c) in the output.\n   * @example\n   * ```xml\n   * <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   * <resources>\n   *  <color name=\"color_base_red_5\">#fffaf3f2</color>\n   *  <color name=\"color_base_red_30\">#fff0cccc</color>\n   *  <dimen name=\"size_font_base\">14sp</color>\n   * ```\n   */\n  'android/resources': function (_ref18) {\n    let {\n      dictionary,\n      options,\n      file\n    } = _ref18;\n\n    const template = _template(fs.readFileSync(__dirname + '/templates/android/resources.template'));\n\n    return template({\n      dictionary,\n      file,\n      options,\n      fileHeader\n    });\n  },\n\n  /**\n   * Creates a color resource xml file with all the colors in your style dictionary.\n   *\n   * It is recommended to use the 'android/resources' format with a custom filter\n   * instead of this format:\n   *\n   * ```javascript\n   * format: 'android/resources',\n   * filter: {\n   *   attributes: { category: 'color' }\n   * }\n   * ```\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```xml\n   * <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   * <resources>\n   *  <color name=\"color_base_red_5\">#fffaf3f2</color>\n   *  <color name=\"color_base_red_30\">#fff0cccc</color>\n   *  <color name=\"color_base_red_60\">#ffe19d9c</color>\n   * ```\n   */\n  'android/colors': function (_ref19) {\n    let {\n      dictionary,\n      options,\n      file\n    } = _ref19;\n\n    const template = _template(fs.readFileSync(__dirname + '/templates/android/colors.template'));\n\n    return template({\n      dictionary,\n      file,\n      options,\n      fileHeader\n    });\n  },\n\n  /**\n   * Creates a dimen resource xml file with all the sizes in your style dictionary.\n   *\n   * It is recommended to use the 'android/resources' format with a custom filter\n   * instead of this format:\n   *\n   * ```javascript\n   * format: 'android/resources',\n   * filter: {\n   *   attributes: { category: 'size' }\n   * }\n   * ```\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```xml\n   * <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   * <resources>\n   *  <dimen name=\"size_padding_tiny\">5.00dp</dimen>\n   *  <dimen name=\"size_padding_small\">10.00dp</dimen>\n   *  <dimen name=\"size_padding_medium\">15.00dp</dimen>\n   * ```\n   */\n  'android/dimens': function (_ref20) {\n    let {\n      dictionary,\n      options,\n      file\n    } = _ref20;\n\n    const template = _template(fs.readFileSync(__dirname + '/templates/android/dimens.template'));\n\n    return template({\n      dictionary,\n      file,\n      options,\n      fileHeader\n    });\n  },\n\n  /**\n   * Creates a dimen resource xml file with all the font sizes in your style dictionary.\n   *\n   * It is recommended to use the 'android/resources' format with a custom filter\n   * instead of this format:\n   *\n   * ```javascript\n   * format: 'android/resources',\n   * filter: {\n   *   attributes: { category: 'size' }\n   * }\n   * ```\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```xml\n   * <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   * <resources>\n   *  <dimen name=\"size_font_tiny\">10.00sp</dimen>\n   *  <dimen name=\"size_font_small\">13.00sp</dimen>\n   *  <dimen name=\"size_font_medium\">15.00sp</dimen>\n   * ```\n   */\n  'android/fontDimens': function (_ref21) {\n    let {\n      dictionary,\n      options,\n      file\n    } = _ref21;\n\n    const template = _template(fs.readFileSync(__dirname + '/templates/android/fontDimens.template'));\n\n    return template({\n      dictionary,\n      file,\n      options,\n      fileHeader\n    });\n  },\n\n  /**\n   * Creates a resource xml file with all the integers in your style dictionary. It filters your\n   * design tokens by `token.attributes.category === 'time'`\n   *\n   * It is recommended to use the 'android/resources' format with a custom filter\n   * instead of this format:\n   *\n   * ```javascript\n   * format: 'android/resources',\n   * filter: {\n   *   attributes: { category: 'time' }\n   * }\n   * ```\n   *\n   * @memberof Formats\n   * @kind member\n   * @todo Update the filter on this.\n   * @example\n   * ```xml\n   * <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   * <resources>\n   *   <integer name=\"time_duration_short\">1000</integer>\n   *   <integer name=\"time_duration_medium\">2000</integer>\n   *   <integer name=\"time_duration_long\">4000</integer>\n   * ```\n   */\n  'android/integers': function (_ref22) {\n    let {\n      dictionary,\n      options,\n      file\n    } = _ref22;\n\n    const template = _template(fs.readFileSync(__dirname + '/templates/android/integers.template'));\n\n    return template({\n      dictionary,\n      file,\n      options,\n      fileHeader\n    });\n  },\n\n  /**\n   * Creates a resource xml file with all the strings in your style dictionary. Filters your\n   * design tokens by `token.attributes.category === 'content'`\n   *\n   * It is recommended to use the 'android/resources' format with a custom filter\n   * instead of this format:\n   *\n   * ```javascript\n   * format: 'android/resources',\n   * filter: {\n   *   attributes: { category: 'content' }\n   * }\n   * ```\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```xml\n   * <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   * <resources>\n   *   <string name=\"content_icon_email\">&#xE001;</string>\n   *   <string name=\"content_icon_chevron_down\">&#xE002;</string>\n   *   <string name=\"content_icon_chevron_up\">&#xE003;</string>\n   * ```\n   */\n  'android/strings': function (_ref23) {\n    let {\n      dictionary,\n      options,\n      file\n    } = _ref23;\n\n    const template = _template(fs.readFileSync(__dirname + '/templates/android/strings.template'));\n\n    return template({\n      dictionary,\n      file,\n      options,\n      fileHeader\n    });\n  },\n  // Compose templates\n\n  /**\n   * Creates a Kotlin file for Compose containing an object with a `val` for each property.\n   *\n   * @memberof Formats\n   * @kind member\n   * @param {String} className The name of the generated Kotlin object\n   * @param {String} packageName The package for the generated Kotlin object\n   * @param {Object} options\n   * @param {Boolean} [options.showFileHeader=true] - Whether or not to include a comment that has the build date\n   * @param {Boolean} [options.outputReferences=false] - Whether or not to keep [references](/#/formats?id=references-in-output-files) (a -> b -> c) in the output.\n   * @example\n   * ```kotlin\n   * package com.example.tokens;\n   *\n   * import androidx.compose.ui.graphics.Color\n   *\n   * object StyleDictionary {\n   *  val colorBaseRed5 = Color(0xFFFAF3F2)\n   * }\n   * ```\n   */\n  'compose/object': function (_ref24) {\n    let {\n      dictionary,\n      options,\n      file\n    } = _ref24;\n\n    const template = _template(fs.readFileSync(__dirname + '/templates/compose/object.kt.template'));\n\n    let allProperties;\n    const {\n      outputReferences\n    } = options;\n    const formatProperty = createPropertyFormatter({\n      outputReferences,\n      dictionary,\n      formatting: {\n        suffix: '',\n        commentStyle: 'none' // We will add the comment in the format template\n\n      }\n    });\n\n    if (outputReferences) {\n      allProperties = [...dictionary.allProperties].sort(sortByReference(dictionary));\n    } else {\n      allProperties = [...dictionary.allProperties].sort(sortByName);\n    }\n\n    return template({\n      allProperties,\n      file,\n      options,\n      formatProperty,\n      fileHeader\n    });\n  },\n  // iOS templates\n\n  /**\n   * Creates an Objective-C header file with macros for design tokens\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```objectivec\n   * #import <Foundation/Foundation.h>\n   * #import <UIKit/UIKit.h>\n   *\n   * #define ColorFontLink [UIColor colorWithRed:0.00f green:0.47f blue:0.80f alpha:1.00f]\n   * #define SizeFontTiny 176.00f\n   * ```\n   */\n  'ios/macros': function (_ref25) {\n    let {\n      dictionary,\n      options,\n      file\n    } = _ref25;\n\n    const template = _template(fs.readFileSync(__dirname + '/templates/ios/macros.template'));\n\n    return template({\n      dictionary,\n      options,\n      file,\n      fileHeader\n    });\n  },\n\n  /**\n   * Creates an Objective-C plist file\n   *\n   * @memberof Formats\n   * @kind member\n   * @todo Fix this template and add example and usage\n   */\n  'ios/plist': function (_ref26) {\n    let {\n      dictionary,\n      options,\n      file\n    } = _ref26;\n\n    const template = _template(fs.readFileSync(__dirname + '/templates/ios/plist.template'));\n\n    return template({\n      dictionary,\n      options,\n      file,\n      fileHeader\n    });\n  },\n\n  /**\n   * Creates an Objective-C implementation file of a style dictionary singleton class\n   *\n   * @memberof Formats\n   * @kind member\n   * @todo Add example and usage\n   */\n  'ios/singleton.m': function (_ref27) {\n    let {\n      dictionary,\n      options,\n      file\n    } = _ref27;\n\n    const template = _template(fs.readFileSync(__dirname + '/templates/ios/singleton.m.template'));\n\n    return template({\n      dictionary,\n      options,\n      file,\n      fileHeader\n    });\n  },\n\n  /**\n   * Creates an Objective-C header file of a style dictionary singleton class\n   *\n   * @memberof Formats\n   * @kind member\n   * @todo Add example and usage\n   */\n  'ios/singleton.h': function (_ref28) {\n    let {\n      dictionary,\n      options,\n      file\n    } = _ref28;\n\n    const template = _template(fs.readFileSync(__dirname + '/templates/ios/singleton.h.template'));\n\n    return template({\n      dictionary,\n      options,\n      file,\n      fileHeader\n    });\n  },\n\n  /**\n   * Creates an Objective-C header file of a static style dictionary class\n   *\n   * @memberof Formats\n   * @kind member\n   * @todo Add example and usage\n   */\n  'ios/static.h': function (_ref29) {\n    let {\n      dictionary,\n      options,\n      file\n    } = _ref29;\n\n    const template = _template(fs.readFileSync(__dirname + '/templates/ios/static.h.template'));\n\n    return template({\n      dictionary,\n      options,\n      file,\n      fileHeader\n    });\n  },\n\n  /**\n   * Creates an Objective-C implementation file of a static style dictionary class\n   *\n   * @memberof Formats\n   * @kind member\n   * @todo Add example and usage\n   */\n  'ios/static.m': function (_ref30) {\n    let {\n      dictionary,\n      options,\n      file\n    } = _ref30;\n\n    const template = _template(fs.readFileSync(__dirname + '/templates/ios/static.m.template'));\n\n    return template({\n      dictionary,\n      options,\n      file,\n      fileHeader\n    });\n  },\n\n  /**\n   * Creates an Objective-C header file of a color class\n   *\n   * @memberof Formats\n   * @kind member\n   * @todo Add example and usage\n   */\n  'ios/colors.h': function (_ref31) {\n    let {\n      dictionary,\n      options,\n      file\n    } = _ref31;\n\n    const template = _template(fs.readFileSync(__dirname + '/templates/ios/colors.h.template'));\n\n    return template({\n      dictionary,\n      options,\n      file,\n      fileHeader\n    });\n  },\n\n  /**\n   * Creates an Objective-C implementation file of a color class\n   *\n   * @memberof Formats\n   * @kind member\n   * @todo Add example and usage\n   */\n  'ios/colors.m': function (_ref32) {\n    let {\n      dictionary,\n      options,\n      file\n    } = _ref32;\n\n    const template = _template(fs.readFileSync(__dirname + '/templates/ios/colors.m.template'));\n\n    return template({\n      dictionary,\n      options,\n      file,\n      fileHeader\n    });\n  },\n\n  /**\n   * Creates an Objective-C header file of strings\n   *\n   * @memberof Formats\n   * @kind member\n   * @todo Add example and usage\n   */\n  'ios/strings.h': function (_ref33) {\n    let {\n      dictionary,\n      options,\n      file\n    } = _ref33;\n\n    const template = _template(fs.readFileSync(__dirname + '/templates/ios/strings.h.template'));\n\n    return template({\n      dictionary,\n      options,\n      file,\n      fileHeader\n    });\n  },\n\n  /**\n   * Creates an Objective-C implementation file of strings\n   *\n   * @memberof Formats\n   * @kind member\n   * @todo Add example and usage\n   */\n  'ios/strings.m': function (_ref34) {\n    let {\n      dictionary,\n      options,\n      file\n    } = _ref34;\n\n    const template = _template(fs.readFileSync(__dirname + '/templates/ios/strings.m.template'));\n\n    return template({\n      dictionary,\n      options,\n      file,\n      fileHeader\n    });\n  },\n\n  /**\n   * Creates a Swift implementation file of a class with values. It adds default `class` object type, `public` access control and `UIKit` import.\n   *\n   * @memberof Formats\n   * @kind member\n   * @param {Object} options\n   * @param {String} [options.accessControl=public] - Level of [access](https://docs.swift.org/swift-book/LanguageGuide/AccessControl.html) of the generated swift object\n   * @param {String[]} [options.import=UIKit] - Modules to import. Can be a string or array of string\n   * @param {Boolean} [options.showFileHeader=true] - Whether or not to include a comment that has the build date\n   * @param {Boolean} [options.outputReferences=false] - Whether or not to keep [references](/#/formats?id=references-in-output-files) (a -> b -> c) in the output.\n   * @example\n   * ```swift\n   * public class StyleDictionary {\n   *   public static let colorBackgroundDanger = UIColor(red: 1.000, green: 0.918, blue: 0.914, alpha: 1)\n   * }\n   * ```\n   */\n  'ios-swift/class.swift': function (_ref35) {\n    let {\n      dictionary,\n      options,\n      file,\n      platform\n    } = _ref35;\n\n    const template = _template(fs.readFileSync(__dirname + '/templates/ios-swift/any.swift.template'));\n\n    let allTokens;\n    const {\n      outputReferences\n    } = options;\n    options = setSwiftFileProperties(options, 'class', platform.transformGroup);\n    const formatProperty = createPropertyFormatter({\n      outputReferences,\n      dictionary,\n      formatting: {\n        suffix: ''\n      }\n    });\n\n    if (outputReferences) {\n      allTokens = [...dictionary.allTokens].sort(sortByReference(dictionary));\n    } else {\n      allTokens = [...dictionary.allTokens].sort(sortByName);\n    }\n\n    return template({\n      allTokens,\n      file,\n      options,\n      formatProperty,\n      fileHeader\n    });\n  },\n\n  /**\n   * Creates a Swift implementation file of an enum with values. It adds default `enum` object type, `public` access control and `UIKit` import.\n   *\n   * @memberof Formats\n   * @kind member\n   * @param {Object} options\n   * @param {String} [options.accessControl=public] - Level of [access](https://docs.swift.org/swift-book/LanguageGuide/AccessControl.html) of the generated swift object\n   * @param {String[]} [options.import=UIKit] - Modules to import. Can be a string or array of string\n   * @param {Boolean} [options.showFileHeader=true] - Whether or not to include a comment that has the build date\n   * @param {Boolean} [options.outputReferences=false] - Whether or not to keep [references](/#/formats?id=references-in-output-files) (a -> b -> c) in the output.\n   * @example\n   * ```swift\n   * public enum StyleDictionary {\n   *   public static let colorBackgroundDanger = UIColor(red: 1.000, green: 0.918, blue: 0.914, alpha: 1)\n   * }\n   * ```\n   */\n  'ios-swift/enum.swift': function (_ref36) {\n    let {\n      dictionary,\n      options,\n      file,\n      platform\n    } = _ref36;\n\n    const template = _template(fs.readFileSync(__dirname + '/templates/ios-swift/any.swift.template'));\n\n    let allTokens;\n    const {\n      outputReferences\n    } = options;\n    options = setSwiftFileProperties(options, 'enum', platform.transformGroup);\n    const formatProperty = createPropertyFormatter({\n      outputReferences,\n      dictionary,\n      formatting: {\n        suffix: ''\n      }\n    });\n\n    if (outputReferences) {\n      allTokens = [...dictionary.allTokens].sort(sortByReference(dictionary));\n    } else {\n      allTokens = [...dictionary.allTokens].sort(sortByName);\n    }\n\n    return template({\n      allTokens,\n      file,\n      options,\n      formatProperty,\n      fileHeader\n    });\n  },\n\n  /**\n   * Creates a Swift implementation file of any given type with values. It has by default `class` object type, `public` access control and `UIKit` import.\n   *\n   * ```javascript\n   * format: 'ios-swift/any.swift',\n   * import: ['UIKit', 'AnotherModule'],\n   * objectType: 'struct',\n   * accessControl: 'internal',\n   * ```\n   *\n   * @memberof Formats\n   * @kind member\n   * @param {Object} options\n   * @param {String} [options.accessControl=public] - Level of [access](https://docs.swift.org/swift-book/LanguageGuide/AccessControl.html) of the generated swift object\n   * @param {String[]} [options.import=UIKit] - Modules to import. Can be a string or array of strings\n   * @param {String} [options.objectType=class] - The type of the generated Swift object\n   * @param {Boolean} [options.showFileHeader=true] - Whether or not to include a comment that has the build date\n   * @param {Boolean} [options.outputReferences=false] - Whether or not to keep [references](/#/formats?id=references-in-output-files) (a -> b -> c) in the output.\n   * @example\n   * ```swift\n   * import UIKit\n   * import AnotherModule\n   *\n   * internal struct StyleDictionary {\n   *   internal static let colorBackgroundDanger = UIColor(red: 1.000, green: 0.918, blue: 0.914, alpha: 1)\n   * }\n   * ```\n   */\n  'ios-swift/any.swift': function (_ref37) {\n    let {\n      dictionary,\n      options,\n      file,\n      platform\n    } = _ref37;\n\n    const template = _template(fs.readFileSync(__dirname + '/templates/ios-swift/any.swift.template'));\n\n    let allTokens;\n    const {\n      outputReferences\n    } = options;\n    options = setSwiftFileProperties(options, options.objectType, platform.transformGroup);\n    const formatProperty = createPropertyFormatter({\n      outputReferences,\n      dictionary,\n      formatting: {\n        suffix: ''\n      }\n    });\n\n    if (outputReferences) {\n      allTokens = [...dictionary.allTokens].sort(sortByReference(dictionary));\n    } else {\n      allTokens = [...dictionary.allTokens].sort(sortByName);\n    }\n\n    return template({\n      allTokens,\n      file,\n      options,\n      formatProperty,\n      fileHeader\n    });\n  },\n  // Css templates\n\n  /**\n   * Creates CSS file with @font-face declarations\n   *\n   * @memberof Formats\n   * @kind member\n   * @todo Add example and usage\n   */\n  'css/fonts.css': _template(fs.readFileSync(__dirname + '/templates/css/fonts.css.template')),\n  // Web templates\n\n  /**\n   * Creates a JSON file of the style dictionary.\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```json\n   * {\n   *   \"color\": {\n   *     \"base\": {\n   *        \"red\": {\n   *          \"value\": \"#ff0000\"\n   *        }\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  'json': function (_ref38) {\n    let {\n      dictionary\n    } = _ref38;\n    return JSON.stringify(dictionary.tokens, null, 2);\n  },\n\n  /**\n   * Creates a JSON file of the assets defined in the style dictionary.\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```js\n   * {\n   *   \"asset\": {\n   *     \"image\": {\n   *        \"logo\": {\n   *          \"value\": \"assets/logo.png\"\n   *        }\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  'json/asset': function (_ref39) {\n    let {\n      dictionary\n    } = _ref39;\n    return JSON.stringify({\n      asset: dictionary.tokens.asset\n    }, null, 2);\n  },\n\n  /**\n   * Creates a JSON nested file of the style dictionary.\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```json\n   * {\n   *   \"color\": {\n   *     \"base\": {\n   *        \"red\": \"#ff0000\"\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  'json/nested': function (_ref40) {\n    let {\n      dictionary\n    } = _ref40;\n    return JSON.stringify(minifyDictionary(dictionary.tokens), null, 2);\n  },\n\n  /**\n   * Creates a JSON flat file of the style dictionary.\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```json\n   * {\n   *   \"color-base-red\": \"#ff0000\"\n   * }\n   * ```\n   */\n  'json/flat': function (_ref41) {\n    let {\n      dictionary\n    } = _ref41;\n    return '{\\n' + dictionary.allTokens.map(function (token) {\n      return `  \"${token.name}\": ${JSON.stringify(token.value)}`;\n    }).join(',\\n') + '\\n}';\n  },\n\n  /**\n   * Creates a sketchpalette file of all the base colors\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```json\n   * {\n   *   \"compatibleVersion\": \"1.0\",\n   *   \"pluginVersion\": \"1.1\",\n   *   \"colors\": [\n   *     \"#ffffff\",\n   *     \"#ff0000\",\n   *     \"#fcfcfc\"\n   *   ]\n   * }\n   * ```\n   */\n  'sketch/palette': function (_ref42) {\n    let {\n      dictionary\n    } = _ref42;\n    var to_ret = {\n      'compatibleVersion': '1.0',\n      'pluginVersion': '1.1'\n    };\n    to_ret.colors = dictionary.allTokens.filter(function (token) {\n      return token.attributes.category === 'color' && token.attributes.type === 'base';\n    }).map(function (token) {\n      return token.value;\n    });\n    return JSON.stringify(to_ret, null, 2);\n  },\n\n  /**\n   * Creates a sketchpalette file compatible with version 2 of\n   * the sketchpalette plugin. To use this you should use the\n   * 'color/sketch' transform to get the correct value for the colors.\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```json\n   * {\n   *   \"compatibleVersion\": \"2.0\",\n   *   \"pluginVersion\": \"2.2\",\n   *   \"colors\": [\n   *     {name: \"red\", r: 1.0, g: 0.0, b: 0.0, a: 1.0},\n   *     {name: \"green\", r: 0.0, g: 1.0, b: 0.0, a: 1.0},\n   *     {name: \"blue\", r: 0.0, g: 0.0, b: 1.0, a: 1.0}\n   *   ]\n   * }\n   * ```\n   */\n  'sketch/palette/v2': function (_ref43) {\n    let {\n      dictionary\n    } = _ref43;\n    var to_ret = {\n      compatibleVersion: '2.0',\n      pluginVersion: '2.2',\n      colors: dictionary.allTokens.map(function (token) {\n        // Merging the token's value, which should be an object with r,g,b,a channels\n        return Object.assign({\n          name: token.name\n        }, token.value);\n      })\n    };\n    return JSON.stringify(to_ret, null, 2);\n  },\n  // Flutter templates\n\n  /**\n   *  Creates a Dart implementation file of a class with values\n   *\n   * @memberof Formats\n   * @kind member\n   * @param {Object} options\n   * @param {Boolean} [options.showFileHeader=true] - Whether or not to include a comment that has the build date\n   * @param {Boolean} [options.outputReferences=false] - Whether or not to keep [references](/#/formats?id=references-in-output-files) (a -> b -> c) in the output.\n   * @example\n   * ```dart\n   * import 'package:flutter/material.dart';\n   *\n   * class StyleDictionary {\n   *   StyleDictionary._();\n   *\n   *     static const colorBrandPrimary = Color(0x00ff5fff);\n   *     static const sizeFontSizeMedium = 16.00;\n   *     static const contentFontFamily1 = \"NewJune\";\n   * ```\n   */\n  'flutter/class.dart': function (_ref44) {\n    let {\n      dictionary,\n      options,\n      file\n    } = _ref44;\n\n    const template = _template(fs.readFileSync(__dirname + '/templates/flutter/class.dart.template'));\n\n    let allTokens;\n    const {\n      outputReferences\n    } = options;\n    const formatProperty = createPropertyFormatter({\n      outputReferences,\n      dictionary\n    });\n\n    if (outputReferences) {\n      allTokens = [...dictionary.allTokens].sort(sortByReference(dictionary));\n    } else {\n      allTokens = [...dictionary.allTokens].sort(sortByName);\n    }\n\n    return template({\n      allTokens,\n      file,\n      options,\n      formatProperty,\n      fileHeader\n    });\n  }\n}; // Mark which formats are nested\n\nmodule.exports['json/nested'].nested = true;\nmodule.exports['javascript/module'].nested = true;\nmodule.exports['javascript/object'].nested = true;","map":{"version":3,"names":["fs","require","path","_template","GroupMessages","fileHeader","formattedVariables","getTypeScriptType","iconsWithPrefix","minifyDictionary","sortByReference","createPropertyFormatter","sortByName","setSwiftFileProperties","SASS_MAP_FORMAT_DEPRECATION_WARNINGS","GROUP","SassMapFormatDeprecationWarnings","module","exports","dictionary","options","file","selector","outputReferences","format","template","readFileSync","__dirname","allTokens","add","mapTemplate","themeable","commentStyle","JSON","stringify","tokens","name","map","token","to_ret","value","comment","concat","join","allProperties","prop","to_ret_prop","moduleName","treeWalker","obj","type","Object","create","has","prototype","hasOwnProperty","bind","k","designTokenInterface","resolve","encoding","lines","split","firstLine","indexOf","lastLine","output","slice","replace","formatProperty","formatting","suffix","sort","platform","transformGroup","objectType","asset","colors","filter","attributes","category","compatibleVersion","pluginVersion","assign","nested"],"sources":["/Users/braxtoncoats/Github/bcd/node_modules/style-dictionary/lib/common/formats.js"],"sourcesContent":["/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nconst fs = require('fs');\nconst path = require('path');\nconst _template = require('lodash/template');\nconst GroupMessages = require('../utils/groupMessages');\nconst { fileHeader, formattedVariables, getTypeScriptType, iconsWithPrefix, minifyDictionary, sortByReference, createPropertyFormatter, sortByName, setSwiftFileProperties } = require('./formatHelpers');\n\nconst SASS_MAP_FORMAT_DEPRECATION_WARNINGS = GroupMessages.GROUP.SassMapFormatDeprecationWarnings;\n\n/**\n * @namespace Formats\n */\n\nmodule.exports = {\n  /**\n   * Creates a CSS file with variable definitions based on the style dictionary\n   *\n   * @memberof Formats\n   * @kind member\n   * @param {Object} options\n   * @param {Boolean} [options.showFileHeader=true] - Whether or not to include a comment that has the build date\n   * @param {Boolean} [options.outputReferences=false] - Whether or not to keep [references](/#/formats?id=references-in-output-files) (a -> b -> c) in the output.\n   * @param {string} [options.selector] - Override the root css selector\n   * @example\n   * ```css\n   * :root {\n   *   --color-background-base: #f0f0f0;\n   *   --color-background-alt: #eeeeee;\n   * }\n   * ```\n   */\n  'css/variables': function({dictionary, options={}, file}) {\n    const selector = options.selector ? options.selector : `:root`;\n    const { outputReferences } = options;\n    return fileHeader({file}) +\n      `${selector} {\\n` +\n      formattedVariables({format: 'css', dictionary, outputReferences}) +\n      `\\n}\\n`;\n  },\n\n  /**\n   * Creates a SCSS file with a flat map based on the style dictionary\n   *\n   * Name the map by adding a 'mapName' attribute on the file object in your config.\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```scss\n   * $tokens: (\n   *   'color-background-base': #f0f0f0;\n   *   'color-background-alt': #eeeeee;\n   * )\n   * ```\n   */\n  'scss/map-flat': function({dictionary, options, file}) {\n    const template = _template(fs.readFileSync(__dirname + '/templates/scss/map-flat.template'));\n    const { allTokens } = dictionary;\n    return template({allTokens, file, options, fileHeader});\n  },\n\n  // This will soon be removed, is left here only for backwards compatibility\n  'sass/map-flat': function({dictionary, options, file}) {\n    GroupMessages.add(SASS_MAP_FORMAT_DEPRECATION_WARNINGS, \"sass/map-flat\");\n    return module.exports['scss/map-flat']({dictionary, options, file});\n  },\n\n  /**\n   * Creates a SCSS file with a deep map based on the style dictionary.\n   *\n   * Name the map by adding a 'mapName' attribute on the file object in your config.\n   *\n   * @memberof Formats\n   * @kind member\n   * @param {Object} options\n   * @param {Boolean} [options.outputReferences=false] - Whether or not to keep [references](/#/formats?id=references-in-output-files) (a -> b -> c) in the output.\n   * @param {Boolean} [options.themeable=true] - Whether or not tokens should default to being themeable, if not otherwise specified per token.\n   * @example\n   * ```scss\n   * $color-background-base: #f0f0f0 !default;\n   * $color-background-alt: #eeeeee !default;\n   *\n   * $tokens: {\n   *   'color': (\n   *     'background': (\n   *       'base': $color-background-base,\n   *       'alt': $color-background-alt\n   *     )\n   *   )\n   * )\n   * ```\n   */\n  'scss/map-deep': function({dictionary, options, file}) {\n    const mapTemplate = _template(fs.readFileSync(__dirname + '/templates/scss/map-deep.template'));\n\n    // Default the \"themeable\" option to true for backward compatibility.\n    const { outputReferences, themeable = true } = options;\n    return '\\n' +\n      fileHeader({ file, commentStyle: 'long' }) +\n      formattedVariables({ format: 'sass', dictionary, outputReferences, themeable })\n      + '\\n' +\n      mapTemplate({dictionary, file});\n  },\n\n  // This will soon be removed, is left here only for backwards compatibility\n  'sass/map-deep': function({dictionary, options, file}) {\n    GroupMessages.add(SASS_MAP_FORMAT_DEPRECATION_WARNINGS, \"sass/map-deep\");\n    return module.exports['scss/map-deep']({dictionary, options, file});\n  },\n\n  /**\n   * Creates a SCSS file with variable definitions based on the style dictionary.\n   *\n   * Add `!default` to any variable by setting a `themeable: true` attribute in the token's definition.\n   *\n   * @memberof Formats\n   * @kind member\n   * @param {Object} options\n   * @param {Boolean} [options.showFileHeader=true] - Whether or not to include a comment that has the build date\n   * @param {Boolean} [options.outputReferences=false] - Whether or not to keep [references](/#/formats?id=references-in-output-files) (a -> b -> c) in the output.\n   * @param {Boolean} [options.themeable=false] - Whether or not tokens should default to being themeable, if not otherwise specified per token.\n   * @example\n   * ```scss\n   * $color-background-base: #f0f0f0;\n   * $color-background-alt: #eeeeee !default;\n   * ```\n   */\n  'scss/variables': function({dictionary, options, file}) {\n    const { outputReferences, themeable = false } = options;\n    return fileHeader({file, commentStyle: 'short'}) +\n      formattedVariables({format: 'sass', dictionary, outputReferences, themeable});\n  },\n\n  /**\n   * Creates a SCSS file with variable definitions and helper classes for icons\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```scss\n   * $content-icon-email: '\\E001';\n   * .icon.email:before { content:$content-icon-email; }\n   * ```\n   */\n  'scss/icons': function({dictionary, options, file}) {\n    return fileHeader({file, commentStyle: 'short'}) + iconsWithPrefix('$', dictionary.allTokens, options);\n  },\n\n  /**\n   * Creates a LESS file with variable definitions based on the style dictionary\n   *\n   * @memberof Formats\n   * @kind member\n   * @param {Object} options\n   * @param {Boolean} [options.showFileHeader=true] - Whether or not to include a comment that has the build date\n   * @param {Boolean} [options.outputReferences=false] - Whether or not to keep [references](/#/formats?id=references-in-output-files) (a -> b -> c) in the output.\n   * @example\n   * ```less\n   * \\@color-background-base: #f0f0f0;\n   * \\@color-background-alt: #eeeeee;\n   * ```\n   */\n  'less/variables': function({dictionary, options, file}) {\n    const { outputReferences } = options;\n    return fileHeader({file, commentStyle: 'short'}) +\n      formattedVariables({format: 'less', dictionary, outputReferences});\n  },\n\n  /**\n   * Creates a LESS file with variable definitions and helper classes for icons\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```less\n   * \\@content-icon-email: '\\E001';\n   * .icon.email:before { content:\\@content-icon-email; }\n   * ```\n   */\n  'less/icons': function({dictionary, options, file}) {\n    return fileHeader({file, commentStyle: 'short'}) + iconsWithPrefix('@', dictionary.allTokens, options);\n  },\n\n  /**\n   * Creates a Stylus file with variable definitions based on the style dictionary\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```stylus\n   * $color-background-base= #f0f0f0;\n   * $color-background-alt= #eeeeee;\n   * ```\n   */\n  'stylus/variables': function({dictionary, options, file}) {\n    const { outputReferences } = options;\n    return fileHeader({file, commentStyle: 'short'}) +\n      formattedVariables({format: 'stylus', dictionary, outputReferences});\n  },\n\n  /**\n   * Creates a CommonJS module with the whole style dictionary\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```js\n   * module.exports = {\n   *   color: {\n   *     base: {\n   *        red: {\n   *          value: '#ff0000'\n   *        }\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  'javascript/module': function({dictionary, file}) {\n    return fileHeader({file}) +\n    'module.exports = ' +\n      JSON.stringify(dictionary.tokens, null, 2) + ';';\n  },\n\n  /**\n   * Creates a CommonJS module with the whole style dictionary flattened to a single level.\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```js\n   * module.exports = {\n   *  \"ColorBaseRed\": \"#ff0000\"\n   *}\n   *```\n   */\n  'javascript/module-flat': function({dictionary, file}) {\n    return fileHeader({file}) +\n      'module.exports = ' +\n        module.exports['json/flat']({dictionary}) + ';';\n  },\n\n  /**\n   * Creates a JS file a global var that is a plain javascript object of the style dictionary.\n   * Name the variable by adding a 'name' attribute on the file object in your config.\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```js\n   * var StyleDictionary = {\n   *   color: {\n   *     base: {\n   *        red: {\n   *          value: '#ff0000'\n   *        }\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  'javascript/object': function({dictionary, file}) {\n    return  fileHeader({file}) +\n      'var ' +\n      (file.name || '_styleDictionary') +\n      ' = ' +\n      JSON.stringify(dictionary.tokens, null, 2) +\n      ';';\n  },\n\n  /**\n   * Creates a [UMD](https://github.com/umdjs/umd) module of the style\n   * dictionary. Name the module by adding a 'name' attribute on the file object\n   * in your config.\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```js\n   * (function(root, factory) {\n   *   if (typeof module === \"object\" && module.exports) {\n   *     module.exports = factory();\n   *   } else if (typeof exports === \"object\") {\n   *     exports[\"_styleDictionary\"] = factory();\n   *   } else if (typeof define === \"function\" && define.amd) {\n   *     define([], factory);\n   *   } else {\n   *     root[\"_styleDictionary\"] = factory();\n   *   }\n   * }(this, function() {\n   *   return {\n   *     \"color\": {\n   *       \"red\": {\n   *         \"value\": \"#FF0000\"\n   *       }\n   *     }\n   *   };\n   * }))\n   * ```\n   */\n  'javascript/umd': function({dictionary, file}) {\n    var name = file.name || '_styleDictionary'\n    return fileHeader({file}) +\n      '(function(root, factory) {\\n' +\n      '  if (typeof module === \"object\" && module.exports) {\\n' +\n      '    module.exports = factory();\\n' +\n      '  } else if (typeof exports === \"object\") {\\n' +\n      '    exports[\"' + name + '\"] = factory();\\n' +\n      '  } else if (typeof define === \"function\" && define.amd) {\\n' +\n      '    define([], factory);\\n' +\n      '  } else {\\n' +\n      '    root[\"' + name + '\"] = factory();\\n' +\n      '  }\\n' +\n      '}(this, function() {\\n' +\n      '  return ' + JSON.stringify(dictionary.tokens, null, 2) + ';\\n' +\n      '}))\\n'\n  },\n\n  /**\n   * Creates a ES6 module of the style dictionary.\n   *\n   * ```json\n   * {\n   *   \"platforms\": {\n   *     \"js\": {\n   *       \"transformGroup\": \"js\",\n   *       \"files\": [\n   *         {\n   *           \"format\": \"javascript/es6\",\n   *           \"destination\": \"colors.js\",\n   *           \"filter\": {\n   *             \"attributes\": {\n   *               \"category\": \"color\"\n   *             }\n   *           }\n   *         }\n   *       ]\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```js\n   * export const ColorBackgroundBase = '#ffffff';\n   * export const ColorBackgroundAlt = '#fcfcfcfc';\n   * ```\n   */\n  'javascript/es6': function({dictionary, file}) {\n    return fileHeader({file}) +\n      dictionary.allTokens.map(function(token) {\n        var to_ret = 'export const ' + token.name + ' = ' + JSON.stringify(token.value) + ';';\n        if (token.comment)\n          to_ret = to_ret.concat(' // ' + token.comment);\n        return to_ret;\n      }).join('\\n');\n  },\n\n  // TypeScript declarations\n  /**\n   * Creates TypeScript declarations for ES6 modules\n   *\n   * ```json\n   * {\n   *   \"platforms\": {\n   *     \"ts\": {\n   *       \"transformGroup\": \"js\",\n   *       \"files\": [\n   *         {\n   *           \"format\": \"javascript/es6\",\n   *           \"destination\": \"colors.js\"\n   *         },\n   *         {\n   *           \"format\": \"typescript/es6-declarations\",\n   *           \"destination\": \"colors.d.ts\"\n   *         }\n   *       ]\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```typescript\n   * export const ColorBackgroundBase : string;\n   * export const ColorBackgroundAlt : string;\n   * ```\n   */\n  'typescript/es6-declarations': function({dictionary, file}) {\n    return fileHeader({file}) +\n      dictionary.allProperties.map(function(prop) {\n        var to_ret_prop = 'export const ' + prop.name + ' : ' + getTypeScriptType(prop.value) + ';';\n        if (prop.comment)\n          to_ret_prop = to_ret_prop.concat(' // ' + prop.comment);\n        return to_ret_prop;\n      }).join('\\n');\n  },\n\n  /**\n   * Creates TypeScript declarations for CommonJS module\n   *\n   * ```json\n   * {\n   *   \"platforms\": {\n   *     \"ts\": {\n   *       \"transformGroup\": \"js\",\n   *       \"files\": [\n   *         {\n   *           \"format\": \"javascript/module\",\n   *           \"destination\": \"colors.js\"\n   *         },\n   *         {\n   *           \"format\": \"typescript/module-declarations\",\n   *           \"destination\": \"colors.d.ts\"\n   *         }\n   *       ]\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```typescript\n   * export default tokens;\n   * declare interface DesignToken { value: string; name?: string; path?: string[]; comment?: string; attributes?: any; original?: any; }\n   * declare const tokens: {\n   *  \"color\": {\n   *    \"red\": DesignToken\n   *  }\n   * }\n   * ```\n   *\n   * As you can see above example output this does not generate 100% accurate d.ts.\n   * This is a compromise between of what style-dictionary can do to help and not bloating the library with rarely used dependencies.\n   *\n   * Thankfully you can extend style-dictionary very easily:\n   *\n   * ```js\n   * const JsonToTS = require('json-to-ts');\n   * StyleDictionaryPackage.registerFormat({\n   *   name: 'typescript/accurate-module-declarations',\n   *   formatter: function({ dictionary }) {\n   *     return 'declare const root: RootObject\\n' +\n   *     'export default root\\n' +\n   *     JsonToTS(dictionary.properties).join('\\n');\n   *   },\n   * });\n   * ```\n   */\n  'typescript/module-declarations': function({dictionary, file, options}) {\n    const {moduleName=`tokens`} = options;\n    function treeWalker(obj) {\n      let type = Object.create(null);\n      let has = Object.prototype.hasOwnProperty.bind(obj);\n      if (has('value')) {\n        type = 'DesignToken';\n      } else {\n        for (var k in obj) if (has(k)) {\n          switch (typeof obj[k]) {\n            case 'object':\n              type[k] = treeWalker(obj[k]);\n          }\n        }\n      }\n      return type;\n    }\n    const designTokenInterface = fs.readFileSync(\n      path.resolve(__dirname, `../../types/DesignToken.d.ts`), {encoding:'UTF-8'}\n    );\n\n    // get the first and last lines to add to the format by\n    // looking for the first and last single-line comment\n    const lines = designTokenInterface\n      .split('\\n');\n    const firstLine = lines.indexOf(`//start`) + 1;\n    const lastLine = lines.indexOf(`//end`);\n\n    const output = fileHeader({file}) +\n`export default ${moduleName};\n\ndeclare ${lines.slice(firstLine, lastLine).join(`\\n`)}\n\ndeclare const ${moduleName}: ${JSON.stringify(treeWalker(dictionary.tokens), null, 2)}`;\n\n    // JSON stringify will quote strings, because this is a type we need\n    // it unquoted.\n    return output.replace(/\"DesignToken\"/g,'DesignToken');\n  },\n\n  // Android templates\n  /**\n   * Creates a [resource](https://developer.android.com/guide/topics/resources/providing-resources) xml file. It is recommended to use a filter with this format\n   * as it is generally best practice in Android development to have resource files\n   * organized by type (color, dimension, string, etc.). However, a resource file\n   * with mixed resources will still work.\n   *\n   * This format will try to use the proper resource type for each token based on\n   * the category (color => color, size => dimen, etc.). However if you want to\n   * force a particular resource type you can provide a 'resourceType' attribute\n   * on the file configuration. You can also provide a 'resourceMap' if you\n   * don't use Style Dictionary's built-in CTI structure.\n   *\n   * @memberof Formats\n   * @kind member\n   * @param {Object} options\n   * @param {Boolean} [options.showFileHeader=true] - Whether or not to include a comment that has the build date\n   * @param {Boolean} [options.outputReferences=false] - Whether or not to keep [references](/#/formats?id=references-in-output-files) (a -> b -> c) in the output.\n   * @example\n   * ```xml\n   * <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   * <resources>\n   *  <color name=\"color_base_red_5\">#fffaf3f2</color>\n   *  <color name=\"color_base_red_30\">#fff0cccc</color>\n   *  <dimen name=\"size_font_base\">14sp</color>\n   * ```\n   */\n  'android/resources': function({dictionary, options, file}) {\n    const template = _template(\n      fs.readFileSync(__dirname + '/templates/android/resources.template')\n    );\n    return template({dictionary, file, options, fileHeader});\n  },\n\n  /**\n   * Creates a color resource xml file with all the colors in your style dictionary.\n   *\n   * It is recommended to use the 'android/resources' format with a custom filter\n   * instead of this format:\n   *\n   * ```javascript\n   * format: 'android/resources',\n   * filter: {\n   *   attributes: { category: 'color' }\n   * }\n   * ```\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```xml\n   * <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   * <resources>\n   *  <color name=\"color_base_red_5\">#fffaf3f2</color>\n   *  <color name=\"color_base_red_30\">#fff0cccc</color>\n   *  <color name=\"color_base_red_60\">#ffe19d9c</color>\n   * ```\n   */\n  'android/colors': function({dictionary, options, file}) {\n    const template = _template(\n      fs.readFileSync(__dirname + '/templates/android/colors.template')\n    );\n    return template({dictionary, file, options, fileHeader});\n  },\n\n  /**\n   * Creates a dimen resource xml file with all the sizes in your style dictionary.\n   *\n   * It is recommended to use the 'android/resources' format with a custom filter\n   * instead of this format:\n   *\n   * ```javascript\n   * format: 'android/resources',\n   * filter: {\n   *   attributes: { category: 'size' }\n   * }\n   * ```\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```xml\n   * <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   * <resources>\n   *  <dimen name=\"size_padding_tiny\">5.00dp</dimen>\n   *  <dimen name=\"size_padding_small\">10.00dp</dimen>\n   *  <dimen name=\"size_padding_medium\">15.00dp</dimen>\n   * ```\n   */\n  'android/dimens': function({dictionary, options, file}) {\n    const template = _template(\n      fs.readFileSync(__dirname + '/templates/android/dimens.template')\n    );\n    return template({dictionary, file, options, fileHeader});\n  },\n\n  /**\n   * Creates a dimen resource xml file with all the font sizes in your style dictionary.\n   *\n   * It is recommended to use the 'android/resources' format with a custom filter\n   * instead of this format:\n   *\n   * ```javascript\n   * format: 'android/resources',\n   * filter: {\n   *   attributes: { category: 'size' }\n   * }\n   * ```\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```xml\n   * <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   * <resources>\n   *  <dimen name=\"size_font_tiny\">10.00sp</dimen>\n   *  <dimen name=\"size_font_small\">13.00sp</dimen>\n   *  <dimen name=\"size_font_medium\">15.00sp</dimen>\n   * ```\n   */\n  'android/fontDimens': function({dictionary, options, file}) {\n    const template = _template(\n      fs.readFileSync(__dirname + '/templates/android/fontDimens.template')\n    );\n    return template({dictionary, file, options, fileHeader});\n  },\n\n  /**\n   * Creates a resource xml file with all the integers in your style dictionary. It filters your\n   * design tokens by `token.attributes.category === 'time'`\n   *\n   * It is recommended to use the 'android/resources' format with a custom filter\n   * instead of this format:\n   *\n   * ```javascript\n   * format: 'android/resources',\n   * filter: {\n   *   attributes: { category: 'time' }\n   * }\n   * ```\n   *\n   * @memberof Formats\n   * @kind member\n   * @todo Update the filter on this.\n   * @example\n   * ```xml\n   * <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   * <resources>\n   *   <integer name=\"time_duration_short\">1000</integer>\n   *   <integer name=\"time_duration_medium\">2000</integer>\n   *   <integer name=\"time_duration_long\">4000</integer>\n   * ```\n   */\n  'android/integers': function({dictionary, options, file}) {\n    const template = _template(\n      fs.readFileSync(__dirname + '/templates/android/integers.template')\n    );\n    return template({dictionary, file, options, fileHeader});\n  },\n\n  /**\n   * Creates a resource xml file with all the strings in your style dictionary. Filters your\n   * design tokens by `token.attributes.category === 'content'`\n   *\n   * It is recommended to use the 'android/resources' format with a custom filter\n   * instead of this format:\n   *\n   * ```javascript\n   * format: 'android/resources',\n   * filter: {\n   *   attributes: { category: 'content' }\n   * }\n   * ```\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```xml\n   * <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   * <resources>\n   *   <string name=\"content_icon_email\">&#xE001;</string>\n   *   <string name=\"content_icon_chevron_down\">&#xE002;</string>\n   *   <string name=\"content_icon_chevron_up\">&#xE003;</string>\n   * ```\n   */\n  'android/strings': function({dictionary, options, file}) {\n    const template = _template(\n      fs.readFileSync(__dirname + '/templates/android/strings.template')\n    );\n    return template({dictionary, file, options, fileHeader});\n  },\n\n  // Compose templates\n  /**\n   * Creates a Kotlin file for Compose containing an object with a `val` for each property.\n   *\n   * @memberof Formats\n   * @kind member\n   * @param {String} className The name of the generated Kotlin object\n   * @param {String} packageName The package for the generated Kotlin object\n   * @param {Object} options\n   * @param {Boolean} [options.showFileHeader=true] - Whether or not to include a comment that has the build date\n   * @param {Boolean} [options.outputReferences=false] - Whether or not to keep [references](/#/formats?id=references-in-output-files) (a -> b -> c) in the output.\n   * @example\n   * ```kotlin\n   * package com.example.tokens;\n   *\n   * import androidx.compose.ui.graphics.Color\n   *\n   * object StyleDictionary {\n   *  val colorBaseRed5 = Color(0xFFFAF3F2)\n   * }\n   * ```\n   */\n  'compose/object': function({dictionary, options, file}) {\n    const template = _template(\n      fs.readFileSync(__dirname + '/templates/compose/object.kt.template')\n    );\n    let allProperties;\n    const { outputReferences } = options;\n    const formatProperty = createPropertyFormatter({\n      outputReferences,\n      dictionary,\n      formatting: {\n        suffix: '',\n        commentStyle: 'none' // We will add the comment in the format template\n      }\n    });\n\n    if (outputReferences) {\n      allProperties = [...dictionary.allProperties].sort(sortByReference(dictionary));\n    } else {\n      allProperties = [...dictionary.allProperties].sort(sortByName);\n    }\n\n    return template({allProperties, file, options, formatProperty, fileHeader});\n  },\n\n  // iOS templates\n\n  /**\n   * Creates an Objective-C header file with macros for design tokens\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```objectivec\n   * #import <Foundation/Foundation.h>\n   * #import <UIKit/UIKit.h>\n   *\n   * #define ColorFontLink [UIColor colorWithRed:0.00f green:0.47f blue:0.80f alpha:1.00f]\n   * #define SizeFontTiny 176.00f\n   * ```\n   */\n  'ios/macros': function({dictionary, options, file}) {\n    const template = _template(\n      fs.readFileSync(__dirname + '/templates/ios/macros.template')\n    );\n\n    return template({ dictionary, options, file, fileHeader });\n  },\n\n  /**\n   * Creates an Objective-C plist file\n   *\n   * @memberof Formats\n   * @kind member\n   * @todo Fix this template and add example and usage\n   */\n  'ios/plist': function({dictionary, options, file}) {\n    const template = _template(\n      fs.readFileSync(__dirname + '/templates/ios/plist.template')\n    );\n\n    return template({ dictionary, options, file, fileHeader });\n  },\n\n  /**\n   * Creates an Objective-C implementation file of a style dictionary singleton class\n   *\n   * @memberof Formats\n   * @kind member\n   * @todo Add example and usage\n   */\n  'ios/singleton.m': function({dictionary, options, file}) {\n    const template = _template(\n      fs.readFileSync(__dirname + '/templates/ios/singleton.m.template')\n    );\n\n    return template({ dictionary, options, file, fileHeader });\n  },\n\n  /**\n   * Creates an Objective-C header file of a style dictionary singleton class\n   *\n   * @memberof Formats\n   * @kind member\n   * @todo Add example and usage\n   */\n  'ios/singleton.h': function({dictionary, options, file}) {\n    const template = _template(\n      fs.readFileSync(__dirname + '/templates/ios/singleton.h.template')\n    );\n\n    return template({ dictionary, options, file, fileHeader });\n  },\n\n  /**\n   * Creates an Objective-C header file of a static style dictionary class\n   *\n   * @memberof Formats\n   * @kind member\n   * @todo Add example and usage\n   */\n  'ios/static.h': function({dictionary, options, file}) {\n    const template = _template(\n      fs.readFileSync(__dirname + '/templates/ios/static.h.template')\n    );\n\n    return template({ dictionary, options, file, fileHeader });\n  },\n\n  /**\n   * Creates an Objective-C implementation file of a static style dictionary class\n   *\n   * @memberof Formats\n   * @kind member\n   * @todo Add example and usage\n   */\n  'ios/static.m': function({dictionary, options, file}) {\n    const template = _template(\n      fs.readFileSync(__dirname + '/templates/ios/static.m.template')\n    );\n\n    return template({ dictionary, options, file, fileHeader });\n  },\n\n  /**\n   * Creates an Objective-C header file of a color class\n   *\n   * @memberof Formats\n   * @kind member\n   * @todo Add example and usage\n   */\n  'ios/colors.h': function({dictionary, options, file}) {\n    const template = _template(\n      fs.readFileSync(__dirname + '/templates/ios/colors.h.template')\n    );\n\n    return template({ dictionary, options, file, fileHeader });\n  },\n\n  /**\n   * Creates an Objective-C implementation file of a color class\n   *\n   * @memberof Formats\n   * @kind member\n   * @todo Add example and usage\n   */\n  'ios/colors.m': function({dictionary, options, file}) {\n    const template = _template(\n      fs.readFileSync(__dirname + '/templates/ios/colors.m.template')\n    );\n\n    return template({ dictionary, options, file, fileHeader });\n  },\n\n  /**\n   * Creates an Objective-C header file of strings\n   *\n   * @memberof Formats\n   * @kind member\n   * @todo Add example and usage\n   */\n  'ios/strings.h': function({dictionary, options, file}) {\n    const template = _template(\n      fs.readFileSync(__dirname + '/templates/ios/strings.h.template')\n    );\n\n    return template({ dictionary, options, file, fileHeader });\n  },\n\n  /**\n   * Creates an Objective-C implementation file of strings\n   *\n   * @memberof Formats\n   * @kind member\n   * @todo Add example and usage\n   */\n  'ios/strings.m': function({dictionary, options, file}) {\n    const template = _template(\n      fs.readFileSync(__dirname + '/templates/ios/strings.m.template')\n    );\n\n    return template({ dictionary, options, file, fileHeader });\n  },\n\n  /**\n   * Creates a Swift implementation file of a class with values. It adds default `class` object type, `public` access control and `UIKit` import.\n   *\n   * @memberof Formats\n   * @kind member\n   * @param {Object} options\n   * @param {String} [options.accessControl=public] - Level of [access](https://docs.swift.org/swift-book/LanguageGuide/AccessControl.html) of the generated swift object\n   * @param {String[]} [options.import=UIKit] - Modules to import. Can be a string or array of string\n   * @param {Boolean} [options.showFileHeader=true] - Whether or not to include a comment that has the build date\n   * @param {Boolean} [options.outputReferences=false] - Whether or not to keep [references](/#/formats?id=references-in-output-files) (a -> b -> c) in the output.\n   * @example\n   * ```swift\n   * public class StyleDictionary {\n   *   public static let colorBackgroundDanger = UIColor(red: 1.000, green: 0.918, blue: 0.914, alpha: 1)\n   * }\n   * ```\n   */\n  'ios-swift/class.swift': function({dictionary, options, file, platform}) {\n    const template = _template(\n      fs.readFileSync(__dirname + '/templates/ios-swift/any.swift.template')\n    );\n    let allTokens;\n    const { outputReferences } = options;\n    options = setSwiftFileProperties(options, 'class', platform.transformGroup);\n    const formatProperty = createPropertyFormatter({\n      outputReferences,\n      dictionary,\n      formatting: {\n        suffix: ''\n      }\n    });\n\n    if (outputReferences) {\n      allTokens = [...dictionary.allTokens].sort(sortByReference(dictionary));\n    } else {\n      allTokens = [...dictionary.allTokens].sort(sortByName);\n    }\n\n    return template({allTokens, file, options, formatProperty, fileHeader});\n  },\n\n  /**\n   * Creates a Swift implementation file of an enum with values. It adds default `enum` object type, `public` access control and `UIKit` import.\n   *\n   * @memberof Formats\n   * @kind member\n   * @param {Object} options\n   * @param {String} [options.accessControl=public] - Level of [access](https://docs.swift.org/swift-book/LanguageGuide/AccessControl.html) of the generated swift object\n   * @param {String[]} [options.import=UIKit] - Modules to import. Can be a string or array of string\n   * @param {Boolean} [options.showFileHeader=true] - Whether or not to include a comment that has the build date\n   * @param {Boolean} [options.outputReferences=false] - Whether or not to keep [references](/#/formats?id=references-in-output-files) (a -> b -> c) in the output.\n   * @example\n   * ```swift\n   * public enum StyleDictionary {\n   *   public static let colorBackgroundDanger = UIColor(red: 1.000, green: 0.918, blue: 0.914, alpha: 1)\n   * }\n   * ```\n   */\n  'ios-swift/enum.swift': function({dictionary, options, file, platform}) {\n    const template = _template(\n      fs.readFileSync(__dirname + '/templates/ios-swift/any.swift.template')\n    );\n    let allTokens;\n    const { outputReferences } = options;\n    options = setSwiftFileProperties(options, 'enum', platform.transformGroup);\n    const formatProperty = createPropertyFormatter({\n      outputReferences,\n      dictionary,\n      formatting: {\n        suffix: ''\n      }\n    });\n\n    if (outputReferences) {\n      allTokens = [...dictionary.allTokens].sort(sortByReference(dictionary));\n    } else {\n      allTokens = [...dictionary.allTokens].sort(sortByName);\n    }\n    return template({allTokens, file, options, formatProperty, fileHeader});\n  },\n\n  /**\n   * Creates a Swift implementation file of any given type with values. It has by default `class` object type, `public` access control and `UIKit` import.\n   *\n   * ```javascript\n   * format: 'ios-swift/any.swift',\n   * import: ['UIKit', 'AnotherModule'],\n   * objectType: 'struct',\n   * accessControl: 'internal',\n   * ```\n   *\n   * @memberof Formats\n   * @kind member\n   * @param {Object} options\n   * @param {String} [options.accessControl=public] - Level of [access](https://docs.swift.org/swift-book/LanguageGuide/AccessControl.html) of the generated swift object\n   * @param {String[]} [options.import=UIKit] - Modules to import. Can be a string or array of strings\n   * @param {String} [options.objectType=class] - The type of the generated Swift object\n   * @param {Boolean} [options.showFileHeader=true] - Whether or not to include a comment that has the build date\n   * @param {Boolean} [options.outputReferences=false] - Whether or not to keep [references](/#/formats?id=references-in-output-files) (a -> b -> c) in the output.\n   * @example\n   * ```swift\n   * import UIKit\n   * import AnotherModule\n   *\n   * internal struct StyleDictionary {\n   *   internal static let colorBackgroundDanger = UIColor(red: 1.000, green: 0.918, blue: 0.914, alpha: 1)\n   * }\n   * ```\n   */\n   'ios-swift/any.swift': function({ dictionary, options, file, platform }) {\n    const template = _template(\n      fs.readFileSync(__dirname + '/templates/ios-swift/any.swift.template')\n    );\n    let allTokens;\n    const { outputReferences } = options;\n    options = setSwiftFileProperties(options, options.objectType, platform.transformGroup);\n    const formatProperty = createPropertyFormatter({\n      outputReferences,\n      dictionary,\n      formatting: {\n        suffix: ''\n      }\n    });\n\n    if (outputReferences) {\n      allTokens = [...dictionary.allTokens].sort(sortByReference(dictionary));\n    } else {\n      allTokens = [...dictionary.allTokens].sort(sortByName);\n    }\n    return template({allTokens, file, options, formatProperty, fileHeader});\n  },\n\n  // Css templates\n\n  /**\n   * Creates CSS file with @font-face declarations\n   *\n   * @memberof Formats\n   * @kind member\n   * @todo Add example and usage\n   */\n  'css/fonts.css': _template(\n    fs.readFileSync(__dirname + '/templates/css/fonts.css.template')\n  ),\n\n  // Web templates\n\n  /**\n   * Creates a JSON file of the style dictionary.\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```json\n   * {\n   *   \"color\": {\n   *     \"base\": {\n   *        \"red\": {\n   *          \"value\": \"#ff0000\"\n   *        }\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  'json': function({dictionary}) {\n    return JSON.stringify(dictionary.tokens, null, 2);\n  },\n\n  /**\n   * Creates a JSON file of the assets defined in the style dictionary.\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```js\n   * {\n   *   \"asset\": {\n   *     \"image\": {\n   *        \"logo\": {\n   *          \"value\": \"assets/logo.png\"\n   *        }\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  'json/asset': function({dictionary}) {\n    return JSON.stringify({asset: dictionary.tokens.asset}, null, 2);\n  },\n\n  /**\n   * Creates a JSON nested file of the style dictionary.\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```json\n   * {\n   *   \"color\": {\n   *     \"base\": {\n   *        \"red\": \"#ff0000\"\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  'json/nested': function({dictionary}) {\n    return JSON.stringify(minifyDictionary(dictionary.tokens), null, 2);\n  },\n\n  /**\n   * Creates a JSON flat file of the style dictionary.\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```json\n   * {\n   *   \"color-base-red\": \"#ff0000\"\n   * }\n   * ```\n   */\n  'json/flat': function({dictionary}) {\n    return '{\\n' + dictionary.allTokens.map(function(token) {\n        return `  \"${token.name}\": ${JSON.stringify(token.value)}`;\n      }).join(',\\n') + '\\n}';\n  },\n\n  /**\n   * Creates a sketchpalette file of all the base colors\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```json\n   * {\n   *   \"compatibleVersion\": \"1.0\",\n   *   \"pluginVersion\": \"1.1\",\n   *   \"colors\": [\n   *     \"#ffffff\",\n   *     \"#ff0000\",\n   *     \"#fcfcfc\"\n   *   ]\n   * }\n   * ```\n   */\n  'sketch/palette': function({dictionary}) {\n    var to_ret = {\n      'compatibleVersion':'1.0',\n      'pluginVersion':'1.1'\n    };\n    to_ret.colors = dictionary.allTokens\n      .filter(function(token) {\n        return token.attributes.category === 'color' && token.attributes.type === 'base';\n      })\n      .map(function(token) {\n        return token.value;\n      });\n    return JSON.stringify(to_ret, null, 2);\n  },\n\n  /**\n   * Creates a sketchpalette file compatible with version 2 of\n   * the sketchpalette plugin. To use this you should use the\n   * 'color/sketch' transform to get the correct value for the colors.\n   *\n   * @memberof Formats\n   * @kind member\n   * @example\n   * ```json\n   * {\n   *   \"compatibleVersion\": \"2.0\",\n   *   \"pluginVersion\": \"2.2\",\n   *   \"colors\": [\n   *     {name: \"red\", r: 1.0, g: 0.0, b: 0.0, a: 1.0},\n   *     {name: \"green\", r: 0.0, g: 1.0, b: 0.0, a: 1.0},\n   *     {name: \"blue\", r: 0.0, g: 0.0, b: 1.0, a: 1.0}\n   *   ]\n   * }\n   * ```\n   */\n  'sketch/palette/v2': function({dictionary}) {\n    var to_ret = {\n      compatibleVersion: '2.0',\n      pluginVersion: '2.2',\n      colors: dictionary.allTokens.map(function(token) {\n        // Merging the token's value, which should be an object with r,g,b,a channels\n        return Object.assign({\n          name: token.name\n        }, token.value)\n      })\n    };\n    return JSON.stringify(to_ret, null, 2);\n  },\n\n\n  // Flutter templates\n  /**\n   *  Creates a Dart implementation file of a class with values\n   *\n   * @memberof Formats\n   * @kind member\n   * @param {Object} options\n   * @param {Boolean} [options.showFileHeader=true] - Whether or not to include a comment that has the build date\n   * @param {Boolean} [options.outputReferences=false] - Whether or not to keep [references](/#/formats?id=references-in-output-files) (a -> b -> c) in the output.\n   * @example\n   * ```dart\n   * import 'package:flutter/material.dart';\n   *\n   * class StyleDictionary {\n   *   StyleDictionary._();\n   *\n   *     static const colorBrandPrimary = Color(0x00ff5fff);\n   *     static const sizeFontSizeMedium = 16.00;\n   *     static const contentFontFamily1 = \"NewJune\";\n   * ```\n   */\n  'flutter/class.dart': function({dictionary, options, file}) {\n    const template = _template(\n      fs.readFileSync(__dirname + '/templates/flutter/class.dart.template')\n    );\n    let allTokens;\n    const { outputReferences } = options;\n    const formatProperty = createPropertyFormatter({\n      outputReferences,\n      dictionary\n    });\n\n    if (outputReferences) {\n      allTokens = [...dictionary.allTokens].sort(sortByReference(dictionary));\n    } else {\n      allTokens = [...dictionary.allTokens].sort(sortByName)\n    }\n    return template({allTokens, file, options, formatProperty, fileHeader});\n  },\n};\n\n// Mark which formats are nested\nmodule.exports['json/nested'].nested = true;\nmodule.exports['javascript/module'].nested = true;\nmodule.exports['javascript/object'].nested = true;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAMG,aAAa,GAAGH,OAAO,CAAC,wBAAD,CAA7B;;AACA,MAAM;EAAEI,UAAF;EAAcC,kBAAd;EAAkCC,iBAAlC;EAAqDC,eAArD;EAAsEC,gBAAtE;EAAwFC,eAAxF;EAAyGC,uBAAzG;EAAkIC,UAAlI;EAA8IC;AAA9I,IAAyKZ,OAAO,CAAC,iBAAD,CAAtL;;AAEA,MAAMa,oCAAoC,GAAGV,aAAa,CAACW,KAAd,CAAoBC,gCAAjE;AAEA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAP,GAAiB;EACf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,iBAAiB,gBAAyC;IAAA,IAAhC;MAACC,UAAD;MAAaC,OAAO,GAAC,EAArB;MAAyBC;IAAzB,CAAgC;IACxD,MAAMC,QAAQ,GAAGF,OAAO,CAACE,QAAR,GAAmBF,OAAO,CAACE,QAA3B,GAAuC,OAAxD;IACA,MAAM;MAAEC;IAAF,IAAuBH,OAA7B;IACA,OAAOf,UAAU,CAAC;MAACgB;IAAD,CAAD,CAAV,GACJ,GAAEC,QAAS,MADP,GAELhB,kBAAkB,CAAC;MAACkB,MAAM,EAAE,KAAT;MAAgBL,UAAhB;MAA4BI;IAA5B,CAAD,CAFb,GAGJ,OAHH;EAID,CAzBc;;EA2Bf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,iBAAiB,iBAAsC;IAAA,IAA7B;MAACJ,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAA6B;;IACrD,MAAMI,QAAQ,GAAGtB,SAAS,CAACH,EAAE,CAAC0B,YAAH,CAAgBC,SAAS,GAAG,mCAA5B,CAAD,CAA1B;;IACA,MAAM;MAAEC;IAAF,IAAgBT,UAAtB;IACA,OAAOM,QAAQ,CAAC;MAACG,SAAD;MAAYP,IAAZ;MAAkBD,OAAlB;MAA2Bf;IAA3B,CAAD,CAAf;EACD,CA9Cc;EAgDf;EACA,iBAAiB,iBAAsC;IAAA,IAA7B;MAACc,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAA6B;IACrDjB,aAAa,CAACyB,GAAd,CAAkBf,oCAAlB,EAAwD,eAAxD;IACA,OAAOG,MAAM,CAACC,OAAP,CAAe,eAAf,EAAgC;MAACC,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAAhC,CAAP;EACD,CApDc;;EAsDf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,iBAAiB,iBAAsC;IAAA,IAA7B;MAACF,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAA6B;;IACrD,MAAMS,WAAW,GAAG3B,SAAS,CAACH,EAAE,CAAC0B,YAAH,CAAgBC,SAAS,GAAG,mCAA5B,CAAD,CAA7B,CADqD,CAGrD;;;IACA,MAAM;MAAEJ,gBAAF;MAAoBQ,SAAS,GAAG;IAAhC,IAAyCX,OAA/C;IACA,OAAO,OACLf,UAAU,CAAC;MAAEgB,IAAF;MAAQW,YAAY,EAAE;IAAtB,CAAD,CADL,GAEL1B,kBAAkB,CAAC;MAAEkB,MAAM,EAAE,MAAV;MAAkBL,UAAlB;MAA8BI,gBAA9B;MAAgDQ;IAAhD,CAAD,CAFb,GAGH,IAHG,GAILD,WAAW,CAAC;MAACX,UAAD;MAAaE;IAAb,CAAD,CAJb;EAKD,CAzFc;EA2Ff;EACA,iBAAiB,iBAAsC;IAAA,IAA7B;MAACF,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAA6B;IACrDjB,aAAa,CAACyB,GAAd,CAAkBf,oCAAlB,EAAwD,eAAxD;IACA,OAAOG,MAAM,CAACC,OAAP,CAAe,eAAf,EAAgC;MAACC,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAAhC,CAAP;EACD,CA/Fc;;EAiGf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,kBAAkB,iBAAsC;IAAA,IAA7B;MAACF,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAA6B;IACtD,MAAM;MAAEE,gBAAF;MAAoBQ,SAAS,GAAG;IAAhC,IAA0CX,OAAhD;IACA,OAAOf,UAAU,CAAC;MAACgB,IAAD;MAAOW,YAAY,EAAE;IAArB,CAAD,CAAV,GACL1B,kBAAkB,CAAC;MAACkB,MAAM,EAAE,MAAT;MAAiBL,UAAjB;MAA6BI,gBAA7B;MAA+CQ;IAA/C,CAAD,CADpB;EAED,CAtHc;;EAwHf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,cAAc,iBAAsC;IAAA,IAA7B;MAACZ,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAA6B;IAClD,OAAOhB,UAAU,CAAC;MAACgB,IAAD;MAAOW,YAAY,EAAE;IAArB,CAAD,CAAV,GAA4CxB,eAAe,CAAC,GAAD,EAAMW,UAAU,CAACS,SAAjB,EAA4BR,OAA5B,CAAlE;EACD,CArIc;;EAuIf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,kBAAkB,iBAAsC;IAAA,IAA7B;MAACD,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAA6B;IACtD,MAAM;MAAEE;IAAF,IAAuBH,OAA7B;IACA,OAAOf,UAAU,CAAC;MAACgB,IAAD;MAAOW,YAAY,EAAE;IAArB,CAAD,CAAV,GACL1B,kBAAkB,CAAC;MAACkB,MAAM,EAAE,MAAT;MAAiBL,UAAjB;MAA6BI;IAA7B,CAAD,CADpB;EAED,CAzJc;;EA2Jf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,cAAc,iBAAsC;IAAA,IAA7B;MAACJ,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAA6B;IAClD,OAAOhB,UAAU,CAAC;MAACgB,IAAD;MAAOW,YAAY,EAAE;IAArB,CAAD,CAAV,GAA4CxB,eAAe,CAAC,GAAD,EAAMW,UAAU,CAACS,SAAjB,EAA4BR,OAA5B,CAAlE;EACD,CAxKc;;EA0Kf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,oBAAoB,kBAAsC;IAAA,IAA7B;MAACD,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAA6B;IACxD,MAAM;MAAEE;IAAF,IAAuBH,OAA7B;IACA,OAAOf,UAAU,CAAC;MAACgB,IAAD;MAAOW,YAAY,EAAE;IAArB,CAAD,CAAV,GACL1B,kBAAkB,CAAC;MAACkB,MAAM,EAAE,QAAT;MAAmBL,UAAnB;MAA+BI;IAA/B,CAAD,CADpB;EAED,CAzLc;;EA2Lf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,qBAAqB,kBAA6B;IAAA,IAApB;MAACJ,UAAD;MAAaE;IAAb,CAAoB;IAChD,OAAOhB,UAAU,CAAC;MAACgB;IAAD,CAAD,CAAV,GACP,mBADO,GAELY,IAAI,CAACC,SAAL,CAAef,UAAU,CAACgB,MAA1B,EAAkC,IAAlC,EAAwC,CAAxC,CAFK,GAEwC,GAF/C;EAGD,CAjNc;;EAmNf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,0BAA0B,kBAA6B;IAAA,IAApB;MAAChB,UAAD;MAAaE;IAAb,CAAoB;IACrD,OAAOhB,UAAU,CAAC;MAACgB;IAAD,CAAD,CAAV,GACL,mBADK,GAEHJ,MAAM,CAACC,OAAP,CAAe,WAAf,EAA4B;MAACC;IAAD,CAA5B,CAFG,GAEyC,GAFhD;EAGD,CAnOc;;EAqOf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,qBAAqB,kBAA6B;IAAA,IAApB;MAACA,UAAD;MAAaE;IAAb,CAAoB;IAChD,OAAQhB,UAAU,CAAC;MAACgB;IAAD,CAAD,CAAV,GACN,MADM,IAELA,IAAI,CAACe,IAAL,IAAa,kBAFR,IAGN,KAHM,GAINH,IAAI,CAACC,SAAL,CAAef,UAAU,CAACgB,MAA1B,EAAkC,IAAlC,EAAwC,CAAxC,CAJM,GAKN,GALF;EAMD,CA/Pc;;EAiQf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,kBAAkB,kBAA6B;IAAA,IAApB;MAAChB,UAAD;MAAaE;IAAb,CAAoB;IAC7C,IAAIe,IAAI,GAAGf,IAAI,CAACe,IAAL,IAAa,kBAAxB;IACA,OAAO/B,UAAU,CAAC;MAACgB;IAAD,CAAD,CAAV,GACL,8BADK,GAEL,yDAFK,GAGL,mCAHK,GAIL,+CAJK,GAKL,eALK,GAKae,IALb,GAKoB,mBALpB,GAML,8DANK,GAOL,4BAPK,GAQL,cARK,GASL,YATK,GASUA,IATV,GASiB,mBATjB,GAUL,OAVK,GAWL,wBAXK,GAYL,WAZK,GAYSH,IAAI,CAACC,SAAL,CAAef,UAAU,CAACgB,MAA1B,EAAkC,IAAlC,EAAwC,CAAxC,CAZT,GAYsD,KAZtD,GAaL,OAbF;EAcD,CA/Sc;;EAiTf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,kBAAkB,kBAA6B;IAAA,IAApB;MAAChB,UAAD;MAAaE;IAAb,CAAoB;IAC7C,OAAOhB,UAAU,CAAC;MAACgB;IAAD,CAAD,CAAV,GACLF,UAAU,CAACS,SAAX,CAAqBS,GAArB,CAAyB,UAASC,KAAT,EAAgB;MACvC,IAAIC,MAAM,GAAG,kBAAkBD,KAAK,CAACF,IAAxB,GAA+B,KAA/B,GAAuCH,IAAI,CAACC,SAAL,CAAeI,KAAK,CAACE,KAArB,CAAvC,GAAqE,GAAlF;MACA,IAAIF,KAAK,CAACG,OAAV,EACEF,MAAM,GAAGA,MAAM,CAACG,MAAP,CAAc,SAASJ,KAAK,CAACG,OAA7B,CAAT;MACF,OAAOF,MAAP;IACD,CALD,EAKGI,IALH,CAKQ,IALR,CADF;EAOD,CAzVc;EA2Vf;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,+BAA+B,kBAA6B;IAAA,IAApB;MAACxB,UAAD;MAAaE;IAAb,CAAoB;IAC1D,OAAOhB,UAAU,CAAC;MAACgB;IAAD,CAAD,CAAV,GACLF,UAAU,CAACyB,aAAX,CAAyBP,GAAzB,CAA6B,UAASQ,IAAT,EAAe;MAC1C,IAAIC,WAAW,GAAG,kBAAkBD,IAAI,CAACT,IAAvB,GAA8B,KAA9B,GAAsC7B,iBAAiB,CAACsC,IAAI,CAACL,KAAN,CAAvD,GAAsE,GAAxF;MACA,IAAIK,IAAI,CAACJ,OAAT,EACEK,WAAW,GAAGA,WAAW,CAACJ,MAAZ,CAAmB,SAASG,IAAI,CAACJ,OAAjC,CAAd;MACF,OAAOK,WAAP;IACD,CALD,EAKGH,IALH,CAKQ,IALR,CADF;EAOD,CAnYc;;EAqYf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,kCAAkC,kBAAsC;IAAA,IAA7B;MAACxB,UAAD;MAAaE,IAAb;MAAmBD;IAAnB,CAA6B;IACtE,MAAM;MAAC2B,UAAU,GAAE;IAAb,IAAwB3B,OAA9B;;IACA,SAAS4B,UAAT,CAAoBC,GAApB,EAAyB;MACvB,IAAIC,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAX;MACA,IAAIC,GAAG,GAAGF,MAAM,CAACG,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCP,GAArC,CAAV;;MACA,IAAII,GAAG,CAAC,OAAD,CAAP,EAAkB;QAChBH,IAAI,GAAG,aAAP;MACD,CAFD,MAEO;QACL,KAAK,IAAIO,CAAT,IAAcR,GAAd,EAAmB,IAAII,GAAG,CAACI,CAAD,CAAP,EAAY;UAC7B,QAAQ,OAAOR,GAAG,CAACQ,CAAD,CAAlB;YACE,KAAK,QAAL;cACEP,IAAI,CAACO,CAAD,CAAJ,GAAUT,UAAU,CAACC,GAAG,CAACQ,CAAD,CAAJ,CAApB;UAFJ;QAID;MACF;;MACD,OAAOP,IAAP;IACD;;IACD,MAAMQ,oBAAoB,GAAG1D,EAAE,CAAC0B,YAAH,CAC3BxB,IAAI,CAACyD,OAAL,CAAahC,SAAb,EAAyB,8BAAzB,CAD2B,EAC8B;MAACiC,QAAQ,EAAC;IAAV,CAD9B,CAA7B,CAjBsE,CAqBtE;IACA;;IACA,MAAMC,KAAK,GAAGH,oBAAoB,CAC/BI,KADW,CACL,IADK,CAAd;IAEA,MAAMC,SAAS,GAAGF,KAAK,CAACG,OAAN,CAAe,SAAf,IAA2B,CAA7C;IACA,MAAMC,QAAQ,GAAGJ,KAAK,CAACG,OAAN,CAAe,OAAf,CAAjB;IAEA,MAAME,MAAM,GAAG7D,UAAU,CAAC;MAACgB;IAAD,CAAD,CAAV,GAClB,kBAAiB0B,UAAW;AAC7B;AACA,UAAUc,KAAK,CAACM,KAAN,CAAYJ,SAAZ,EAAuBE,QAAvB,EAAiCtB,IAAjC,CAAuC,IAAvC,CAA4C;AACtD;AACA,gBAAgBI,UAAW,KAAId,IAAI,CAACC,SAAL,CAAec,UAAU,CAAC7B,UAAU,CAACgB,MAAZ,CAAzB,EAA8C,IAA9C,EAAoD,CAApD,CAAuD,EALlF,CA5BsE,CAmCtE;IACA;;IACA,OAAO+B,MAAM,CAACE,OAAP,CAAe,gBAAf,EAAgC,aAAhC,CAAP;EACD,CAhec;EAkef;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,qBAAqB,kBAAsC;IAAA,IAA7B;MAACjD,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAA6B;;IACzD,MAAMI,QAAQ,GAAGtB,SAAS,CACxBH,EAAE,CAAC0B,YAAH,CAAgBC,SAAS,GAAG,uCAA5B,CADwB,CAA1B;;IAGA,OAAOF,QAAQ,CAAC;MAACN,UAAD;MAAaE,IAAb;MAAmBD,OAAnB;MAA4Bf;IAA5B,CAAD,CAAf;EACD,CAlgBc;;EAogBf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,kBAAkB,kBAAsC;IAAA,IAA7B;MAACc,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAA6B;;IACtD,MAAMI,QAAQ,GAAGtB,SAAS,CACxBH,EAAE,CAAC0B,YAAH,CAAgBC,SAAS,GAAG,oCAA5B,CADwB,CAA1B;;IAGA,OAAOF,QAAQ,CAAC;MAACN,UAAD;MAAaE,IAAb;MAAmBD,OAAnB;MAA4Bf;IAA5B,CAAD,CAAf;EACD,CAjiBc;;EAmiBf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,kBAAkB,kBAAsC;IAAA,IAA7B;MAACc,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAA6B;;IACtD,MAAMI,QAAQ,GAAGtB,SAAS,CACxBH,EAAE,CAAC0B,YAAH,CAAgBC,SAAS,GAAG,oCAA5B,CADwB,CAA1B;;IAGA,OAAOF,QAAQ,CAAC;MAACN,UAAD;MAAaE,IAAb;MAAmBD,OAAnB;MAA4Bf;IAA5B,CAAD,CAAf;EACD,CAhkBc;;EAkkBf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,sBAAsB,kBAAsC;IAAA,IAA7B;MAACc,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAA6B;;IAC1D,MAAMI,QAAQ,GAAGtB,SAAS,CACxBH,EAAE,CAAC0B,YAAH,CAAgBC,SAAS,GAAG,wCAA5B,CADwB,CAA1B;;IAGA,OAAOF,QAAQ,CAAC;MAACN,UAAD;MAAaE,IAAb;MAAmBD,OAAnB;MAA4Bf;IAA5B,CAAD,CAAf;EACD,CA/lBc;;EAimBf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,oBAAoB,kBAAsC;IAAA,IAA7B;MAACc,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAA6B;;IACxD,MAAMI,QAAQ,GAAGtB,SAAS,CACxBH,EAAE,CAAC0B,YAAH,CAAgBC,SAAS,GAAG,sCAA5B,CADwB,CAA1B;;IAGA,OAAOF,QAAQ,CAAC;MAACN,UAAD;MAAaE,IAAb;MAAmBD,OAAnB;MAA4Bf;IAA5B,CAAD,CAAf;EACD,CAhoBc;;EAkoBf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,mBAAmB,kBAAsC;IAAA,IAA7B;MAACc,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAA6B;;IACvD,MAAMI,QAAQ,GAAGtB,SAAS,CACxBH,EAAE,CAAC0B,YAAH,CAAgBC,SAAS,GAAG,qCAA5B,CADwB,CAA1B;;IAGA,OAAOF,QAAQ,CAAC;MAACN,UAAD;MAAaE,IAAb;MAAmBD,OAAnB;MAA4Bf;IAA5B,CAAD,CAAf;EACD,CAhqBc;EAkqBf;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,kBAAkB,kBAAsC;IAAA,IAA7B;MAACc,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAA6B;;IACtD,MAAMI,QAAQ,GAAGtB,SAAS,CACxBH,EAAE,CAAC0B,YAAH,CAAgBC,SAAS,GAAG,uCAA5B,CADwB,CAA1B;;IAGA,IAAIiB,aAAJ;IACA,MAAM;MAAErB;IAAF,IAAuBH,OAA7B;IACA,MAAMiD,cAAc,GAAG1D,uBAAuB,CAAC;MAC7CY,gBAD6C;MAE7CJ,UAF6C;MAG7CmD,UAAU,EAAE;QACVC,MAAM,EAAE,EADE;QAEVvC,YAAY,EAAE,MAFJ,CAEW;;MAFX;IAHiC,CAAD,CAA9C;;IASA,IAAIT,gBAAJ,EAAsB;MACpBqB,aAAa,GAAG,CAAC,GAAGzB,UAAU,CAACyB,aAAf,EAA8B4B,IAA9B,CAAmC9D,eAAe,CAACS,UAAD,CAAlD,CAAhB;IACD,CAFD,MAEO;MACLyB,aAAa,GAAG,CAAC,GAAGzB,UAAU,CAACyB,aAAf,EAA8B4B,IAA9B,CAAmC5D,UAAnC,CAAhB;IACD;;IAED,OAAOa,QAAQ,CAAC;MAACmB,aAAD;MAAgBvB,IAAhB;MAAsBD,OAAtB;MAA+BiD,cAA/B;MAA+ChE;IAA/C,CAAD,CAAf;EACD,CA9sBc;EAgtBf;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,cAAc,kBAAsC;IAAA,IAA7B;MAACc,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAA6B;;IAClD,MAAMI,QAAQ,GAAGtB,SAAS,CACxBH,EAAE,CAAC0B,YAAH,CAAgBC,SAAS,GAAG,gCAA5B,CADwB,CAA1B;;IAIA,OAAOF,QAAQ,CAAC;MAAEN,UAAF;MAAcC,OAAd;MAAuBC,IAAvB;MAA6BhB;IAA7B,CAAD,CAAf;EACD,CAtuBc;;EAwuBf;AACF;AACA;AACA;AACA;AACA;AACA;EACE,aAAa,kBAAsC;IAAA,IAA7B;MAACc,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAA6B;;IACjD,MAAMI,QAAQ,GAAGtB,SAAS,CACxBH,EAAE,CAAC0B,YAAH,CAAgBC,SAAS,GAAG,+BAA5B,CADwB,CAA1B;;IAIA,OAAOF,QAAQ,CAAC;MAAEN,UAAF;MAAcC,OAAd;MAAuBC,IAAvB;MAA6BhB;IAA7B,CAAD,CAAf;EACD,CArvBc;;EAuvBf;AACF;AACA;AACA;AACA;AACA;AACA;EACE,mBAAmB,kBAAsC;IAAA,IAA7B;MAACc,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAA6B;;IACvD,MAAMI,QAAQ,GAAGtB,SAAS,CACxBH,EAAE,CAAC0B,YAAH,CAAgBC,SAAS,GAAG,qCAA5B,CADwB,CAA1B;;IAIA,OAAOF,QAAQ,CAAC;MAAEN,UAAF;MAAcC,OAAd;MAAuBC,IAAvB;MAA6BhB;IAA7B,CAAD,CAAf;EACD,CApwBc;;EAswBf;AACF;AACA;AACA;AACA;AACA;AACA;EACE,mBAAmB,kBAAsC;IAAA,IAA7B;MAACc,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAA6B;;IACvD,MAAMI,QAAQ,GAAGtB,SAAS,CACxBH,EAAE,CAAC0B,YAAH,CAAgBC,SAAS,GAAG,qCAA5B,CADwB,CAA1B;;IAIA,OAAOF,QAAQ,CAAC;MAAEN,UAAF;MAAcC,OAAd;MAAuBC,IAAvB;MAA6BhB;IAA7B,CAAD,CAAf;EACD,CAnxBc;;EAqxBf;AACF;AACA;AACA;AACA;AACA;AACA;EACE,gBAAgB,kBAAsC;IAAA,IAA7B;MAACc,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAA6B;;IACpD,MAAMI,QAAQ,GAAGtB,SAAS,CACxBH,EAAE,CAAC0B,YAAH,CAAgBC,SAAS,GAAG,kCAA5B,CADwB,CAA1B;;IAIA,OAAOF,QAAQ,CAAC;MAAEN,UAAF;MAAcC,OAAd;MAAuBC,IAAvB;MAA6BhB;IAA7B,CAAD,CAAf;EACD,CAlyBc;;EAoyBf;AACF;AACA;AACA;AACA;AACA;AACA;EACE,gBAAgB,kBAAsC;IAAA,IAA7B;MAACc,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAA6B;;IACpD,MAAMI,QAAQ,GAAGtB,SAAS,CACxBH,EAAE,CAAC0B,YAAH,CAAgBC,SAAS,GAAG,kCAA5B,CADwB,CAA1B;;IAIA,OAAOF,QAAQ,CAAC;MAAEN,UAAF;MAAcC,OAAd;MAAuBC,IAAvB;MAA6BhB;IAA7B,CAAD,CAAf;EACD,CAjzBc;;EAmzBf;AACF;AACA;AACA;AACA;AACA;AACA;EACE,gBAAgB,kBAAsC;IAAA,IAA7B;MAACc,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAA6B;;IACpD,MAAMI,QAAQ,GAAGtB,SAAS,CACxBH,EAAE,CAAC0B,YAAH,CAAgBC,SAAS,GAAG,kCAA5B,CADwB,CAA1B;;IAIA,OAAOF,QAAQ,CAAC;MAAEN,UAAF;MAAcC,OAAd;MAAuBC,IAAvB;MAA6BhB;IAA7B,CAAD,CAAf;EACD,CAh0Bc;;EAk0Bf;AACF;AACA;AACA;AACA;AACA;AACA;EACE,gBAAgB,kBAAsC;IAAA,IAA7B;MAACc,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAA6B;;IACpD,MAAMI,QAAQ,GAAGtB,SAAS,CACxBH,EAAE,CAAC0B,YAAH,CAAgBC,SAAS,GAAG,kCAA5B,CADwB,CAA1B;;IAIA,OAAOF,QAAQ,CAAC;MAAEN,UAAF;MAAcC,OAAd;MAAuBC,IAAvB;MAA6BhB;IAA7B,CAAD,CAAf;EACD,CA/0Bc;;EAi1Bf;AACF;AACA;AACA;AACA;AACA;AACA;EACE,iBAAiB,kBAAsC;IAAA,IAA7B;MAACc,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAA6B;;IACrD,MAAMI,QAAQ,GAAGtB,SAAS,CACxBH,EAAE,CAAC0B,YAAH,CAAgBC,SAAS,GAAG,mCAA5B,CADwB,CAA1B;;IAIA,OAAOF,QAAQ,CAAC;MAAEN,UAAF;MAAcC,OAAd;MAAuBC,IAAvB;MAA6BhB;IAA7B,CAAD,CAAf;EACD,CA91Bc;;EAg2Bf;AACF;AACA;AACA;AACA;AACA;AACA;EACE,iBAAiB,kBAAsC;IAAA,IAA7B;MAACc,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAA6B;;IACrD,MAAMI,QAAQ,GAAGtB,SAAS,CACxBH,EAAE,CAAC0B,YAAH,CAAgBC,SAAS,GAAG,mCAA5B,CADwB,CAA1B;;IAIA,OAAOF,QAAQ,CAAC;MAAEN,UAAF;MAAcC,OAAd;MAAuBC,IAAvB;MAA6BhB;IAA7B,CAAD,CAAf;EACD,CA72Bc;;EA+2Bf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,yBAAyB,kBAAgD;IAAA,IAAvC;MAACc,UAAD;MAAaC,OAAb;MAAsBC,IAAtB;MAA4BoD;IAA5B,CAAuC;;IACvE,MAAMhD,QAAQ,GAAGtB,SAAS,CACxBH,EAAE,CAAC0B,YAAH,CAAgBC,SAAS,GAAG,yCAA5B,CADwB,CAA1B;;IAGA,IAAIC,SAAJ;IACA,MAAM;MAAEL;IAAF,IAAuBH,OAA7B;IACAA,OAAO,GAAGP,sBAAsB,CAACO,OAAD,EAAU,OAAV,EAAmBqD,QAAQ,CAACC,cAA5B,CAAhC;IACA,MAAML,cAAc,GAAG1D,uBAAuB,CAAC;MAC7CY,gBAD6C;MAE7CJ,UAF6C;MAG7CmD,UAAU,EAAE;QACVC,MAAM,EAAE;MADE;IAHiC,CAAD,CAA9C;;IAQA,IAAIhD,gBAAJ,EAAsB;MACpBK,SAAS,GAAG,CAAC,GAAGT,UAAU,CAACS,SAAf,EAA0B4C,IAA1B,CAA+B9D,eAAe,CAACS,UAAD,CAA9C,CAAZ;IACD,CAFD,MAEO;MACLS,SAAS,GAAG,CAAC,GAAGT,UAAU,CAACS,SAAf,EAA0B4C,IAA1B,CAA+B5D,UAA/B,CAAZ;IACD;;IAED,OAAOa,QAAQ,CAAC;MAACG,SAAD;MAAYP,IAAZ;MAAkBD,OAAlB;MAA2BiD,cAA3B;MAA2ChE;IAA3C,CAAD,CAAf;EACD,CAt5Bc;;EAw5Bf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,wBAAwB,kBAAgD;IAAA,IAAvC;MAACc,UAAD;MAAaC,OAAb;MAAsBC,IAAtB;MAA4BoD;IAA5B,CAAuC;;IACtE,MAAMhD,QAAQ,GAAGtB,SAAS,CACxBH,EAAE,CAAC0B,YAAH,CAAgBC,SAAS,GAAG,yCAA5B,CADwB,CAA1B;;IAGA,IAAIC,SAAJ;IACA,MAAM;MAAEL;IAAF,IAAuBH,OAA7B;IACAA,OAAO,GAAGP,sBAAsB,CAACO,OAAD,EAAU,MAAV,EAAkBqD,QAAQ,CAACC,cAA3B,CAAhC;IACA,MAAML,cAAc,GAAG1D,uBAAuB,CAAC;MAC7CY,gBAD6C;MAE7CJ,UAF6C;MAG7CmD,UAAU,EAAE;QACVC,MAAM,EAAE;MADE;IAHiC,CAAD,CAA9C;;IAQA,IAAIhD,gBAAJ,EAAsB;MACpBK,SAAS,GAAG,CAAC,GAAGT,UAAU,CAACS,SAAf,EAA0B4C,IAA1B,CAA+B9D,eAAe,CAACS,UAAD,CAA9C,CAAZ;IACD,CAFD,MAEO;MACLS,SAAS,GAAG,CAAC,GAAGT,UAAU,CAACS,SAAf,EAA0B4C,IAA1B,CAA+B5D,UAA/B,CAAZ;IACD;;IACD,OAAOa,QAAQ,CAAC;MAACG,SAAD;MAAYP,IAAZ;MAAkBD,OAAlB;MAA2BiD,cAA3B;MAA2ChE;IAA3C,CAAD,CAAf;EACD,CA97Bc;;EAg8Bf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACG,uBAAuB,kBAAkD;IAAA,IAAzC;MAAEc,UAAF;MAAcC,OAAd;MAAuBC,IAAvB;MAA6BoD;IAA7B,CAAyC;;IACxE,MAAMhD,QAAQ,GAAGtB,SAAS,CACxBH,EAAE,CAAC0B,YAAH,CAAgBC,SAAS,GAAG,yCAA5B,CADwB,CAA1B;;IAGA,IAAIC,SAAJ;IACA,MAAM;MAAEL;IAAF,IAAuBH,OAA7B;IACAA,OAAO,GAAGP,sBAAsB,CAACO,OAAD,EAAUA,OAAO,CAACuD,UAAlB,EAA8BF,QAAQ,CAACC,cAAvC,CAAhC;IACA,MAAML,cAAc,GAAG1D,uBAAuB,CAAC;MAC7CY,gBAD6C;MAE7CJ,UAF6C;MAG7CmD,UAAU,EAAE;QACVC,MAAM,EAAE;MADE;IAHiC,CAAD,CAA9C;;IAQA,IAAIhD,gBAAJ,EAAsB;MACpBK,SAAS,GAAG,CAAC,GAAGT,UAAU,CAACS,SAAf,EAA0B4C,IAA1B,CAA+B9D,eAAe,CAACS,UAAD,CAA9C,CAAZ;IACD,CAFD,MAEO;MACLS,SAAS,GAAG,CAAC,GAAGT,UAAU,CAACS,SAAf,EAA0B4C,IAA1B,CAA+B5D,UAA/B,CAAZ;IACD;;IACD,OAAOa,QAAQ,CAAC;MAACG,SAAD;MAAYP,IAAZ;MAAkBD,OAAlB;MAA2BiD,cAA3B;MAA2ChE;IAA3C,CAAD,CAAf;EACD,CAj/Bc;EAm/Bf;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,iBAAiBF,SAAS,CACxBH,EAAE,CAAC0B,YAAH,CAAgBC,SAAS,GAAG,mCAA5B,CADwB,CA5/BX;EAggCf;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,QAAQ,kBAAuB;IAAA,IAAd;MAACR;IAAD,CAAc;IAC7B,OAAOc,IAAI,CAACC,SAAL,CAAef,UAAU,CAACgB,MAA1B,EAAkC,IAAlC,EAAwC,CAAxC,CAAP;EACD,CAthCc;;EAwhCf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,cAAc,kBAAuB;IAAA,IAAd;MAAChB;IAAD,CAAc;IACnC,OAAOc,IAAI,CAACC,SAAL,CAAe;MAAC0C,KAAK,EAAEzD,UAAU,CAACgB,MAAX,CAAkByC;IAA1B,CAAf,EAAiD,IAAjD,EAAuD,CAAvD,CAAP;EACD,CA5iCc;;EA8iCf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,eAAe,kBAAuB;IAAA,IAAd;MAACzD;IAAD,CAAc;IACpC,OAAOc,IAAI,CAACC,SAAL,CAAezB,gBAAgB,CAACU,UAAU,CAACgB,MAAZ,CAA/B,EAAoD,IAApD,EAA0D,CAA1D,CAAP;EACD,CAhkCc;;EAkkCf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,aAAa,kBAAuB;IAAA,IAAd;MAAChB;IAAD,CAAc;IAClC,OAAO,QAAQA,UAAU,CAACS,SAAX,CAAqBS,GAArB,CAAyB,UAASC,KAAT,EAAgB;MACpD,OAAQ,MAAKA,KAAK,CAACF,IAAK,MAAKH,IAAI,CAACC,SAAL,CAAeI,KAAK,CAACE,KAArB,CAA4B,EAAzD;IACD,CAFY,EAEVG,IAFU,CAEL,KAFK,CAAR,GAEY,KAFnB;EAGD,CAllCc;;EAolCf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,kBAAkB,kBAAuB;IAAA,IAAd;MAACxB;IAAD,CAAc;IACvC,IAAIoB,MAAM,GAAG;MACX,qBAAoB,KADT;MAEX,iBAAgB;IAFL,CAAb;IAIAA,MAAM,CAACsC,MAAP,GAAgB1D,UAAU,CAACS,SAAX,CACbkD,MADa,CACN,UAASxC,KAAT,EAAgB;MACtB,OAAOA,KAAK,CAACyC,UAAN,CAAiBC,QAAjB,KAA8B,OAA9B,IAAyC1C,KAAK,CAACyC,UAAN,CAAiB7B,IAAjB,KAA0B,MAA1E;IACD,CAHa,EAIbb,GAJa,CAIT,UAASC,KAAT,EAAgB;MACnB,OAAOA,KAAK,CAACE,KAAb;IACD,CANa,CAAhB;IAOA,OAAOP,IAAI,CAACC,SAAL,CAAeK,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAP;EACD,CAnnCc;;EAqnCf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,qBAAqB,kBAAuB;IAAA,IAAd;MAACpB;IAAD,CAAc;IAC1C,IAAIoB,MAAM,GAAG;MACX0C,iBAAiB,EAAE,KADR;MAEXC,aAAa,EAAE,KAFJ;MAGXL,MAAM,EAAE1D,UAAU,CAACS,SAAX,CAAqBS,GAArB,CAAyB,UAASC,KAAT,EAAgB;QAC/C;QACA,OAAOa,MAAM,CAACgC,MAAP,CAAc;UACnB/C,IAAI,EAAEE,KAAK,CAACF;QADO,CAAd,EAEJE,KAAK,CAACE,KAFF,CAAP;MAGD,CALO;IAHG,CAAb;IAUA,OAAOP,IAAI,CAACC,SAAL,CAAeK,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAP;EACD,CArpCc;EAwpCf;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,sBAAsB,kBAAsC;IAAA,IAA7B;MAACpB,UAAD;MAAaC,OAAb;MAAsBC;IAAtB,CAA6B;;IAC1D,MAAMI,QAAQ,GAAGtB,SAAS,CACxBH,EAAE,CAAC0B,YAAH,CAAgBC,SAAS,GAAG,wCAA5B,CADwB,CAA1B;;IAGA,IAAIC,SAAJ;IACA,MAAM;MAAEL;IAAF,IAAuBH,OAA7B;IACA,MAAMiD,cAAc,GAAG1D,uBAAuB,CAAC;MAC7CY,gBAD6C;MAE7CJ;IAF6C,CAAD,CAA9C;;IAKA,IAAII,gBAAJ,EAAsB;MACpBK,SAAS,GAAG,CAAC,GAAGT,UAAU,CAACS,SAAf,EAA0B4C,IAA1B,CAA+B9D,eAAe,CAACS,UAAD,CAA9C,CAAZ;IACD,CAFD,MAEO;MACLS,SAAS,GAAG,CAAC,GAAGT,UAAU,CAACS,SAAf,EAA0B4C,IAA1B,CAA+B5D,UAA/B,CAAZ;IACD;;IACD,OAAOa,QAAQ,CAAC;MAACG,SAAD;MAAYP,IAAZ;MAAkBD,OAAlB;MAA2BiD,cAA3B;MAA2ChE;IAA3C,CAAD,CAAf;EACD;AA9rCc,CAAjB,C,CAisCA;;AACAY,MAAM,CAACC,OAAP,CAAe,aAAf,EAA8BkE,MAA9B,GAAuC,IAAvC;AACAnE,MAAM,CAACC,OAAP,CAAe,mBAAf,EAAoCkE,MAApC,GAA6C,IAA7C;AACAnE,MAAM,CAACC,OAAP,CAAe,mBAAf,EAAoCkE,MAApC,GAA6C,IAA7C"},"metadata":{},"sourceType":"script"}