{"ast":null,"code":"import { ThemeOptions } from \"@mui/material\";\nimport { createTheme, PaletteOptions, PaletteColorOptions } from \"@mui/material\";\nimport colors from \"./colors\";\nimport token from '../tokens/tokens.json';\nexport const CustomPalette = mode => ({\n  palette: {\n    mode,\n    ...(mode === \"light\" ? {\n      /** Light Color Palette */\n      primary: {\n        main: token.light.theme.primary.value,\n        contrastText: token.light.theme[\"on-secondary-container\"].value\n      },\n      secondary: {\n        main: token.light.theme.secondary.value\n      },\n      tertiary: {\n        main: token.light.theme.tertiary.value\n      },\n      error: {\n        main: token.light.theme.error.value\n      },\n      background: {\n        paper: token.light.theme.surface.value,\n        default: token.light.theme.background.value\n      }\n    } : {\n      /** Dark Color Palette */\n    })\n  }\n});\n_c = CustomPalette;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomPalette\");","map":{"version":3,"names":["ThemeOptions","createTheme","PaletteOptions","PaletteColorOptions","colors","token","CustomPalette","mode","palette","primary","main","light","theme","value","contrastText","secondary","tertiary","error","background","paper","surface","default"],"sources":["/Users/braxtoncoats/Github/bcd/src/theme/CustomPalette.js"],"sourcesContent":["import { ThemeOptions } from \"@mui/material\";\nimport {\n  createTheme,\n  PaletteOptions,\n  PaletteColorOptions,\n} from \"@mui/material\";\nimport colors from \"./colors\";\nimport token from '../tokens/tokens.json';\n\n\nexport const CustomPalette = (mode) => ({\n  palette: {\n    mode,\n    ...(mode === \"light\"\n      ? {\n          /** Light Color Palette */\n          primary: {\n            main: token.light.theme.primary.value,\n            contrastText: token.light.theme[\"on-secondary-container\"].value,\n          },\n          secondary: {\n            main: token.light.theme.secondary.value\n          },\n          tertiary: {\n            main: token.light.theme.tertiary.value\n          },\n          error: {\n            main: token.light.theme.error.value\n          },\n          background: {\n            paper: token.light.theme.surface.value,\n            default: token.light.theme.background.value\n          }\n\n        }\n      : {\n          /** Dark Color Palette */\n\n        }),\n        \n  },\n});\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SACEC,WADF,EAEEC,cAFF,EAGEC,mBAHF,QAIO,eAJP;AAKA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AAGA,OAAO,MAAMC,aAAa,GAAIC,IAAD,KAAW;EACtCC,OAAO,EAAE;IACPD,IADO;IAEP,IAAIA,IAAI,KAAK,OAAT,GACA;MACE;MACAE,OAAO,EAAE;QACPC,IAAI,EAAEL,KAAK,CAACM,KAAN,CAAYC,KAAZ,CAAkBH,OAAlB,CAA0BI,KADzB;QAEPC,YAAY,EAAET,KAAK,CAACM,KAAN,CAAYC,KAAZ,CAAkB,wBAAlB,EAA4CC;MAFnD,CAFX;MAMEE,SAAS,EAAE;QACTL,IAAI,EAAEL,KAAK,CAACM,KAAN,CAAYC,KAAZ,CAAkBG,SAAlB,CAA4BF;MADzB,CANb;MASEG,QAAQ,EAAE;QACRN,IAAI,EAAEL,KAAK,CAACM,KAAN,CAAYC,KAAZ,CAAkBI,QAAlB,CAA2BH;MADzB,CATZ;MAYEI,KAAK,EAAE;QACLP,IAAI,EAAEL,KAAK,CAACM,KAAN,CAAYC,KAAZ,CAAkBK,KAAlB,CAAwBJ;MADzB,CAZT;MAeEK,UAAU,EAAE;QACVC,KAAK,EAAEd,KAAK,CAACM,KAAN,CAAYC,KAAZ,CAAkBQ,OAAlB,CAA0BP,KADvB;QAEVQ,OAAO,EAAEhB,KAAK,CAACM,KAAN,CAAYC,KAAZ,CAAkBM,UAAlB,CAA6BL;MAF5B;IAfd,CADA,GAsBA;MACE;IADF,CAtBJ;EAFO;AAD6B,CAAX,CAAtB;KAAMP,a"},"metadata":{},"sourceType":"module"}