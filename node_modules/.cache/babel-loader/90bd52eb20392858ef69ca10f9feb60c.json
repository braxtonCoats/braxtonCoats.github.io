{"ast":null,"code":"/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar Color = require('tinycolor2'),\n    _ = require('../utils/es6_'),\n    path = require('path'),\n    convertToBase64 = require('../utils/convertToBase64'),\n    UNICODE_PATTERN = /&#x([^;]+);/g;\n\nfunction isColor(token) {\n  return token.attributes.category === 'color';\n}\n\nfunction isSize(token) {\n  return token.attributes.category === 'size';\n}\n\nfunction isFontSize(token) {\n  return token.attributes.category === 'size' && (token.attributes.type === 'font' || token.attributes.type === 'icon');\n}\n\nfunction isNotFontSize(token) {\n  return token.attributes.category === 'size' && token.attributes.type !== 'font' && token.attributes.type !== 'icon';\n}\n\nfunction isAsset(token) {\n  return token.attributes.category === 'asset';\n}\n\nfunction isContent(token) {\n  return token.attributes.category === 'content';\n}\n\nfunction wrapValueWith(character, token) {\n  return `${character}${token.value}${character}`;\n}\n\nfunction wrapValueWithDoubleQuote(token) {\n  return wrapValueWith('\"', token);\n}\n\nfunction throwSizeError(name, value, unitType) {\n  throw `Invalid Number: '${name}: ${value}' is not a valid number, cannot transform to '${unitType}' \\n`;\n}\n\nfunction getBasePxFontSize(options) {\n  return options && options.basePxFontSize || 16;\n}\n/**\n * @namespace Transforms\n */\n\n\nmodule.exports = {\n  /**\n   * Adds: category, type, item, subitem, and state on the attributes object based on the location in the style dictionary.\n   *\n   * ```js\n   * // Matches: all\n   * // Returns:\n   * {\n   *   \"category\": \"color\",\n   *   \"type\": \"background\",\n   *   \"item\": \"button\",\n   *   \"subitem\": \"primary\",\n   *   \"state\": \"active\"\n   * }\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'attribute/cti': {\n    type: 'attribute',\n    transformer: function (token) {\n      const attrNames = ['category', 'type', 'item', 'subitem', 'state'];\n      const originalAttrs = token.attributes || {};\n      const generatedAttrs = {};\n\n      for (let i = 0; i < token.path.length && i < attrNames.length; i++) {\n        generatedAttrs[attrNames[i]] = token.path[i];\n      }\n\n      return Object.assign(generatedAttrs, originalAttrs);\n    }\n  },\n\n  /**\n   * Adds: hex, hsl, hsv, rgb, red, blue, green.\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'color'\n   * // Returns\n   * {\n   *   \"hex\": \"009688\",\n   *   \"rgb\": {\"r\": 0, \"g\": 150, \"b\": 136, \"a\": 1},\n   *   \"hsl\": {\"h\": 174.4, \"s\": 1, \"l\": 0.294, \"a\": 1},\n   *   \"hsv\": {\"h\": 174.4, \"s\": 1, \"l\": 0.588, \"a\": 1},\n   * }\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'attribute/color': {\n    type: 'attribute',\n    matcher: isColor,\n    transformer: function (token) {\n      var color = Color(token.value);\n      return {\n        hex: color.toHex(),\n        rgb: color.toRgb(),\n        hsl: color.toHsl(),\n        hsv: color.toHsv()\n      };\n    }\n  },\n\n  /**\n   * Creates a human-friendly name\n   *\n   * ```js\n   * // Matches: All\n   * // Returns:\n   * \"button primary\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'name/human': {\n    type: 'name',\n    transformer: function (token) {\n      return [token.attributes.item, token.attributes.subitem].join(' ');\n    }\n  },\n\n  /**\n   * Creates a camel case name. If you define a prefix on the platform in your config, it will prepend with your prefix\n   *\n   * ```js\n   * // Matches: all\n   * // Returns:\n   * \"colorBackgroundButtonPrimaryActive\"\n   * \"prefixColorBackgroundButtonPrimaryActive\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'name/cti/camel': {\n    type: 'name',\n    transformer: function (token, options) {\n      return _.camelCase([options.prefix].concat(token.path).join(' '));\n    }\n  },\n\n  /**\n   * Creates a camel case name without the category at the front.  This is most useful when there is a class, struct, enum, etc.\n   * that already has the category in it (e.g., StyleDictionaryColors.baseDarkRed instad of StyleDictionaryColors.colorBaseDarkRed).\n   * If you define a prefix on the platform in your config, it will prepend with your prefix\n   *\n   * ```js\n   * // Matches: all\n   * // Returns:\n   * \"backgroundButtonPrimaryActive\"\n   * \"prefixBackgroundButtonPrimaryActive\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'name/ti/camel': {\n    type: 'name',\n    transformer: function (token, options) {\n      return _.camelCase([options.prefix].concat(token.path.slice(1, token.path.length)).join(' '));\n    }\n  },\n\n  /**\n   * Creates a kebab case name. If you define a prefix on the platform in your config, it will prepend with your prefix\n   *\n   * ```js\n   * // Matches: all\n   * // Returns:\n   * \"color-background-button-primary-active\"\n   * \"prefix-color-background-button-primary-active\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'name/cti/kebab': {\n    type: 'name',\n    transformer: function (token, options) {\n      return _.kebabCase([options.prefix].concat(token.path).join(' '));\n    }\n  },\n\n  /**\n   * Creates a snake case name. If you define a prefix on the platform in your config, it will prepend with your prefix\n   *\n   * ```js\n   * // Matches: all\n   * // Returns:\n   * \"color_background_button_primary_active\"\n   * \"prefix_color_background_button_primary_active\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'name/cti/snake': {\n    type: 'name',\n    transformer: function (token, options) {\n      return _.snakeCase([options.prefix].concat(token.path).join(' '));\n    }\n  },\n\n  /**\n   * Creates a constant-style name based on the full CTI of the token. If you define a prefix on the platform in your config, it will prepend with your prefix\n   *\n   * ```js\n   * // Matches: all\n   * // Returns:\n   * \"COLOR_BACKGROUND_BUTTON_PRIMARY_ACTIVE\"\n   * \"PREFIX_COLOR_BACKGROUND_BUTTON_PRIMARY_ACTIVE\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'name/cti/constant': {\n    type: 'name',\n    transformer: function (token, options) {\n      return _.snakeCase([options.prefix].concat(token.path).join(' ')).toUpperCase();\n    }\n  },\n\n  /**\n   * Creates a constant-style name on the type and item of the token. This is useful if you want to create different static classes/files for categories like `Color.BACKGROUND_BASE`. If you define a prefix on the platform in your config, it will prepend with your prefix.\n   *\n   * ```js\n   * // Matches: all\n   * // Returns:\n   * \"BACKGROUND_BUTTON_PRIMARY_ACTIVE\"\n   * \"PREFIX_BACKGROUND_BUTTON_PRIMARY_ACTIVE\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'name/ti/constant': {\n    type: 'name',\n    transformer: function (token, options) {\n      var path = token.path.slice(1);\n      return _.snakeCase([options.prefix].concat(path).join(' ')).toUpperCase();\n    }\n  },\n\n  /**\n   * Creates a Pascal case name. If you define a prefix on the platform in your config, it will prepend with your prefix\n   *\n   * ```js\n   * // Matches: all\n   * // Returns:\n   * \"ColorBackgroundButtonPrimaryActive\"\n   * \"PrefixColorBackgroundButtonPrimaryActive\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'name/cti/pascal': {\n    type: 'name',\n    transformer: function (token, options) {\n      return _.upperFirst(_.camelCase([options.prefix].concat(token.path).join(' ')));\n    }\n  },\n\n  /**\n   * Transforms the value into an RGB string\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'color'\n   * // Returns:\n   * \"rgb(0, 150, 136)\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'color/rgb': {\n    type: 'value',\n    matcher: isColor,\n    transformer: function (token) {\n      return Color(token.value).toRgbString();\n    }\n  },\n\n  /**\n  * Transforms the value into an HSL string or HSLA if alpha is present. Better browser support than color/hsl-4\n  *\n  * ```js\n  * // Matches: token.attributes.category === 'color'\n  * // Returns:\n  * \"hsl(174, 100%, 29%)\"\n  * \"hsl(174, 100%, 29%, .5)\"\n  * ```\n  *\n  * @memberof Transforms\n  */\n  'color/hsl': {\n    type: 'value',\n    matcher: isColor,\n    transformer: function (token) {\n      return Color(token.value).toHslString();\n    }\n  },\n\n  /**\n  * Transforms the value into an HSL string, using fourth argument if alpha is present.\n  *\n  * ```js\n  * // Matches: token.attributes.category === 'color'\n  * // Returns:\n  * \"hsl(174 100% 29%)\"\n  * \"hsl(174 100% 29% / .5)\"\n  * ```\n  *\n  * @memberof Transforms\n  */\n  'color/hsl-4': {\n    type: 'value',\n    matcher: isColor,\n    transformer: function (token) {\n      var color = Color(token.value);\n      var o = color.toHsl();\n      var vals = `${Math.round(o.h)} ${Math.round(o.s * 100)}% ${Math.round(o.l * 100)}%`;\n\n      if (color.getAlpha() === 1) {\n        return `hsl(${vals})`;\n      } else {\n        return `hsl(${vals} / ${o.a})`;\n      }\n    }\n  },\n\n  /**\n   * Transforms the value into an 6-digit hex string\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'color'\n   * // Returns:\n   * \"#009688\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'color/hex': {\n    type: 'value',\n    matcher: isColor,\n    transformer: function (token) {\n      return Color(token.value).toHexString();\n    }\n  },\n\n  /**\n   * Transforms the value into an 8-digit hex string\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'color'\n   * // Returns:\n   * \"#009688ff\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'color/hex8': {\n    type: 'value',\n    matcher: isColor,\n    transformer: function (token) {\n      return Color(token.value).toHex8String();\n    }\n  },\n\n  /**\n   * Transforms the value into an 8-digit hex string for Android because they put the alpha channel first\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'color'\n   * // Returns:\n   * \"#ff009688\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'color/hex8android': {\n    type: 'value',\n    matcher: isColor,\n    transformer: function (token) {\n      var str = Color(token.value).toHex8();\n      return '#' + str.slice(6) + str.slice(0, 6);\n    }\n  },\n\n  /**\n   * Transforms the value into a Color class for Compose\n   *\n   * ```kotlin\n   * // Matches: prop.attributes.category === 'color'\n   * // Returns:\n   * Color(0xFF009688)\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'color/composeColor': {\n    type: 'value',\n    matcher: isColor,\n    transformer: function (prop) {\n      var str = Color(prop.value).toHex8();\n      return 'Color(0x' + str.slice(6) + str.slice(0, 6) + ')';\n    }\n  },\n\n  /**\n   * Transforms the value into an UIColor class for iOS\n   *\n   * ```objectivec\n   * // Matches: token.attributes.category === 'color'\n   * // Returns:\n   * [UIColor colorWithRed:0.114f green:0.114f blue:0.114f alpha:1.000f]\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'color/UIColor': {\n    type: 'value',\n    matcher: isColor,\n    transformer: function (token) {\n      var rgb = Color(token.value).toRgb();\n      return '[UIColor colorWithRed:' + (rgb.r / 255).toFixed(3) + 'f' + ' green:' + (rgb.g / 255).toFixed(3) + 'f' + ' blue:' + (rgb.b / 255).toFixed(3) + 'f' + ' alpha:' + rgb.a.toFixed(3) + 'f]';\n    }\n  },\n\n  /**\n  * Transforms the value into an UIColor swift class for iOS\n  *\n  * ```swift\n  * // Matches: token.attributes.category === 'color'\n  * // Returns:\n  * UIColor(red: 0.667, green: 0.667, blue: 0.667, alpha: 0.6)\n  * ```\n  *\n  * @memberof Transforms\n  */\n  'color/UIColorSwift': {\n    type: 'value',\n    matcher: isColor,\n    transformer: function (token) {\n      const {\n        r,\n        g,\n        b,\n        a\n      } = Color(token.value).toRgb();\n      const rFixed = (r / 255.0).toFixed(3);\n      const gFixed = (g / 255.0).toFixed(3);\n      const bFixed = (b / 255.0).toFixed(3);\n      return `UIColor(red: ${rFixed}, green: ${gFixed}, blue: ${bFixed}, alpha: ${a})`;\n    }\n  },\n\n  /**\n  * Transforms the value into an UIColor swift class for iOS\n  *\n  * ```swift\n  * // Matches: token.attributes.category === 'color'\n  * // Returns:\n  * Color(red: 0.667, green: 0.667, blue: 0.667, opacity: 0.6)\n  * ```\n  *\n  * @memberof Transforms\n  */\n  'color/ColorSwiftUI': {\n    type: 'value',\n    matcher: isColor,\n    transformer: function (token) {\n      const {\n        r,\n        g,\n        b,\n        a\n      } = Color(token.value).toRgb();\n      const rFixed = (r / 255.0).toFixed(3);\n      const gFixed = (g / 255.0).toFixed(3);\n      const bFixed = (b / 255.0).toFixed(3);\n      return `Color(red: ${rFixed}, green: ${gFixed}, blue: ${bFixed}, opacity: ${a})`;\n    }\n  },\n\n  /**\n   * Transforms the value into a hex or rgb string depending on if it has transparency\n   *\n   * ```css\n   * // Matches: token.attributes.category === 'color'\n   * // Returns:\n   * #000000\n   * rgba(0,0,0,0.5)\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'color/css': {\n    type: 'value',\n    matcher: isColor,\n    transformer: function (token) {\n      var color = Color(token.value);\n\n      if (color.getAlpha() === 1) {\n        return color.toHexString();\n      } else {\n        return color.toRgbString();\n      }\n    }\n  },\n\n  /**\n   *\n   * Transforms a color into an object with red, green, blue, and alpha\n   * attributes that are floats from 0 - 1. This object is how Sketch stores\n   * colors.\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'color'\n   * // Returns:\n   * {\n   *   red: 0.5,\n   *   green: 0.5,\n   *   blue: 0.5,\n   *   alpha: 1\n   * }\n   * ```\n   * @memberof Transforms\n   */\n  'color/sketch': {\n    type: 'value',\n    matcher: token => token.attributes.category === 'color',\n    transformer: function (token) {\n      let color = Color(token.original.value).toRgb();\n      return {\n        red: (color.r / 255).toFixed(5),\n        green: (color.g / 255).toFixed(5),\n        blue: (color.b / 255).toFixed(5),\n        alpha: color.a\n      };\n    }\n  },\n\n  /**\n   * Transforms the value into a scale-independent pixel (sp) value for font sizes on Android. It will not scale the number.\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'size' && token.attributes.type === 'font'\n   * // Returns:\n   * \"10.0sp\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'size/sp': {\n    type: 'value',\n    matcher: isFontSize,\n    transformer: function (token) {\n      const val = parseFloat(token.value);\n      if (isNaN(val)) throwSizeError(token.name, token.value, 'sp');\n      return val.toFixed(2) + 'sp';\n    }\n  },\n\n  /**\n   * Transforms the value into a density-independent pixel (dp) value for non-font sizes on Android. It will not scale the number.\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'size' && token.attributes.type !== 'font'\n   * // Returns:\n   * \"10.0dp\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'size/dp': {\n    type: 'value',\n    matcher: isNotFontSize,\n    transformer: function (token) {\n      const val = parseFloat(token.value);\n      if (isNaN(val)) throwSizeError(token.name, token.value, 'dp');\n      return val.toFixed(2) + 'dp';\n    }\n  },\n\n  /**\n   * Transforms the value into a usefull object ( for React Native support )\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'size'\n   * // Returns:\n   * {\n   *  original: \"10px\",\n   *  number: 10,\n   *  decimal: 0.1, // 10 divided by 100\n   *  scale: 160, // 10 times 16\n   * }\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'size/object': {\n    type: 'value',\n    matcher: isSize,\n    transformer: function (token, options) {\n      var val = parseFloat(token.value);\n      if (isNaN(val)) throwSizeError(token.name, token.value, 'object');\n      return {\n        original: token.value,\n        number: val,\n        decimal: val / 100,\n        scale: val * getBasePxFontSize(options)\n      };\n    }\n  },\n\n  /**\n   * Transforms the value from a REM size on web into a scale-independent pixel (sp) value for font sizes on Android. It WILL scale the number by a factor of 16 (or the value of 'basePxFontSize' on the platform in your config).\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'size' && token.attributes.type === 'font'\n   * // Returns:\n   * \"16.0sp\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'size/remToSp': {\n    type: 'value',\n    matcher: isFontSize,\n    transformer: function (token, options) {\n      const val = parseFloat(token.value);\n      const baseFont = getBasePxFontSize(options);\n      if (isNaN(val)) throwSizeError(token.name, token.value, 'sp');\n      return (val * baseFont).toFixed(2) + 'sp';\n    }\n  },\n\n  /**\n   * Transforms the value from a REM size on web into a density-independent pixel (dp) value for font sizes on Android. It WILL scale the number by a factor of 16 (or the value of 'basePxFontSize' on the platform in your config).\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'size' && token.attributes.type !== 'font'\n   * // Returns:\n   * \"16.0dp\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'size/remToDp': {\n    type: 'value',\n    matcher: isNotFontSize,\n    transformer: function (token, options) {\n      const val = parseFloat(token.value);\n      const baseFont = getBasePxFontSize(options);\n      if (isNaN(val)) throwSizeError(token.name, token.value, 'dp');\n      return (val * baseFont).toFixed(2) + 'dp';\n    }\n  },\n\n  /**\n   * Adds 'px' to the end of the number. Does not scale the number\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'size'\n   * // Returns:\n   * \"10px\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'size/px': {\n    type: 'value',\n    matcher: isSize,\n    transformer: function (token) {\n      const val = parseFloat(token.value);\n      if (isNaN(val)) throwSizeError(token.name, token.value, 'px');\n      return val + 'px';\n    }\n  },\n\n  /**\n   * Adds 'rem' to the end of the number. Does not scale the number\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'size'\n   * // Returns:\n   * \"10rem\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'size/rem': {\n    type: 'value',\n    matcher: isSize,\n    transformer: function (token) {\n      const val = parseFloat(token.value);\n      if (isNaN(val)) throwSizeError(token.name, token.value, 'rem');\n      return val + 'rem';\n    }\n  },\n\n  /**\n   * Scales the number by 16 (or the value of 'basePxFontSize' on the platform in your config) and adds 'pt' to the end.\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'size'\n   * // Returns:\n   * \"16pt\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'size/remToPt': {\n    type: 'value',\n    matcher: isSize,\n    transformer: function (token, options) {\n      const val = parseFloat(token.value);\n      const baseFont = getBasePxFontSize(options);\n      if (isNaN(val)) throwSizeError(token.name, token.value, 'pt');\n      return (val * baseFont).toFixed(2) + 'f';\n    }\n  },\n\n  /**\n   * Transforms the value from a REM size on web into a scale-independent pixel (sp) value for font sizes in Compose. It WILL scale the number by a factor of 16 (or the value of 'basePxFontSize' on the platform in your config).\n   *\n   * ```kotlin\n   * // Matches: prop.attributes.category === 'size' && prop.attributes.type === 'font'\n   * // Returns:\n   * \"16.0.sp\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'size/compose/remToSp': {\n    type: 'value',\n    matcher: isFontSize,\n    transformer: function (prop, options) {\n      const val = parseFloat(prop.value);\n      const baseFont = getBasePxFontSize(options);\n      if (isNaN(val)) throwSizeError(prop.name, prop.value, 'sp');\n      return (val * baseFont).toFixed(2) + '.sp';\n    }\n  },\n\n  /**\n   * Transforms the value from a REM size on web into a density-independent pixel (dp) value for font sizes in Compose. It WILL scale the number by a factor of 16 (or the value of 'basePxFontSize' on the platform in your config).\n   *\n   * ```kotlin\n   * // Matches: prop.attributes.category === 'size' && prop.attributes.type !== 'font'\n   * // Returns:\n   * \"16.0.dp\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'size/compose/remToDp': {\n    type: 'value',\n    matcher: isNotFontSize,\n    transformer: function (prop, options) {\n      const val = parseFloat(prop.value);\n      const baseFont = getBasePxFontSize(options);\n      if (isNaN(val)) throwSizeError(prop.name, prop.value, 'dp');\n      return (val * baseFont).toFixed(2) + '.dp';\n    }\n  },\n\n  /**\n   * Adds the .em Compose extension to the end of a number. Does not scale the value\n   *\n   * ```kotlin\n   * // Matches: prop.attributes.category === 'size' && prop.attributes.type === 'font'\n   * // Returns:\n   * \"16.0em\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'size/compose/em': {\n    type: 'value',\n    matcher: isFontSize,\n    transformer: function (prop) {\n      const val = parseFloat(prop.value);\n      if (isNaN(val)) throwSizeError(prop.name, prop.value, 'em');\n      return val + '.em';\n    }\n  },\n\n  /**\n   * Scales the number by 16 (or the value of 'basePxFontSize' on the platform in your config) to get to points for Swift and initializes a CGFloat\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'size'\n   * // Returns: \"CGFloat(16.00)\"\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'size/swift/remToCGFloat': {\n    type: 'value',\n    matcher: isSize,\n    transformer: function (token, options) {\n      const val = parseFloat(token.value);\n      const baseFont = getBasePxFontSize(options);\n      if (isNaN(val)) throwSizeError(token.name, token.value, 'CGFloat');\n      return `CGFloat(${(val * baseFont).toFixed(2)})`;\n    }\n  },\n\n  /**\n   * Scales the number by 16 (or the value of 'basePxFontSize' on the platform in your config) and adds 'px' to the end.\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'size'\n   * // Returns:\n   * \"16px\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'size/remToPx': {\n    type: 'value',\n    matcher: isSize,\n    transformer: function (token, options) {\n      const val = parseFloat(token.value);\n      const baseFont = getBasePxFontSize(options);\n      if (isNaN(val)) throwSizeError(token.name, token.value, 'px');\n      return (val * baseFont).toFixed(0) + 'px';\n    }\n  },\n\n  /**\n   * Scales non-zero numbers to rem, and adds 'rem' to the end. If you define a \"basePxFontSize\" on the platform in your config, it will be used to scale the value, otherwise 16 (default web font size) will be used.\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'size'\n   * // Returns:\n   * \"0\"\n   * \"1rem\"\n   * ```\n   */\n  'size/pxToRem': {\n    type: 'value',\n    matcher: isSize,\n    transformer: (token, options) => {\n      const baseFont = getBasePxFontSize(options);\n      const floatVal = parseFloat(token.value);\n\n      if (isNaN(floatVal)) {\n        throwSizeError(token.name, token.value, 'rem');\n      }\n\n      if (floatVal === 0) {\n        return '0';\n      }\n\n      return `${floatVal / baseFont}rem`;\n    }\n  },\n\n  /**\n   * Takes a unicode point and transforms it into a form CSS can use.\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'content' && token.attributes.type === 'icon'\n   * // Returns:\n   * \"'\\\\E001'\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'content/icon': {\n    type: 'value',\n    matcher: function (token) {\n      return token.attributes.category === 'content' && token.attributes.type === 'icon';\n    },\n    transformer: function (token) {\n      return token.value.replace(UNICODE_PATTERN, function (match, variable) {\n        return \"'\\\\\" + variable + \"'\";\n      });\n    }\n  },\n\n  /**\n   * Wraps the value in a single quoted string\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'content'\n   * // Returns:\n   * \"'string'\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'content/quote': {\n    type: 'value',\n    matcher: isContent,\n    transformer: function (token) {\n      return wrapValueWith('\\'', token);\n    }\n  },\n\n  /**\n   * Wraps the value in a double-quoted string and prepends an '@' to make a string literal.\n   *\n   * ```objectivec\n   * // Matches: token.attributes.category === 'content'\n   * // Returns:\n   * @\"string\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'content/objC/literal': {\n    type: 'value',\n    matcher: isContent,\n    transformer: function (token) {\n      return '@' + wrapValueWithDoubleQuote(token);\n    }\n  },\n\n  /**\n   * Wraps the value in a double-quoted string to make a string literal.\n   *\n   * ```swift\n   * // Matches: token.attributes.category === 'content'\n   * // Returns:\n   * \"string\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'content/swift/literal': {\n    type: 'value',\n    matcher: isContent,\n    transformer: wrapValueWithDoubleQuote\n  },\n\n  /**\n   * Wraps the value in a double-quoted string and prepends an '@' to make a string literal.\n   *\n   * ```objectivec\n   * // Matches: token.attributes.category === 'font'\n   * // Returns: @\"string\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'font/objC/literal': {\n    type: 'value',\n    matcher: function (token) {\n      return token.attributes.category === 'font';\n    },\n    transformer: function (token) {\n      return '@' + wrapValueWithDoubleQuote(token);\n    }\n  },\n\n  /**\n   * Wraps the value in a double-quoted string to make a string literal.\n   *\n   * ```swift\n   * // Matches: token.attributes.category === 'font'\n   * // Returns: \"string\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'font/swift/literal': {\n    type: 'value',\n    matcher: function (token) {\n      return token.attributes.category === 'font';\n    },\n    transformer: wrapValueWithDoubleQuote\n  },\n\n  /**\n   * Assumes a time in miliseconds and transforms it into a decimal\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'time'\n   * // Returns:\n   * \"0.5s\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'time/seconds': {\n    type: 'value',\n    matcher: function (token) {\n      return token.attributes.category === 'time';\n    },\n    transformer: function (token) {\n      return (parseFloat(token.value) / 1000).toFixed(2) + 's';\n    }\n  },\n\n  /**\n   * Wraps the value in a double-quoted string and prepends an '@' to make a string literal.\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'asset'\n   * // Returns:\n   * 'IyBlZGl0b3Jjb25maWcub3JnCnJvb3QgPSB0cnVlCgpbKl0KaW5kZW50X3N0eWxlID0gc3BhY2UKaW5kZW50X3NpemUgPSAyCmVuZF9vZl9saW5lID0gbGYKY2hhcnNldCA9IHV0Zi04CnRyaW1fdHJhaWxpbmdfd2hpdGVzcGFjZSA9IHRydWUKaW5zZXJ0X2ZpbmFsX25ld2xpbmUgPSB0cnVlCgpbKi5tZF0KdHJpbV90cmFpbGluZ193aGl0ZXNwYWNlID0gZmFsc2U='\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'asset/base64': {\n    type: 'value',\n    matcher: isAsset,\n    transformer: function (token) {\n      return convertToBase64(token.value);\n    }\n  },\n\n  /**\n   * Prepends the local file path\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'asset'\n   * // Returns:\n   * \"path/to/file/asset.png\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'asset/path': {\n    type: 'value',\n    matcher: isAsset,\n    transformer: function (token) {\n      return path.join(process.cwd(), token.value);\n    }\n  },\n\n  /**\n   * Wraps the value in a double-quoted string and prepends an '@' to make a string literal.\n   *\n   * ```objectivec\n   * // Matches: token.attributes.category === 'asset'\n   * // Returns: @\"string\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'asset/objC/literal': {\n    type: 'value',\n    matcher: isAsset,\n    transformer: function (token) {\n      return '@' + wrapValueWithDoubleQuote(token);\n    }\n  },\n\n  /**\n   * Wraps the value in a double-quoted string to make a string literal.\n   *\n   * ```swift\n   * // Matches: token.attributes.category === 'asset'\n   * // Returns: \"string\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'asset/swift/literal': {\n    type: 'value',\n    matcher: isAsset,\n    transformer: wrapValueWithDoubleQuote\n  },\n\n  /**\n   * Transforms the value into a Flutter Color object using 8-digit hex with the alpha chanel on start\n   *  ```js\n   *  // Matches: token.attributes.category === 'color'\n   *  // Returns:\n   *  Color(0xFF00FF5F)\n   *  ```\n   *  @memberof Transforms\n   *\n   */\n  'color/hex8flutter': {\n    type: 'value',\n    matcher: isColor,\n    transformer: function (token) {\n      var str = Color(token.value).toHex8().toUpperCase();\n      return `Color(0x${str.slice(6)}${str.slice(0, 6)})`;\n    }\n  },\n\n  /**\n   * Wraps the value in a double-quoted string to make a string literal.\n   *\n   * ```dart\n   * // Matches: token.attributes.category === 'content'\n   * // Returns: \"string\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'content/flutter/literal': {\n    type: 'value',\n    matcher: isContent,\n    transformer: wrapValueWithDoubleQuote\n  },\n\n  /**\n   * Wraps the value in a double-quoted string to make a string literal.\n   *\n   * ```dart\n   * // Matches: token.attributes.category === 'asset'\n   * // Returns: \"string\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'asset/flutter/literal': {\n    type: 'value',\n    matcher: isAsset,\n    transformer: wrapValueWithDoubleQuote\n  },\n\n  /**\n  * Wraps the value in a double-quoted string to make a string literal.\n  *\n  * ```dart\n  * // Matches: token.attributes.category === 'font'\n  * // Returns: \"string\"\n  * ```\n  *\n  * @memberof Transforms\n  */\n  'font/flutter/literal': {\n    type: 'value',\n    matcher: function (token) {\n      return token.attributes.category === 'font';\n    },\n    transformer: wrapValueWithDoubleQuote\n  },\n\n  /**\n   * Scales the number by 16 (or the value of 'basePxFontSize' on the platform in your config) to get to points for Flutter\n   *\n   * ```dart\n   * // Matches: token.attributes.category === 'size'\n   * // Returns: 16.00\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'size/flutter/remToDouble': {\n    type: 'value',\n    matcher: isSize,\n    transformer: function (token, options) {\n      const baseFont = getBasePxFontSize(options);\n      return (parseFloat(token.value, 10) * baseFont).toFixed(2);\n    }\n  }\n};","map":{"version":3,"names":["Color","require","_","path","convertToBase64","UNICODE_PATTERN","isColor","token","attributes","category","isSize","isFontSize","type","isNotFontSize","isAsset","isContent","wrapValueWith","character","value","wrapValueWithDoubleQuote","throwSizeError","name","unitType","getBasePxFontSize","options","basePxFontSize","module","exports","transformer","attrNames","originalAttrs","generatedAttrs","i","length","Object","assign","matcher","color","hex","toHex","rgb","toRgb","hsl","toHsl","hsv","toHsv","item","subitem","join","camelCase","prefix","concat","slice","kebabCase","snakeCase","toUpperCase","upperFirst","toRgbString","toHslString","o","vals","Math","round","h","s","l","getAlpha","a","toHexString","toHex8String","str","toHex8","prop","r","toFixed","g","b","rFixed","gFixed","bFixed","original","red","green","blue","alpha","val","parseFloat","isNaN","number","decimal","scale","baseFont","floatVal","replace","match","variable","process","cwd"],"sources":["/Users/braxtoncoats/Github/bcd/node_modules/style-dictionary/lib/common/transforms.js"],"sourcesContent":["/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nvar Color           = require('tinycolor2'),\n    _               = require('../utils/es6_'),\n    path            = require('path'),\n    convertToBase64 = require('../utils/convertToBase64'),\n    UNICODE_PATTERN = /&#x([^;]+);/g;\n\nfunction isColor(token) {\n  return token.attributes.category === 'color';\n}\n\nfunction isSize(token) {\n  return token.attributes.category === 'size';\n}\n\nfunction isFontSize(token) {\n  return token.attributes.category === 'size' &&\n    (token.attributes.type === 'font' || token.attributes.type === 'icon');\n}\n\nfunction isNotFontSize(token) {\n  return token.attributes.category === 'size' &&\n    token.attributes.type !== 'font' &&\n    token.attributes.type !== 'icon';\n}\n\nfunction isAsset(token) {\n\treturn token.attributes.category === 'asset';\n}\n\nfunction isContent(token) {\n\treturn token.attributes.category === 'content';\n}\n\nfunction wrapValueWith(character, token) {\n\treturn `${character}${token.value}${character}`;\n}\n\nfunction wrapValueWithDoubleQuote(token) {\n\treturn wrapValueWith('\"', token);\n}\n\nfunction throwSizeError(name, value, unitType) {\n  throw `Invalid Number: '${name}: ${value}' is not a valid number, cannot transform to '${unitType}' \\n`;\n}\n\nfunction getBasePxFontSize(options) {\n  return (options && options.basePxFontSize) || 16;\n}\n\n/**\n * @namespace Transforms\n */\nmodule.exports = {\n  /**\n   * Adds: category, type, item, subitem, and state on the attributes object based on the location in the style dictionary.\n   *\n   * ```js\n   * // Matches: all\n   * // Returns:\n   * {\n   *   \"category\": \"color\",\n   *   \"type\": \"background\",\n   *   \"item\": \"button\",\n   *   \"subitem\": \"primary\",\n   *   \"state\": \"active\"\n   * }\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'attribute/cti': {\n    type: 'attribute',\n    transformer: function(token) {\n\n      const attrNames = ['category', 'type', 'item', 'subitem', 'state'];\n      const originalAttrs = token.attributes || {};\n      const generatedAttrs =  {}\n\n      for(let i=0; i<token.path.length && i<attrNames.length; i++) {\n        generatedAttrs[attrNames[i]] = token.path[i];\n      }\n\n      return Object.assign(generatedAttrs, originalAttrs);\n    }\n  },\n\n  /**\n   * Adds: hex, hsl, hsv, rgb, red, blue, green.\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'color'\n   * // Returns\n   * {\n   *   \"hex\": \"009688\",\n   *   \"rgb\": {\"r\": 0, \"g\": 150, \"b\": 136, \"a\": 1},\n   *   \"hsl\": {\"h\": 174.4, \"s\": 1, \"l\": 0.294, \"a\": 1},\n   *   \"hsv\": {\"h\": 174.4, \"s\": 1, \"l\": 0.588, \"a\": 1},\n   * }\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'attribute/color': {\n    type: 'attribute',\n    matcher: isColor,\n    transformer: function (token) {\n      var color = Color(token.value);\n      return {\n        hex: color.toHex(),\n        rgb: color.toRgb(),\n        hsl: color.toHsl(),\n        hsv: color.toHsv()\n      };\n    }\n  },\n\n  /**\n   * Creates a human-friendly name\n   *\n   * ```js\n   * // Matches: All\n   * // Returns:\n   * \"button primary\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'name/human': {\n    type: 'name',\n    transformer: function(token) {\n      return [\n        token.attributes.item,\n        token.attributes.subitem\n      ].join(' ');\n    }\n  },\n\n  /**\n   * Creates a camel case name. If you define a prefix on the platform in your config, it will prepend with your prefix\n   *\n   * ```js\n   * // Matches: all\n   * // Returns:\n   * \"colorBackgroundButtonPrimaryActive\"\n   * \"prefixColorBackgroundButtonPrimaryActive\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'name/cti/camel': {\n    type: 'name',\n    transformer: function(token, options) {\n      return _.camelCase( [options.prefix].concat(token.path).join(' ') );\n    }\n  },\n\n  /**\n   * Creates a camel case name without the category at the front.  This is most useful when there is a class, struct, enum, etc.\n   * that already has the category in it (e.g., StyleDictionaryColors.baseDarkRed instad of StyleDictionaryColors.colorBaseDarkRed).\n   * If you define a prefix on the platform in your config, it will prepend with your prefix\n   *\n   * ```js\n   * // Matches: all\n   * // Returns:\n   * \"backgroundButtonPrimaryActive\"\n   * \"prefixBackgroundButtonPrimaryActive\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'name/ti/camel': {\n    type: 'name',\n    transformer: function(token, options) {\n      return _.camelCase( [options.prefix].concat(token.path.slice(1, token.path.length)).join(' ') );\n    }\n  },\n\n  /**\n   * Creates a kebab case name. If you define a prefix on the platform in your config, it will prepend with your prefix\n   *\n   * ```js\n   * // Matches: all\n   * // Returns:\n   * \"color-background-button-primary-active\"\n   * \"prefix-color-background-button-primary-active\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'name/cti/kebab': {\n    type: 'name',\n    transformer: function(token, options) {\n      return _.kebabCase([options.prefix].concat(token.path).join(' '));\n    }\n  },\n\n  /**\n   * Creates a snake case name. If you define a prefix on the platform in your config, it will prepend with your prefix\n   *\n   * ```js\n   * // Matches: all\n   * // Returns:\n   * \"color_background_button_primary_active\"\n   * \"prefix_color_background_button_primary_active\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'name/cti/snake': {\n    type: 'name',\n    transformer: function(token, options) {\n      return _.snakeCase( [options.prefix].concat(token.path).join(' ') );\n    }\n  },\n\n  /**\n   * Creates a constant-style name based on the full CTI of the token. If you define a prefix on the platform in your config, it will prepend with your prefix\n   *\n   * ```js\n   * // Matches: all\n   * // Returns:\n   * \"COLOR_BACKGROUND_BUTTON_PRIMARY_ACTIVE\"\n   * \"PREFIX_COLOR_BACKGROUND_BUTTON_PRIMARY_ACTIVE\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'name/cti/constant': {\n    type: 'name',\n    transformer: function(token, options) {\n      return _.snakeCase( [options.prefix].concat(token.path).join(' ') ).toUpperCase();\n    }\n  },\n\n  /**\n   * Creates a constant-style name on the type and item of the token. This is useful if you want to create different static classes/files for categories like `Color.BACKGROUND_BASE`. If you define a prefix on the platform in your config, it will prepend with your prefix.\n   *\n   * ```js\n   * // Matches: all\n   * // Returns:\n   * \"BACKGROUND_BUTTON_PRIMARY_ACTIVE\"\n   * \"PREFIX_BACKGROUND_BUTTON_PRIMARY_ACTIVE\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'name/ti/constant': {\n    type: 'name',\n    transformer: function(token, options) {\n      var path = token.path.slice(1);\n      return _.snakeCase( [options.prefix].concat(path).join(' ') ).toUpperCase();\n    }\n  },\n\n  /**\n   * Creates a Pascal case name. If you define a prefix on the platform in your config, it will prepend with your prefix\n   *\n   * ```js\n   * // Matches: all\n   * // Returns:\n   * \"ColorBackgroundButtonPrimaryActive\"\n   * \"PrefixColorBackgroundButtonPrimaryActive\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'name/cti/pascal': {\n    type: 'name',\n    transformer: function(token, options) {\n      return _.upperFirst( _.camelCase([options.prefix].concat(token.path).join(' ')) );\n    }\n  },\n\n  /**\n   * Transforms the value into an RGB string\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'color'\n   * // Returns:\n   * \"rgb(0, 150, 136)\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'color/rgb': {\n    type: 'value',\n    matcher: isColor,\n    transformer: function (token) {\n      return Color(token.value).toRgbString();\n    }\n  },\n\n    /**\n   * Transforms the value into an HSL string or HSLA if alpha is present. Better browser support than color/hsl-4\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'color'\n   * // Returns:\n   * \"hsl(174, 100%, 29%)\"\n   * \"hsl(174, 100%, 29%, .5)\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'color/hsl': {\n    type: 'value',\n    matcher: isColor,\n    transformer: function (token) {\n      return Color(token.value).toHslString();\n    }\n  },\n\n    /**\n   * Transforms the value into an HSL string, using fourth argument if alpha is present.\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'color'\n   * // Returns:\n   * \"hsl(174 100% 29%)\"\n   * \"hsl(174 100% 29% / .5)\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'color/hsl-4': {\n    type: 'value',\n    matcher: isColor,\n    transformer: function (token) {\n      var color = Color(token.value);\n      var o = color.toHsl()\n      var vals = `${Math.round(o.h)} ${Math.round(o.s * 100)}% ${Math.round(o.l * 100)}%`\n      if (color.getAlpha() === 1) {\n        return `hsl(${vals})`\n      } else {\n        return `hsl(${vals} / ${o.a})`\n      }\n    }\n  },\n\n  /**\n   * Transforms the value into an 6-digit hex string\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'color'\n   * // Returns:\n   * \"#009688\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'color/hex': {\n    type: 'value',\n    matcher: isColor,\n    transformer: function (token) {\n      return Color(token.value).toHexString();\n    }\n  },\n\n  /**\n   * Transforms the value into an 8-digit hex string\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'color'\n   * // Returns:\n   * \"#009688ff\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'color/hex8': {\n    type: 'value',\n    matcher: isColor,\n    transformer: function (token) {\n      return Color(token.value).toHex8String();\n    }\n  },\n\n  /**\n   * Transforms the value into an 8-digit hex string for Android because they put the alpha channel first\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'color'\n   * // Returns:\n   * \"#ff009688\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'color/hex8android': {\n    type: 'value',\n    matcher: isColor,\n    transformer: function (token) {\n      var str = Color(token.value).toHex8();\n      return '#' + str.slice(6) + str.slice(0,6);\n    }\n  },\n\n  /**\n   * Transforms the value into a Color class for Compose\n   *\n   * ```kotlin\n   * // Matches: prop.attributes.category === 'color'\n   * // Returns:\n   * Color(0xFF009688)\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'color/composeColor': {\n    type: 'value',\n    matcher: isColor,\n    transformer: function (prop) {\n      var str = Color(prop.value).toHex8();\n      return 'Color(0x' + str.slice(6) + str.slice(0,6) + ')'\n    }\n  },\n\n  /**\n   * Transforms the value into an UIColor class for iOS\n   *\n   * ```objectivec\n   * // Matches: token.attributes.category === 'color'\n   * // Returns:\n   * [UIColor colorWithRed:0.114f green:0.114f blue:0.114f alpha:1.000f]\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'color/UIColor': {\n    type: 'value',\n    matcher: isColor,\n    transformer: function (token) {\n      var rgb = Color(token.value).toRgb();\n      return '[UIColor colorWithRed:' + (rgb.r/255).toFixed(3) + 'f' +\n             ' green:' + (rgb.g/255).toFixed(3) + 'f' +\n             ' blue:' + (rgb.b/255).toFixed(3) + 'f' +\n             ' alpha:' + rgb.a.toFixed(3) + 'f]';\n    }\n  },\n\n    /**\n   * Transforms the value into an UIColor swift class for iOS\n   *\n   * ```swift\n   * // Matches: token.attributes.category === 'color'\n   * // Returns:\n   * UIColor(red: 0.667, green: 0.667, blue: 0.667, alpha: 0.6)\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'color/UIColorSwift': {\n    type: 'value',\n    matcher: isColor,\n    transformer: function (token) {\n      const { r, g, b, a } = Color(token.value).toRgb();\n      const rFixed = (r / 255.0).toFixed(3);\n      const gFixed = (g / 255.0).toFixed(3);\n      const bFixed = (b / 255.0).toFixed(3);\n      return `UIColor(red: ${rFixed}, green: ${gFixed}, blue: ${bFixed}, alpha: ${a})`;\n    }\n  },\n\n    /**\n   * Transforms the value into an UIColor swift class for iOS\n   *\n   * ```swift\n   * // Matches: token.attributes.category === 'color'\n   * // Returns:\n   * Color(red: 0.667, green: 0.667, blue: 0.667, opacity: 0.6)\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'color/ColorSwiftUI': {\n    type: 'value',\n    matcher: isColor,\n    transformer: function (token) {\n      const { r, g, b, a } = Color(token.value).toRgb();\n      const rFixed = (r / 255.0).toFixed(3);\n      const gFixed = (g / 255.0).toFixed(3);\n      const bFixed = (b / 255.0).toFixed(3);\n      return `Color(red: ${rFixed}, green: ${gFixed}, blue: ${bFixed}, opacity: ${a})`;\n    }\n  },\n\n  /**\n   * Transforms the value into a hex or rgb string depending on if it has transparency\n   *\n   * ```css\n   * // Matches: token.attributes.category === 'color'\n   * // Returns:\n   * #000000\n   * rgba(0,0,0,0.5)\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'color/css': {\n    type: 'value',\n    matcher: isColor,\n    transformer: function (token) {\n      var color = Color(token.value);\n      if (color.getAlpha() === 1) {\n        return color.toHexString();\n      } else {\n        return color.toRgbString();\n      }\n    }\n  },\n\n  /**\n   *\n   * Transforms a color into an object with red, green, blue, and alpha\n   * attributes that are floats from 0 - 1. This object is how Sketch stores\n   * colors.\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'color'\n   * // Returns:\n   * {\n   *   red: 0.5,\n   *   green: 0.5,\n   *   blue: 0.5,\n   *   alpha: 1\n   * }\n   * ```\n   * @memberof Transforms\n   */\n  'color/sketch': {\n    type: 'value',\n    matcher: (token) => token.attributes.category === 'color',\n    transformer: function(token) {\n      let color = Color(token.original.value).toRgb();\n      return {\n        red: (color.r / 255).toFixed(5),\n        green: (color.g / 255).toFixed(5),\n        blue: (color.b / 255).toFixed(5),\n        alpha: color.a\n      }\n    }\n  },\n\n  /**\n   * Transforms the value into a scale-independent pixel (sp) value for font sizes on Android. It will not scale the number.\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'size' && token.attributes.type === 'font'\n   * // Returns:\n   * \"10.0sp\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'size/sp': {\n    type: 'value',\n    matcher: isFontSize,\n    transformer: function(token) {\n      const val = parseFloat(token.value);\n      if (isNaN(val)) throwSizeError(token.name, token.value, 'sp');\n      return val.toFixed(2) + 'sp';\n    }\n  },\n\n  /**\n   * Transforms the value into a density-independent pixel (dp) value for non-font sizes on Android. It will not scale the number.\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'size' && token.attributes.type !== 'font'\n   * // Returns:\n   * \"10.0dp\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'size/dp': {\n    type: 'value',\n    matcher: isNotFontSize,\n    transformer: function(token) {\n      const val = parseFloat(token.value);\n      if (isNaN(val)) throwSizeError(token.name, token.value, 'dp');\n      return val.toFixed(2) + 'dp';\n    }\n  },\n\n  /**\n   * Transforms the value into a usefull object ( for React Native support )\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'size'\n   * // Returns:\n   * {\n   *  original: \"10px\",\n   *  number: 10,\n   *  decimal: 0.1, // 10 divided by 100\n   *  scale: 160, // 10 times 16\n   * }\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'size/object': {\n    type: 'value',\n    matcher: isSize,\n    transformer: function (token, options) {\n      var val = parseFloat(token.value);\n      if (isNaN(val)) throwSizeError(token.name, token.value, 'object');\n\n      return {\n        original: token.value,\n        number: val,\n        decimal: val / 100,\n        scale: val * getBasePxFontSize(options),\n      };\n    },\n  },\n\n  /**\n   * Transforms the value from a REM size on web into a scale-independent pixel (sp) value for font sizes on Android. It WILL scale the number by a factor of 16 (or the value of 'basePxFontSize' on the platform in your config).\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'size' && token.attributes.type === 'font'\n   * // Returns:\n   * \"16.0sp\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'size/remToSp': {\n    type: 'value',\n    matcher: isFontSize,\n    transformer: function(token, options) {\n      const val = parseFloat(token.value);\n      const baseFont = getBasePxFontSize(options);\n      if (isNaN(val)) throwSizeError(token.name, token.value, 'sp');\n      return (val * baseFont).toFixed(2) + 'sp';\n    }\n  },\n\n\n  /**\n   * Transforms the value from a REM size on web into a density-independent pixel (dp) value for font sizes on Android. It WILL scale the number by a factor of 16 (or the value of 'basePxFontSize' on the platform in your config).\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'size' && token.attributes.type !== 'font'\n   * // Returns:\n   * \"16.0dp\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'size/remToDp': {\n    type: 'value',\n    matcher: isNotFontSize,\n    transformer: function(token, options) {\n      const val = parseFloat(token.value);\n      const baseFont = getBasePxFontSize(options);\n      if (isNaN(val)) throwSizeError(token.name, token.value, 'dp');\n      return (val * baseFont).toFixed(2) + 'dp';\n    }\n  },\n\n\n  /**\n   * Adds 'px' to the end of the number. Does not scale the number\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'size'\n   * // Returns:\n   * \"10px\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'size/px': {\n    type: 'value',\n    matcher: isSize,\n    transformer: function(token) {\n      const val = parseFloat(token.value);\n      if (isNaN(val)) throwSizeError(token.name, token.value, 'px');\n      return val + 'px';\n    }\n  },\n\n  /**\n   * Adds 'rem' to the end of the number. Does not scale the number\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'size'\n   * // Returns:\n   * \"10rem\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'size/rem': {\n    type: 'value',\n    matcher: isSize,\n    transformer: function(token) {\n      const val = parseFloat(token.value);\n      if (isNaN(val)) throwSizeError(token.name, token.value, 'rem');\n      return val + 'rem';\n    }\n  },\n\n  /**\n   * Scales the number by 16 (or the value of 'basePxFontSize' on the platform in your config) and adds 'pt' to the end.\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'size'\n   * // Returns:\n   * \"16pt\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'size/remToPt': {\n    type: 'value',\n    matcher: isSize,\n    transformer: function(token, options) {\n      const val = parseFloat(token.value);\n      const baseFont = getBasePxFontSize(options);\n      if (isNaN(val)) throwSizeError(token.name, token.value, 'pt');\n      return (val * baseFont).toFixed(2) + 'f';\n    }\n  },\n\n  /**\n   * Transforms the value from a REM size on web into a scale-independent pixel (sp) value for font sizes in Compose. It WILL scale the number by a factor of 16 (or the value of 'basePxFontSize' on the platform in your config).\n   *\n   * ```kotlin\n   * // Matches: prop.attributes.category === 'size' && prop.attributes.type === 'font'\n   * // Returns:\n   * \"16.0.sp\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'size/compose/remToSp': {\n    type: 'value',\n    matcher: isFontSize,\n    transformer: function(prop, options) {\n      const val = parseFloat(prop.value);\n      const baseFont = getBasePxFontSize(options);\n      if (isNaN(val)) throwSizeError(prop.name, prop.value, 'sp');\n      return (val * baseFont).toFixed(2) + '.sp';\n    }\n  },\n\n\n  /**\n   * Transforms the value from a REM size on web into a density-independent pixel (dp) value for font sizes in Compose. It WILL scale the number by a factor of 16 (or the value of 'basePxFontSize' on the platform in your config).\n   *\n   * ```kotlin\n   * // Matches: prop.attributes.category === 'size' && prop.attributes.type !== 'font'\n   * // Returns:\n   * \"16.0.dp\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'size/compose/remToDp': {\n    type: 'value',\n    matcher: isNotFontSize,\n    transformer: function(prop, options) {\n      const val = parseFloat(prop.value);\n      const baseFont = getBasePxFontSize(options);\n      if (isNaN(val)) throwSizeError(prop.name, prop.value, 'dp');\n      return (val * baseFont).toFixed(2) + '.dp';\n    }\n  },\n\n  /**\n   * Adds the .em Compose extension to the end of a number. Does not scale the value\n   *\n   * ```kotlin\n   * // Matches: prop.attributes.category === 'size' && prop.attributes.type === 'font'\n   * // Returns:\n   * \"16.0em\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'size/compose/em': {\n    type: 'value',\n    matcher: isFontSize,\n    transformer: function(prop) {\n      const val = parseFloat(prop.value);\n      if (isNaN(val)) throwSizeError(prop.name, prop.value, 'em');\n      return val + '.em';\n    }\n  },\n\n  /**\n   * Scales the number by 16 (or the value of 'basePxFontSize' on the platform in your config) to get to points for Swift and initializes a CGFloat\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'size'\n   * // Returns: \"CGFloat(16.00)\"\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'size/swift/remToCGFloat': {\n    type: 'value',\n    matcher: isSize,\n    transformer: function(token, options) {\n      const val = parseFloat(token.value);\n      const baseFont = getBasePxFontSize(options);\n      if (isNaN(val)) throwSizeError(token.name, token.value, 'CGFloat');\n      return `CGFloat(${(val * baseFont).toFixed(2)})`;\n    }\n  },\n\n  /**\n   * Scales the number by 16 (or the value of 'basePxFontSize' on the platform in your config) and adds 'px' to the end.\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'size'\n   * // Returns:\n   * \"16px\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'size/remToPx': {\n    type: 'value',\n    matcher: isSize,\n    transformer: function(token, options) {\n      const val = parseFloat(token.value);\n      const baseFont = getBasePxFontSize(options);\n      if (isNaN(val)) throwSizeError(token.name, token.value, 'px');\n      return (val * baseFont).toFixed(0) + 'px';\n    }\n  },\n\n  /**\n   * Scales non-zero numbers to rem, and adds 'rem' to the end. If you define a \"basePxFontSize\" on the platform in your config, it will be used to scale the value, otherwise 16 (default web font size) will be used.\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'size'\n   * // Returns:\n   * \"0\"\n   * \"1rem\"\n   * ```\n   */\n  'size/pxToRem': {\n    type: 'value',\n    matcher: isSize,\n    transformer: (token, options) => {\n      const baseFont = getBasePxFontSize(options);\n      const floatVal = parseFloat(token.value);\n\n      if (isNaN(floatVal)) {\n        throwSizeError(token.name, token.value, 'rem');\n      }\n\n      if (floatVal === 0) {\n        return '0';\n      }\n\n      return `${floatVal / baseFont}rem`;\n    }\n  },\n\n  /**\n   * Takes a unicode point and transforms it into a form CSS can use.\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'content' && token.attributes.type === 'icon'\n   * // Returns:\n   * \"'\\\\E001'\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'content/icon': {\n    type: 'value',\n    matcher: function (token) {\n      return token.attributes.category === 'content' && token.attributes.type === 'icon';\n    },\n    transformer: function (token) {\n      return token.value.replace(UNICODE_PATTERN, function (match, variable) {\n        return \"'\\\\\" + variable + \"'\";\n      });\n    }\n  },\n\n  /**\n   * Wraps the value in a single quoted string\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'content'\n   * // Returns:\n   * \"'string'\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'content/quote': {\n    type: 'value',\n    matcher: isContent,\n    transformer: function(token) {\n      return  wrapValueWith('\\'', token);\n    }\n  },\n\n  /**\n   * Wraps the value in a double-quoted string and prepends an '@' to make a string literal.\n   *\n   * ```objectivec\n   * // Matches: token.attributes.category === 'content'\n   * // Returns:\n   * @\"string\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'content/objC/literal': {\n    type: 'value',\n    matcher: isContent,\n    transformer: function(token) {\n      return '@' + wrapValueWithDoubleQuote(token);\n    }\n  },\n\n  /**\n   * Wraps the value in a double-quoted string to make a string literal.\n   *\n   * ```swift\n   * // Matches: token.attributes.category === 'content'\n   * // Returns:\n   * \"string\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'content/swift/literal': {\n    type: 'value',\n    matcher: isContent,\n    transformer: wrapValueWithDoubleQuote\n  },\n\n  /**\n   * Wraps the value in a double-quoted string and prepends an '@' to make a string literal.\n   *\n   * ```objectivec\n   * // Matches: token.attributes.category === 'font'\n   * // Returns: @\"string\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'font/objC/literal': {\n    type: 'value',\n    matcher: function(token) {\n      return token.attributes.category === 'font';\n    },\n    transformer: function(token) {\n      return '@' + wrapValueWithDoubleQuote(token);\n    }\n  },\n\n  /**\n   * Wraps the value in a double-quoted string to make a string literal.\n   *\n   * ```swift\n   * // Matches: token.attributes.category === 'font'\n   * // Returns: \"string\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'font/swift/literal': {\n    type: 'value',\n    matcher: function(token) {\n      return token.attributes.category === 'font';\n    },\n    transformer: wrapValueWithDoubleQuote\n  },\n\n\n  /**\n   * Assumes a time in miliseconds and transforms it into a decimal\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'time'\n   * // Returns:\n   * \"0.5s\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'time/seconds': {\n    type: 'value',\n    matcher: function(token) {\n      return token.attributes.category === 'time';\n    },\n    transformer: function(token) {\n      return (parseFloat(token.value) / 1000).toFixed(2) + 's';\n    }\n  },\n\n  /**\n   * Wraps the value in a double-quoted string and prepends an '@' to make a string literal.\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'asset'\n   * // Returns:\n   * 'IyBlZGl0b3Jjb25maWcub3JnCnJvb3QgPSB0cnVlCgpbKl0KaW5kZW50X3N0eWxlID0gc3BhY2UKaW5kZW50X3NpemUgPSAyCmVuZF9vZl9saW5lID0gbGYKY2hhcnNldCA9IHV0Zi04CnRyaW1fdHJhaWxpbmdfd2hpdGVzcGFjZSA9IHRydWUKaW5zZXJ0X2ZpbmFsX25ld2xpbmUgPSB0cnVlCgpbKi5tZF0KdHJpbV90cmFpbGluZ193aGl0ZXNwYWNlID0gZmFsc2U='\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'asset/base64': {\n    type: 'value',\n    matcher: isAsset,\n    transformer: function(token) {\n      return convertToBase64(token.value);\n    }\n  },\n\n  /**\n   * Prepends the local file path\n   *\n   * ```js\n   * // Matches: token.attributes.category === 'asset'\n   * // Returns:\n   * \"path/to/file/asset.png\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'asset/path': {\n    type: 'value',\n    matcher: isAsset,\n    transformer: function(token) {\n      return path.join(process.cwd(), token.value);\n    }\n  },\n\n  /**\n   * Wraps the value in a double-quoted string and prepends an '@' to make a string literal.\n   *\n   * ```objectivec\n   * // Matches: token.attributes.category === 'asset'\n   * // Returns: @\"string\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'asset/objC/literal': {\n    type: 'value',\n    matcher: isAsset,\n    transformer: function(token) {\n      return '@' + wrapValueWithDoubleQuote(token);\n    }\n  },\n\n  /**\n   * Wraps the value in a double-quoted string to make a string literal.\n   *\n   * ```swift\n   * // Matches: token.attributes.category === 'asset'\n   * // Returns: \"string\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'asset/swift/literal': {\n    type: 'value',\n    matcher: isAsset,\n    transformer: wrapValueWithDoubleQuote\n  },\n\n\n  /**\n   * Transforms the value into a Flutter Color object using 8-digit hex with the alpha chanel on start\n   *  ```js\n   *  // Matches: token.attributes.category === 'color'\n   *  // Returns:\n   *  Color(0xFF00FF5F)\n   *  ```\n   *  @memberof Transforms\n   *\n   */\n    'color/hex8flutter': {\n        type: 'value',\n        matcher: isColor,\n        transformer: function (token) {\n            var str = Color(token.value).toHex8().toUpperCase();\n            return `Color(0x${str.slice(6)}${str.slice(0,6)})`;\n        }\n    },\n\n  /**\n   * Wraps the value in a double-quoted string to make a string literal.\n   *\n   * ```dart\n   * // Matches: token.attributes.category === 'content'\n   * // Returns: \"string\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'content/flutter/literal': {\n    type: 'value',\n    matcher: isContent,\n    transformer: wrapValueWithDoubleQuote\n  },\n\n  /**\n   * Wraps the value in a double-quoted string to make a string literal.\n   *\n   * ```dart\n   * // Matches: token.attributes.category === 'asset'\n   * // Returns: \"string\"\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'asset/flutter/literal': {\n    type: 'value',\n    matcher: isAsset,\n    transformer: wrapValueWithDoubleQuote\n  },\n\n  /**\n * Wraps the value in a double-quoted string to make a string literal.\n *\n * ```dart\n * // Matches: token.attributes.category === 'font'\n * // Returns: \"string\"\n * ```\n *\n * @memberof Transforms\n */\n  'font/flutter/literal': {\n    type: 'value',\n    matcher: function (token) {\n      return token.attributes.category === 'font';\n    },\n    transformer: wrapValueWithDoubleQuote\n  },\n\n  /**\n   * Scales the number by 16 (or the value of 'basePxFontSize' on the platform in your config) to get to points for Flutter\n   *\n   * ```dart\n   * // Matches: token.attributes.category === 'size'\n   * // Returns: 16.00\n   * ```\n   *\n   * @memberof Transforms\n   */\n  'size/flutter/remToDouble': {\n    type: 'value',\n    matcher: isSize,\n    transformer: function (token, options) {\n      const baseFont = getBasePxFontSize(options);\n      return (parseFloat(token.value, 10) * baseFont).toFixed(2);\n    }\n  }\n\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}