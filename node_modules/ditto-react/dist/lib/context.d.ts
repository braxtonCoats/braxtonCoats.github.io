/// <reference types="react" />
import { Plurals } from "../components/Ditto";
export declare type Count = number | undefined;
export interface VariableData {
    text?: string;
    url?: string;
    example?: string;
    fallback?: string;
}
declare type VariableType = string | number;
export interface VariablesInput {
    [variableId: string]: VariableType;
}
export interface TextData {
    plurals: Plurals;
    text: string;
    variables: {
        [variableName: string]: VariableData;
    };
}
export interface Block {
    text: string;
}
export interface Frame {
    frameName: string;
    blocks: Block[];
    otherText?: Block[];
}
export interface FormatDefaultProject {
    [frameId: string]: Frame;
}
interface FormatStructured {
    [id: string]: {
        text: string;
        plurals: Plurals;
        variables: {
            [variableName: string]: VariableData;
        };
    };
}
interface FormatDefaultComponentLibrary {
    [componentApiId: string]: {
        name: string;
        text: string;
    };
}
interface FormatStructuredProject {
    [apiId: string]: {
        text: string;
        tags?: string[];
        notes?: string;
    };
}
interface FormatStructuredCL {
    [apiId: string]: {
        name: string;
        text: string;
    };
}
interface FormatFlat {
    [apiId: string]: string;
}
export declare type ProjectFormat = FormatDefaultProject | FormatFlat | FormatStructuredProject;
export declare type ComponentLibraryFormat = FormatDefaultComponentLibrary | FormatFlat | FormatStructuredCL;
export declare type Project = ProjectFormat | ComponentLibraryFormat;
export interface Source {
    projects: {
        [projectId: string]: Project;
    };
    exported_at: string;
}
export interface SourceVariants {
    [variantApiId: string]: Source;
}
declare type SourceType = FormatDefaultProject | FormatStructured | FormatFlat | {
    [key: string]: any;
};
export declare type DittoSource = {
    [projectId: string]: {
        [variantApiId: string]: SourceType;
    };
};
export declare const SourceDetector: {
    isFrame: (source: SourceType) => source is FormatDefaultProject;
    isFlat: (source: SourceType) => source is FormatFlat;
    isStructured: (source: SourceType) => source is FormatStructured;
};
interface DittoContext {
    projectId?: string;
    variant?: string;
    source: DittoSource;
}
export declare const DittoContext: import("react").Context<DittoContext>;
export {};
