{"version":3,"file":"index.modern.js","sources":["../src/lib/context.ts","../src/lib/utils.tsx","../src/hooks/useDittoSingleText.ts","../src/components/DittoText.tsx","../src/hooks/useDitto.ts","../src/components/DittoFrameOrBlock.tsx","../src/hooks/useDittoComponent.ts","../src/components/DittoComponent.tsx","../src/components/Ditto.tsx","../src/components/DittoProvider.tsx"],"sourcesContent":["import { createContext } from \"react\";\nimport { Plurals } from \"../components/Ditto\";\n\nexport type Count = number | undefined;\n\nexport interface VariableData {\n  text?: string;\n  url?: string;\n  example?: string;\n  fallback?: string;\n}\n\ntype VariableType = string | number;\nexport interface VariablesInput {\n  [variableId: string]: VariableType;\n}\n\nexport interface TextData {\n  plurals: Plurals;\n  text: string;\n  variables: {\n    [variableName: string]: VariableData;\n  };\n}\n\nexport interface Block {\n  text: string;\n}\nexport interface Frame {\n  frameName: string;\n  blocks: Block[];\n  otherText?: Block[];\n}\n\nexport interface FormatDefaultProject {\n  [frameId: string]: Frame;\n}\n\ninterface FormatStructured {\n  [id: string]: {\n    text: string;\n    plurals: Plurals;\n    variables: {\n      [variableName: string]: VariableData;\n    };\n  };\n}\n\ninterface FormatDefaultComponentLibrary {\n  [componentApiId: string]: {\n    name: string;\n    text: string;\n  };\n}\n\ninterface FormatStructuredProject {\n  [apiId: string]: {\n    text: string;\n    tags?: string[];\n    notes?: string;\n  };\n}\n\ninterface FormatStructuredCL {\n  [apiId: string]: {\n    name: string;\n    text: string;\n  };\n}\n\ninterface FormatFlat {\n  [apiId: string]: string;\n}\n\nexport type ProjectFormat =\n  | FormatDefaultProject\n  | FormatFlat\n  | FormatStructuredProject;\n\nexport type ComponentLibraryFormat =\n  | FormatDefaultComponentLibrary\n  | FormatFlat\n  | FormatStructuredCL;\n\nexport type Project = ProjectFormat | ComponentLibraryFormat;\n\nexport interface Source {\n  projects: {\n    [projectId: string]: Project;\n  };\n  exported_at: string;\n}\n\nexport interface SourceVariants {\n  [variantApiId: string]: Source;\n}\n\ntype SourceType =\n  | FormatDefaultProject\n  // This type matches for:\n  // - `default` and `structured` formats for the component library\n  // - `structured` format for projects\n  | FormatStructured\n  // This type matches for both projects and the component library\n  | FormatFlat\n  | { [key: string]: any };\n\nexport type DittoSource = {\n  [projectId: string]: {\n    [variantApiId: string]: SourceType;\n  };\n};\n\nexport const SourceDetector = {\n  isFrame: function (source: SourceType): source is FormatDefaultProject {\n    if (!source) {\n      return false;\n    }\n\n    const value = source[Object.keys(source)[0]];\n    return value !== null && typeof value === \"object\" && \"frameName\" in value;\n  },\n  isFlat: function (source: SourceType): source is FormatFlat {\n    if (!source) {\n      return false;\n    }\n\n    const value = source[Object.keys(source)[0]];\n    return typeof value === \"string\";\n  },\n  isStructured: function (source: SourceType): source is FormatStructured {\n    if (!source) {\n      return false;\n    }\n\n    const value = source[Object.keys(source)[0]];\n    return value !== null && typeof value === \"object\" && !this.isFrame(source);\n  },\n};\n\ninterface DittoContext {\n  projectId?: string;\n  variant?: string;\n  source: DittoSource;\n}\n\nexport const DittoContext = createContext({} as DittoContext);\n","import { Fragment, useContext } from \"react\";\nimport {\n  DittoComponentLibraryProps,\n  DittoProjectProps,\n  DittoProps,\n  DittoFrameOrBlockProps,\n  DittoTextProps,\n} from \"../components/Ditto\";\nimport { DittoContext, Frame, Block, VariablesInput, Count, TextData } from \"./context\";\n\nexport const filterBlock = (blockObj: Block, variables: VariablesInput, count: Count, filters) => {\n\n  return Object.keys(blockObj)\n    .filter((textId) => {\n      if (!filters?.tags) return true;\n\n      return filters.tags.every(\n        (tag) => blockObj[textId].tags && blockObj[textId].tags.includes(tag)\n      );\n    })\n    .reduce((obj, id) => {\n      const interpolatedText = interpolateVariableText(blockObj[id], variables, count).text\n      return { ...obj, [id]: interpolatedText }\n    }, {} as Block);\n};\n\nexport const filterFrame = (_frameObj: Frame, variables: VariablesInput, count: Count, filters) => {\n  const frameObj = JSON.parse(JSON.stringify(_frameObj));\n\n  if (frameObj.blocks) {\n    for (var blockId in frameObj.blocks) {\n      frameObj.blocks[blockId] = filterBlock(frameObj.blocks[blockId], variables, count, filters);\n    }\n  }\n\n  return { ...frameObj, otherText: filterBlock(frameObj.otherText, variables, count, filters) };\n};\n\nexport const error = (message: string, returnValue: any = message) => {\n  console.error(message);\n  return returnValue;\n};\n\nexport const nullError = (message: string) => error(message, null);\nexport const fragmentError = (message: string) => error(message, <Fragment />);\n\nexport const isProject = (\n  props: DittoProps,\n  projectIdFromContext?: string\n): props is DittoProjectProps =>\n  (\"projectId\" in props || !!projectIdFromContext) &&\n  (\"textId\" in props || \"frameId\" in props || \"blockId\" in props);\n\nexport const isComponentLibrary = (\n  props: DittoProps\n): props is DittoComponentLibraryProps => \"componentId\" in props;\n\nexport const isText = (props: DittoProps): props is DittoTextProps =>\n  \"textId\" in props;\n\nexport const isFrameOrBlockComponent = (\n  props: DittoProps\n): props is DittoFrameOrBlockProps => \"frameId\" in props;\n\nexport const useProjectId = (props: { projectId?: string }) => {\n  const dittoContext = useContext(DittoContext);\n  const projectId = dittoContext.projectId || props.projectId;\n  if (!projectId) {\n    return fragmentError(\n      \"No Project ID was provided to the <DittoProvider /> or <Ditto /> components.\"\n    );\n  }\n\n  return projectId;\n};\n\n/**\n * \n * @param data\n * text data\n * @param count \n * the variable number used to determine which plural case to use\n * zero = 0\n * one = 1\n * two = 2\n * few = 3,4,5\n * many = 6,7,...,99\n * other = 100, 101, ...\n * if count is provided but not matching plural key, fallback to base plural value\n * in future we should also user's to define their own middleware for picking plurals\n * based off i8next: https://www.i18next.com/translation-function/plurals\n */\nconst getPluralText = (data: TextData, count: Count) => {\n  if (count === undefined|| Object.keys(data?.plurals || {})?.length === 0) {\n    return data.text\n  }\n  else if (count === 0 && data.plurals.zero) {\n    return data.plurals.zero\n  } else if (count === 1 && data.plurals.one) {\n    return data.plurals.one\n  } else if (count === 2 && data.plurals.two) {\n    return data.plurals.two\n  } else if (count >= 3 && count <= 5 && data.plurals.few) {\n    return data.plurals.few\n  } else if (count >= 6 && count <= 99 && data.plurals.many) {\n    return data.plurals.many\n  } else {\n    // default to 'other', fallback to base text\n    if (data.plurals.other) return data.plurals.other\n    return data.text\n  }\n}\n\nexport const interpolateVariableText = (data: TextData, variables: VariablesInput, count: Count) => {\n  const variablesWithFallbacks = Object.keys(data?.variables || {}).reduce((acc, curr) => {\n    if (variables[curr]) {\n      acc[curr] = variables[curr]\n    } else {\n      const { fallback, text } = data.variables[curr]\n      acc[curr] = fallback || text\n    }\n    return acc;\n  }, {})\n  const pluralText = getPluralText(data, count)\n  return {\n    ...data,\n    text: generateVariableText(pluralText, variablesWithFallbacks)\n  }\n}\n\nconst HANDLEBAR_REGEX = /\\{\\{([a-z0-9_]+)\\}\\}/gi;\n\n/**\n * Execute a callback for each valid variable found in\n * `text`. The callback is passed an object that includes:\n * - `name`: the name of the variable\n * - `start`: the index of opening curly brace of the variable in `text`\n * - `end`: the index of the closing curly brace of the variable in `text`\n */\nconst forEachVariable = (text, callback) => {\n  let matches: RegExpExecArray | null = null;\n\n  while ((matches = HANDLEBAR_REGEX.exec(text)) !== null) {\n    const [match] = matches;\n    if (!match) {\n      break;\n    }\n\n    const variableName = match.replace(/(\\{\\{|\\}\\})/g, \"\");\n\n    callback({\n      name: variableName,\n      start: matches.index,\n      end: matches.index + match.length - 1,\n    });\n  }\n};\n\nconst getVariable = (variableName, variables) => {\n  const variable = variables[variableName]\n  if (!variable) {\n    return null;\n  }\n\n  return variable;\n};\n\nconst getVariablePlaceholder = (variable) => {\n  if (!(variable && variable.data)) {\n    return null;\n  }\n\n  if (variable.data.fallback) {\n    return String(variable.data.fallback);\n  }\n\n  if (variable.data.text) {\n    return String(variable.data.text);\n  }\n\n  return null;\n};\n\nconst generateVariableText = (text, variables) => {\n  let lastIndex = 0;\n  let updatedText = \"\";\n  forEachVariable(text, ({ name, start, end }) => {\n    const variableValue = getVariable(name, variables) || getVariablePlaceholder(name);\n    if (variableValue) {\n      updatedText += text.substring(lastIndex, start) + variableValue;\n    } else {\n      updatedText += text.substr(lastIndex, end + 1);\n    }\n    lastIndex = end + 1;\n  });\n\n  const remainder = text.substr(lastIndex);\n  if (remainder) {\n    updatedText += remainder;\n  }\n  return updatedText;\n};","import { useContext } from \"react\";\nimport {\n  DittoContext,\n  SourceDetector,\n  VariablesInput,\n  Count,\n} from \"../lib/context\";\nimport { nullError, interpolateVariableText } from \"../lib/utils\";\n\ninterface useDittoSingleTextProps {\n  projectId?: string;\n  textId: string;\n  variables: VariablesInput;\n  count?: Count;\n}\n\nexport const useDittoSingleText = (props: useDittoSingleTextProps) => {\n  const { projectId, textId, variables, count } = props;\n  const { source, variant } = useContext(DittoContext);\n\n  if (!projectId) return nullError(\"No Project ID provided.\");\n\n  if (variant) {\n    const data = source?.[projectId]?.[variant];\n    if (data) {\n      if (SourceDetector.isStructured(data)) {\n        return interpolateVariableText(data[textId], variables, count).text;\n      }\n\n      if (SourceDetector.isFlat(data)) {\n        return data[textId];\n      }\n\n      if (SourceDetector.isFrame(data)) {\n        for (const frameId in data) {\n          const frame = data[frameId];\n\n          for (const blockId in frame.blocks) {\n            const block = frame.blocks[blockId];\n\n            if (textId in block)\n              return interpolateVariableText(block[textId], variables, count)\n                .text;\n          }\n\n          if (frame.otherText && textId in frame.otherText)\n            return interpolateVariableText(\n              frame.otherText[textId],\n              variables,\n              count\n            ).text;\n        }\n      }\n    }\n  }\n\n  const data = source?.[projectId]?.base;\n  if (!data) {\n    return nullError(`Project not found with id \"${projectId}\"`);\n  }\n\n  if (SourceDetector.isStructured(data)) {\n    return interpolateVariableText(data[textId], variables, count).text;\n  }\n\n  if (SourceDetector.isFlat(data)) {\n    return data[textId];\n  }\n\n  if (SourceDetector.isFrame(data)) {\n    for (const frameId in data) {\n      const frame = data[frameId];\n\n      for (const blockId in frame.blocks) {\n        const block = frame.blocks[blockId];\n\n        if (textId in block)\n          return interpolateVariableText(block[textId], variables, count).text;\n      }\n\n      if (frame.otherText && textId in frame.otherText)\n        return interpolateVariableText(\n          frame.otherText[textId],\n          variables,\n          count\n        ).text;\n    }\n  }\n\n  return `Text not found for id \"${textId}\"`;\n};\n","import React from \"react\";\nimport { useDittoSingleText } from \"../hooks/useDittoSingleText\";\nimport { useProjectId } from \"../lib/utils\";\nimport { DittoTextProps } from \"./Ditto\";\n\nexport const DittoText = (props: DittoTextProps) => {\n  const { textId, children, variables, count } = props;\n  const projectId = useProjectId(props);\n  const text = useDittoSingleText({ projectId, textId, variables: variables || {}, count });\n\n  return (\n    <React.Fragment>\n      {typeof children === \"function\" ? children(text) : text}\n    </React.Fragment>\n  );\n};\n","import { useContext } from \"react\";\nimport { DittoContext, SourceDetector, VariablesInput } from \"../lib/context\";\nimport { filterFrame, filterBlock, nullError } from \"../lib/utils\";\n\ninterface useDittoProps {\n  projectId?: string;\n  frameId: string;\n  blockId?: string;\n  variables?: VariablesInput;\n  count?: number;\n  filters?: {\n    tags: string[];\n  };\n}\n\nexport const useDitto = (props: useDittoProps) => {\n  const { projectId, frameId, blockId, filters, variables, count } = props;\n  const { source, variant } = useContext(DittoContext);\n\n  if (!projectId) return nullError(\"No Project ID provided.\");\n\n  if (variant) {\n    const data = source?.[projectId]?.[variant];\n    if (SourceDetector.isFrame(data) && frameId) {\n      const frame = data[frameId];\n      if (frame) {\n        if (!blockId) {\n          return filterFrame(frame, variables || {}, count, filters);\n        }\n        if (blockId in frame.blocks) {\n          const block = frame.blocks[blockId];\n          if (block) {\n            return filterBlock(block, variables || {}, count, filters);\n          }\n        }\n      }\n    }\n  }\n\n  const data = source[projectId]?.base;\n  if (!data) {\n    return nullError(`Project not found with id \"${projectId}\"`);\n  }\n\n  if (!SourceDetector.isFrame(data)) {\n    return nullError(\n      `Default format must be used if passing \"frameId\" or \"blockId\"`\n    );\n  }\n\n  if (!frameId) {\n    return nullError(\"No Frame ID provided.\");\n  }\n\n  const frame = data[frameId];\n  if (!frame)\n    return nullError(\n      `Frame \"${frameId}\" not found this project \"${projectId}\"`\n    );\n\n  if (!blockId) return filterFrame(frame, variables || {}, count, filters);\n\n  const block = frame.blocks[blockId];\n  if (!block)\n    return nullError(\n      `Block \"${blockId}\" not found in frame \"${frameId}\" in project \"${projectId}\"`\n    );\n\n  return filterBlock(block, variables || {}, count, filters);\n};\n","import React from \"react\";\nimport { useDitto } from \"../hooks/useDitto\";\nimport { fragmentError, useProjectId } from \"../lib/utils\";\nimport {\n  DittoBlockProps,\n  DittoFilters,\n  DittoFrameOrBlockProps,\n  DittoFrameProps,\n} from \"./Ditto\";\n\ntype Props = DittoFrameOrBlockProps;\n\nexport const DittoFrameOrBlock = (props: Props) => {\n  const { children, ...otherProps } = props;\n  const data = useDitto(otherProps);\n\n  if (typeof children !== \"function\") {\n    return fragmentError(\n      `Please provide either a textId or function child to your Ditto component.`\n    );\n  }\n\n  if (!data || typeof data !== \"object\") {\n    return <>{data}</>;\n  }\n\n  return <>{children(data)}</>;\n};\n\nexport const DittoFrame = (props: DittoFrameProps & DittoFilters) => {\n  const projectId = useProjectId(props);\n  return <DittoFrameOrBlock {...props} projectId={projectId} />;\n};\n\nexport const DittoBlock = (props: DittoBlockProps & DittoFilters) => {\n  const projectId = useProjectId(props);\n  return <DittoFrameOrBlock {...props} projectId={projectId} />;\n};\n","import { useContext } from \"react\";\nimport { DittoContext, SourceDetector, VariablesInput } from \"../lib/context\";\nimport { nullError, interpolateVariableText } from \"../lib/utils\";\n\ntype DittoComponentString = string;\ntype DittoComponentObject = {\n  text: string;\n};\ntype DittoComponent = DittoComponentString | DittoComponentObject;\n\ninterface Args {\n  componentId: string;\n  alwaysReturnString: boolean;\n  variables: VariablesInput;\n  count?: number;\n}\n\nexport const useDittoComponent = (props: Args): DittoComponent => {\n  const { componentId, alwaysReturnString, variables, count } = props;\n  const { source, variant } = useContext(DittoContext);\n  if (!(\"ditto_component_library\" in source)) {\n    throw new Error(\n      \"An export file for the Component Library couldn't be found.\"\n    );\n  }\n\n  if (variant) {\n    const data = source?.ditto_component_library?.[variant];\n    if (data && data[componentId]) {\n      if (SourceDetector.isStructured(data)) {\n        const value = interpolateVariableText(\n          data[componentId],\n          variables,\n          count\n        );\n        return alwaysReturnString ? value.text : value;\n      } else if (SourceDetector.isFlat(data)) {\n        return data[componentId];\n      }\n    }\n  }\n\n  const data = source?.ditto_component_library?.base;\n  if (!data) {\n    return nullError(\"Base text not found in component library\");\n  }\n\n  if (data && !data[componentId]) {\n    return nullError(`Text not found for component \"${componentId}\"`);\n  }\n\n  if (SourceDetector.isStructured(data)) {\n    const value = interpolateVariableText(data[componentId], variables, count);\n    return alwaysReturnString ? value.text : value;\n  } else if (SourceDetector.isFlat(data)) {\n    return data[componentId];\n  } else {\n    return nullError(`Invalid format for component ${componentId}`);\n  }\n};\n","import React, { useMemo } from \"react\";\nimport { useDittoComponent } from \"../hooks/useDittoComponent\";\nimport { DittoComponentLibraryProps } from \"./Ditto\";\n\nexport const DittoComponent = (props: DittoComponentLibraryProps) => {\n  const { children, componentId, variables, count } = props;\n\n  const value = useDittoComponent({\n    componentId,\n    alwaysReturnString: typeof children !== \"function\",\n    variables: variables || {},\n    count\n  });\n\n  const text = useMemo(\n    () => (value !== null && typeof value === \"object\" ? value.text : value),\n    [value]\n  );\n\n  return (\n    <React.Fragment>\n      {typeof children === \"function\" ? children(text) : text}\n    </React.Fragment>\n  );\n};\n","import { useContext } from \"react\";\nimport { DittoText } from \"./DittoText\";\nimport { DittoFrameOrBlock } from \"./DittoFrameOrBlock\";\nimport { DittoComponent } from \"./DittoComponent\";\nimport { Block, DittoContext, Frame, VariablesInput } from \"../lib/context\";\nimport {\n  isFrameOrBlockComponent,\n  isText,\n  fragmentError,\n  isComponentLibrary,\n  isProject,\n} from \"../lib/utils\";\n\ntype PluralId = \"zero\" | \"one\" | \"two\" | \"few\" | \"many\" | \"other\";\nexport type Plurals = {\n  [pluralId in PluralId]?: string;\n}\n\nexport interface DittoFrameProps {\n  projectId?: string;\n  frameId: string;\n  variables?: VariablesInput;\n  count?: number;\n  children: (frame: Frame) => React.ReactNode;\n}\n\nexport interface DittoBlockProps {\n  projectId?: string;\n  frameId: string;\n  blockId: string;\n  variables?: VariablesInput;\n  count?: number;\n  children: (block: Block) => React.ReactNode;\n}\n\nexport interface DittoTextProps {\n  projectId?: string;\n  textId: string;\n  variables?: VariablesInput;\n  count?: number;\n  children?: (text: string) => React.ReactNode;\n}\n\nexport interface DittoComponentLibraryProps {\n  componentId: string;\n  variables?: VariablesInput;\n  count?: number;\n  children?: (text: string) => React.ReactNode;\n}\n\nexport interface DittoFilters {\n  filters?: {\n    tags: string[];\n  };\n}\n\nexport type DittoFrameOrBlockProps = DittoFilters &\n  (DittoFrameProps | DittoBlockProps);\n\nexport type DittoProjectProps = DittoFilters &\n  (DittoFrameProps | DittoBlockProps | DittoTextProps);\n\nexport type DittoProps = DittoProjectProps | DittoComponentLibraryProps;\n\nexport function Ditto(props: DittoProps) {\n  const dittoContext = useContext(DittoContext);\n\n  if (isComponentLibrary(props)) {\n    return <DittoComponent {...props} />;\n  }\n\n  if (isProject(props, dittoContext.projectId)) {\n    const projectId = props.projectId || dittoContext.projectId;\n    if (!projectId) {\n      return fragmentError(\n        \"No Project ID was provided to the <DittoProvider /> or <Ditto /> components.\"\n      );\n    }\n\n    const propsWithProject = { ...props, projectId };\n\n    if (isText(propsWithProject)) {\n      return <DittoText {...propsWithProject} />;\n    }\n\n    if (isFrameOrBlockComponent(propsWithProject)) {\n      return <DittoFrameOrBlock {...propsWithProject} />;\n    }\n  }\n\n  return fragmentError(\n    'Invalid props provided to Ditto component; please provide \"componentId\", \"textId\" or \"frameId\"'\n  );\n}\n","import React from \"react\";\nimport { DittoContext, DittoSource } from \"../lib/context\";\n\ninterface DittoProviderProps {\n  projectId?: string;\n  variant?: string;\n  source: DittoSource;\n  children: React.ReactNode;\n}\n\nexport const DittoProvider = (props: DittoProviderProps) => {\n  const { children, source, variant, projectId } = props;\n\n  return (\n    <DittoContext.Provider\n      value={{\n        source,\n        variant,\n        ...(projectId ? { projectId } : {}),\n      }}\n    >\n      {children}\n    </DittoContext.Provider>\n  );\n};\n"],"names":["SourceDetector","isFrame","source","value","Object","keys","isFlat","isStructured","DittoContext","createContext","filterBlock","blockObj","variables","count","filters","filter","textId","tags","every","tag","includes","reduce","obj","id","interpolatedText","interpolateVariableText","text","filterFrame","_frameObj","frameObj","JSON","parse","stringify","blocks","blockId","otherText","error","message","returnValue","console","nullError","fragmentError","_jsx","Fragment","isProject","props","projectIdFromContext","isComponentLibrary","isText","isFrameOrBlockComponent","useProjectId","dittoContext","useContext","projectId","getPluralText","data","undefined","plurals","length","zero","one","two","few","many","other","variablesWithFallbacks","acc","curr","fallback","pluralText","generateVariableText","HANDLEBAR_REGEX","forEachVariable","callback","matches","exec","match","variableName","replace","name","start","index","end","getVariable","variable","getVariablePlaceholder","String","lastIndex","updatedText","variableValue","substring","substr","remainder","useDittoSingleText","variant","frameId","frame","block","base","DittoText","children","React","useDitto","DittoFrameOrBlock","otherProps","DittoFrame","DittoBlock","useDittoComponent","componentId","alwaysReturnString","Error","ditto_component_library","DittoComponent","useMemo","Ditto","propsWithProject","DittoProvider","Provider"],"mappings":"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"}